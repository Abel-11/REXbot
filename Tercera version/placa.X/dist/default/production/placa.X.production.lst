

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Nov 03 15:42:50 2019

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           ; Version 1.44
    79                           ; Generated 14/09/2017 GMT
    80                           ; 
    81                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F45K22 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataBANK0
   114  001602                     __pidataBANK0:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _KD
   118  001602  00                 	db	0
   119  001603  20                 	db	32
   120  001604  41                 	db	65
   121                           
   122                           ;initializer for _KP
   123  001605  CD                 	db	205
   124  001606  4C                 	db	76
   125  001607  3F                 	db	63
   126  0000                     _T4CONbits	set	3921
   127  0000                     _T4CON	set	3921
   128  0000                     _TMR4	set	3923
   129  0000                     _PR4	set	3922
   130  0000                     _CCPR5H	set	3926
   131  0000                     _CCPR5L	set	3925
   132  0000                     _CCP5CON	set	3924
   133  0000                     _CCPTMRS1bits	set	3912
   134  0000                     _CCPR4H	set	3929
   135  0000                     _CCPR4L	set	3928
   136  0000                     _CCP4CON	set	3927
   137  0000                     _ANSELA	set	3896
   138  0000                     _ANSELE	set	3900
   139  0000                     _ANSELB	set	3897
   140  0000                     _ANSELC	set	3898
   141  0000                     _ANSELD	set	3899
   142  0000                     _PORTBbits	set	3969
   143  0000                     _PIR5bits	set	3966
   144  0000                     _RCREG1	set	4014
   145  0000                     _RCSTA1bits	set	4011
   146  0000                     _TXREG1	set	4013
   147  0000                     _TXSTA1bits	set	4012
   148  0000                     _SPBRGH1	set	4016
   149  0000                     _SPBRG1	set	4015
   150  0000                     _TXSTA1	set	4012
   151  0000                     _RCSTA1	set	4011
   152  0000                     _BAUDCON1	set	4024
   153  0000                     _ADCON0bits	set	4034
   154  0000                     _ADRESH	set	4036
   155  0000                     _ADRESL	set	4035
   156  0000                     _ADCON2	set	4032
   157  0000                     _ADCON1	set	4033
   158  0000                     _ADCON0	set	4034
   159  0000                     _T2CONbits	set	4026
   160  0000                     _T2CON	set	4026
   161  0000                     _TMR2	set	4028
   162  0000                     _PR2	set	4027
   163  0000                     _PIR1bits	set	3998
   164  0000                     _PIE1bits	set	3997
   165  0000                     _RCONbits	set	4048
   166  0000                     _INTCON3bits	set	4080
   167  0000                     _INTCONbits	set	4082
   168  0000                     _INTCON2bits	set	4081
   169  0000                     _WPUB	set	3937
   170  0000                     _TRISD	set	3989
   171  0000                     _TRISC	set	3988
   172  0000                     _TRISB	set	3987
   173  0000                     _TRISA	set	3986
   174  0000                     _TRISE	set	3990
   175  0000                     _LATC	set	3979
   176  0000                     _LATB	set	3978
   177  0000                     _LATA	set	3977
   178  0000                     _LATD	set	3980
   179  0000                     _LATE	set	3981
   180  0000                     _OSCTUNE	set	3995
   181  0000                     _OSCCON2	set	4050
   182  0000                     _OSCCON	set	4051
   183  0000                     _LATD2	set	31842
   184  0000                     _LATD0	set	31840
   185  0000                     _LATC2	set	31834
   186  0000                     _LATC3	set	31835
   187  0000                     _LATC1	set	31833
   188  0000                     _LATC7	set	31839
   189  0000                     _PLLRDY	set	32407
   190                           
   191                           ; #config settings
   192  0000                     
   193                           	psect	cinit
   194  00123A                     __pcinit:
   195                           	opt stack 0
   196  00123A                     start_initialization:
   197                           	opt stack 0
   198  00123A                     __initialization:
   199                           	opt stack 0
   200                           
   201                           ; Initialize objects allocated to BANK0 (6 bytes)
   202                           ; load TBLPTR registers with __pidataBANK0
   203  00123A  0E02               	movlw	low __pidataBANK0
   204  00123C  6EF6               	movwf	tblptrl,c
   205  00123E  0E16               	movlw	high __pidataBANK0
   206  001240  6EF7               	movwf	tblptrh,c
   207  001242  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   208  001244  6EF8               	movwf	tblptru,c
   209  001246  EE00  F0F3         	lfsr	0,__pdataBANK0
   210  00124A  EE10 F006          	lfsr	1,6
   211  00124E                     copy_data0:
   212  00124E  0009               	tblrd		*+
   213  001250  CFF5 FFEE          	movff	tablat,postinc0
   214  001254  50E5               	movf	postdec1,w,c
   215  001256  50E1               	movf	fsr1l,w,c
   216  001258  E1FA               	bnz	copy_data0
   217                           
   218                           ; Clear objects allocated to BANK0 (94 bytes)
   219  00125A  EE00  F060         	lfsr	0,__pbssBANK0
   220  00125E  0E5E               	movlw	94
   221  001260                     clear_0:
   222  001260  6AEE               	clrf	postinc0,c
   223  001262  06E8               	decf	wreg,f,c
   224  001264  E1FD               	bnz	clear_0
   225                           
   226                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   227  001266  6A4C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   228                           
   229                           ; Clear objects allocated to COMRAM (20 bytes)
   230  001268  EE00  F038         	lfsr	0,__pbssCOMRAM
   231  00126C  0E14               	movlw	20
   232  00126E                     clear_1:
   233  00126E  6AEE               	clrf	postinc0,c
   234  001270  06E8               	decf	wreg,f,c
   235  001272  E1FD               	bnz	clear_1
   236  001274                     end_of_initialization:
   237                           	opt stack 0
   238  001274                     __end_of__initialization:
   239                           	opt stack 0
   240  001274  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   241  001276  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   242  001278  0E00               	movlw	low (__Lmediumconst shr (0+16))
   243  00127A  6EF8               	movwf	tblptru,c
   244  00127C  0100               	movlb	0
   245  00127E  EFF5  F003         	goto	_main	;jump to C main() function
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           postdec1	equ	0xFE5
   253                           fsr1l	equ	0xFE1
   254                           
   255                           	psect	bitbssCOMRAM
   256  000260                     __pbitbssCOMRAM:
   257                           	opt stack 0
   258  000260                     _flag_recta:
   259                           	opt stack 0
   260  000260                     	ds	1
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           postdec1	equ	0xFE5
   268                           fsr1l	equ	0xFE1
   269                           
   270                           	psect	bssCOMRAM
   271  000038                     __pbssCOMRAM:
   272                           	opt stack 0
   273  000038                     calculo_PID@last_error:
   274                           	opt stack 0
   275  000038                     	ds	3
   276  00003B                     _INT2_InterruptHandler:
   277                           	opt stack 0
   278  00003B                     	ds	2
   279  00003D                     _INT1_InterruptHandler:
   280                           	opt stack 0
   281  00003D                     	ds	2
   282  00003F                     _INT0_InterruptHandler:
   283                           	opt stack 0
   284  00003F                     	ds	2
   285  000041                     _EUSART1_RxDefaultInterruptHandler:
   286                           	opt stack 0
   287  000041                     	ds	2
   288  000043                     _EUSART1_TxDefaultInterruptHandler:
   289                           	opt stack 0
   290  000043                     	ds	2
   291  000045                     _eusart1RxLastError:
   292                           	opt stack 0
   293  000045                     	ds	1
   294  000046                     _eusart1RxCount:
   295                           	opt stack 0
   296  000046                     	ds	1
   297  000047                     _eusart1RxTail:
   298                           	opt stack 0
   299  000047                     	ds	1
   300  000048                     _eusart1RxHead:
   301                           	opt stack 0
   302  000048                     	ds	1
   303  000049                     _eusart1TxBufferRemaining:
   304                           	opt stack 0
   305  000049                     	ds	1
   306  00004A                     _eusart1TxTail:
   307                           	opt stack 0
   308  00004A                     	ds	1
   309  00004B                     _eusart1TxHead:
   310                           	opt stack 0
   311  00004B                     	ds	1
   312                           tblptru	equ	0xFF8
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           postinc0	equ	0xFEE
   317                           wreg	equ	0xFE8
   318                           postdec1	equ	0xFE5
   319                           fsr1l	equ	0xFE1
   320                           
   321                           	psect	bssBANK0
   322  000060                     __pbssBANK0:
   323                           	opt stack 0
   324  000060                     _media_blanco:
   325                           	opt stack 0
   326  000060                     	ds	16
   327  000070                     _sensor_min:
   328                           	opt stack 0
   329  000070                     	ds	16
   330  000080                     _sensor_max:
   331                           	opt stack 0
   332  000080                     	ds	16
   333  000090                     _eusart1RxStatusBuffer:
   334                           	opt stack 0
   335  000090                     	ds	8
   336  000098                     _eusart1RxBuffer:
   337                           	opt stack 0
   338  000098                     	ds	8
   339  0000A0                     _eusart1TxBuffer:
   340                           	opt stack 0
   341  0000A0                     	ds	8
   342  0000A8                     _EUSART1_ErrorHandler:
   343                           	opt stack 0
   344  0000A8                     	ds	2
   345  0000AA                     _EUSART1_OverrunErrorHandler:
   346                           	opt stack 0
   347  0000AA                     	ds	2
   348  0000AC                     _EUSART1_FramingErrorHandler:
   349                           	opt stack 0
   350  0000AC                     	ds	2
   351  0000AE                     _sensor:
   352                           	opt stack 0
   353  0000AE                     	ds	16
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           postdec1	equ	0xFE5
   361                           fsr1l	equ	0xFE1
   362                           
   363                           	psect	dataBANK0
   364  0000F3                     __pdataBANK0:
   365                           	opt stack 0
   366  0000F3                     _KD:
   367                           	opt stack 0
   368  0000F3                     	ds	3
   369  0000F6                     _KP:
   370                           	opt stack 0
   371  0000F6                     	ds	3
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           postdec1	equ	0xFE5
   379                           fsr1l	equ	0xFE1
   380                           
   381                           	psect	cstackBANK1
   382  000100                     __pcstackBANK1:
   383                           	opt stack 0
   384  000100                     main@anterior:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x0
   388  000100                     	ds	1
   389  000101                     main@correccion:
   390                           	opt stack 0
   391                           
   392                           ; 3 bytes @ 0x1
   393  000101                     	ds	3
   394  000104                     main@extra_arriba_A:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x4
   398  000104                     	ds	2
   399  000106                     main@extra_arriba_B:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x6
   403  000106                     	ds	2
   404  000108                     main@extra_abajo_B:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x8
   408  000108                     	ds	2
   409  00010A                     main@extra_abajo_A:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0xA
   413  00010A                     	ds	2
   414  00010C                     main@correccion_entera:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0xC
   418  00010C                     	ds	2
   419  00010E                     main@inicio:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0xE
   423  00010E                     	ds	1
   424  00010F                     main@velocidad_avance:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0xF
   428  00010F                     	ds	2
   429  000111                     main@velocidad_motor_A:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x11
   433  000111                     	ds	2
   434  000113                     main@velocidad_motor_B:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x13
   438  000113                     	ds	2
   439                           tblptru	equ	0xFF8
   440                           tblptrh	equ	0xFF7
   441                           tblptrl	equ	0xFF6
   442                           tablat	equ	0xFF5
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1l	equ	0xFE1
   447                           
   448                           	psect	cstackBANK0
   449  0000BE                     __pcstackBANK0:
   450                           	opt stack 0
   451  0000BE                     ?___ftdiv:
   452                           	opt stack 0
   453  0000BE                     ___ftdiv@f1:
   454                           	opt stack 0
   455  0000BE                     leer_sensores@lectura_sin_calibrar:
   456                           	opt stack 0
   457                           
   458                           ; 16 bytes @ 0x0
   459  0000BE                     	ds	3
   460  0000C1                     ___ftdiv@f2:
   461                           	opt stack 0
   462                           
   463                           ; 3 bytes @ 0x3
   464  0000C1                     	ds	3
   465  0000C4                     ??___ftdiv:
   466                           
   467                           ; 1 bytes @ 0x6
   468  0000C4                     	ds	3
   469  0000C7                     ___ftdiv@cntr:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x9
   473  0000C7                     	ds	1
   474  0000C8                     ___ftdiv@f3:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0xA
   478  0000C8                     	ds	3
   479  0000CB                     ___ftdiv@exp:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0xD
   483  0000CB                     	ds	1
   484  0000CC                     ___ftdiv@sign:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0xE
   488  0000CC                     	ds	2
   489  0000CE                     leer_sensores@numero_sensor:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0x10
   493  0000CE                     	ds	1
   494  0000CF                     ?_calculo_PID:
   495                           	opt stack 0
   496                           
   497                           ; 3 bytes @ 0x11
   498  0000CF                     	ds	3
   499  0000D2                     ??_calculo_PID:
   500                           
   501                           ; 1 bytes @ 0x14
   502  0000D2                     	ds	8
   503  0000DA                     calculo_PID@valores_digitales:
   504                           	opt stack 0
   505                           
   506                           ; 8 bytes @ 0x1C
   507  0000DA                     	ds	8
   508  0000E2                     calculo_PID@correccion:
   509                           	opt stack 0
   510                           
   511                           ; 3 bytes @ 0x24
   512  0000E2                     	ds	3
   513  0000E5                     calculo_PID@valor_proporcional:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x27
   517  0000E5                     	ds	3
   518  0000E8                     calculo_PID@valor_diferencial:
   519                           	opt stack 0
   520                           
   521                           ; 3 bytes @ 0x2A
   522  0000E8                     	ds	3
   523  0000EB                     _calculo_PID$2036:
   524                           	opt stack 0
   525                           
   526                           ; 3 bytes @ 0x2D
   527  0000EB                     	ds	3
   528  0000EE                     calculo_PID@error:
   529                           	opt stack 0
   530                           
   531                           ; 3 bytes @ 0x30
   532  0000EE                     	ds	3
   533  0000F1                     calculo_PID@valor_digital:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x33
   537  0000F1                     	ds	1
   538  0000F2                     calculo_PID@numero_sensor:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x34
   542  0000F2                     	ds	1
   543                           tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           postinc0	equ	0xFEE
   548                           wreg	equ	0xFE8
   549                           postdec1	equ	0xFE5
   550                           fsr1l	equ	0xFE1
   551                           
   552                           	psect	cstackCOMRAM
   553  000001                     __pcstackCOMRAM:
   554                           	opt stack 0
   555  000001                     ??_INTERRUPT_InterruptManager:
   556  000001                     
   557                           ; 1 bytes @ 0x0
   558  000001                     	ds	18
   559  000013                     ?_ADC_GetConversion:
   560                           	opt stack 0
   561  000013                     ?___awdiv:
   562                           	opt stack 0
   563  000013                     ?___ftpack:
   564                           	opt stack 0
   565  000013                     ?___ftneg:
   566                           	opt stack 0
   567  000013                     ?___fttol:
   568                           	opt stack 0
   569  000013                     TMR4_HasOverflowOccured@status:
   570                           	opt stack 0
   571  000013                     INT0_SetInterruptHandler@InterruptHandler:
   572                           	opt stack 0
   573  000013                     INT1_SetInterruptHandler@InterruptHandler:
   574                           	opt stack 0
   575  000013                     INT2_SetInterruptHandler@InterruptHandler:
   576                           	opt stack 0
   577  000013                     PWM4_LoadDutyValue@dutyValue:
   578                           	opt stack 0
   579  000013                     PWM5_LoadDutyValue@dutyValue:
   580                           	opt stack 0
   581  000013                     EUSART1_SetFramingErrorHandler@interruptHandler:
   582                           	opt stack 0
   583  000013                     EUSART1_SetOverrunErrorHandler@interruptHandler:
   584                           	opt stack 0
   585  000013                     EUSART1_SetErrorHandler@interruptHandler:
   586                           	opt stack 0
   587  000013                     EUSART1_SetTxInterruptHandler@interruptHandler:
   588                           	opt stack 0
   589  000013                     EUSART1_SetRxInterruptHandler@interruptHandler:
   590                           	opt stack 0
   591  000013                     ___awdiv@dividend:
   592                           	opt stack 0
   593  000013                     ___ftpack@arg:
   594                           	opt stack 0
   595  000013                     ___ftge@ff1:
   596                           	opt stack 0
   597  000013                     ___ftneg@f1:
   598                           	opt stack 0
   599  000013                     ___fttol@f1:
   600                           	opt stack 0
   601                           
   602                           ; 3 bytes @ 0x12
   603  000013                     	ds	2
   604  000015                     ??_PWM4_LoadDutyValue:
   605  000015                     ??_PWM5_LoadDutyValue:
   606  000015                     ??_ADC_GetConversion:
   607  000015                     ___awdiv@divisor:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x14
   611  000015                     	ds	1
   612  000016                     ___ftpack@exp:
   613                           	opt stack 0
   614  000016                     ___ftge@ff2:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x15
   618  000016                     	ds	1
   619  000017                     ??___fttol:
   620  000017                     ADC_GetConversion@channel:
   621                           	opt stack 0
   622  000017                     ___awdiv@counter:
   623                           	opt stack 0
   624  000017                     ___ftpack@sign:
   625                           	opt stack 0
   626  000017                     mover_motor_A@velocidad:
   627                           	opt stack 0
   628  000017                     mover_motor_B@velocidad:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x16
   632  000017                     	ds	1
   633  000018                     ??___ftpack:
   634  000018                     ___awdiv@sign:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x17
   638  000018                     	ds	1
   639  000019                     ??___ftge:
   640  000019                     moverse@velocidad_A:
   641                           	opt stack 0
   642  000019                     ___awdiv@quotient:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x18
   646  000019                     	ds	2
   647  00001B                     ??_calibracion:
   648  00001B                     ?___wmul:
   649                           	opt stack 0
   650  00001B                     ?___ftadd:
   651                           	opt stack 0
   652  00001B                     moverse@velocidad_B:
   653                           	opt stack 0
   654  00001B                     ___wmul@multiplier:
   655                           	opt stack 0
   656  00001B                     ___ftadd@f1:
   657                           	opt stack 0
   658                           
   659                           ; 3 bytes @ 0x1A
   660  00001B                     	ds	1
   661  00001C                     ___fttol@sign1:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x1B
   665  00001C                     	ds	1
   666  00001D                     ___wmul@multiplicand:
   667                           	opt stack 0
   668  00001D                     ___fttol@lval:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x1C
   672  00001D                     	ds	1
   673  00001E                     ___ftadd@f2:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x1D
   677  00001E                     	ds	1
   678  00001F                     ___wmul@product:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x1E
   682  00001F                     	ds	1
   683  000020                     calibracion@repeticiones_calibrado:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x1F
   687  000020                     	ds	1
   688  000021                     ??_leer_sensores:
   689  000021                     ??___ftadd:
   690  000021                     ?___awtoft:
   691                           	opt stack 0
   692  000021                     ___fttol@exp1:
   693                           	opt stack 0
   694  000021                     ___awtoft@c:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x20
   698  000021                     	ds	3
   699  000024                     ___awtoft@sign:
   700                           	opt stack 0
   701  000024                     ___ftadd@sign:
   702                           	opt stack 0
   703  000024                     calibracion@lectura_sin_calibrar:
   704                           	opt stack 0
   705                           
   706                           ; 16 bytes @ 0x23
   707  000024                     	ds	1
   708  000025                     ___ftadd@exp2:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x24
   712  000025                     	ds	1
   713  000026                     ___ftadd@exp1:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x25
   717  000026                     	ds	1
   718  000027                     ?___ftmul:
   719                           	opt stack 0
   720  000027                     ___ftmul@f1:
   721                           	opt stack 0
   722                           
   723                           ; 3 bytes @ 0x26
   724  000027                     	ds	3
   725  00002A                     ___ftmul@f2:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x29
   729  00002A                     	ds	3
   730  00002D                     ??___ftmul:
   731                           
   732                           ; 1 bytes @ 0x2C
   733  00002D                     	ds	3
   734  000030                     ___ftmul@exp:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x2F
   738  000030                     	ds	1
   739  000031                     ___ftmul@f3_as_product:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x30
   743  000031                     	ds	3
   744  000034                     calibracion@numero_sensor:
   745                           	opt stack 0
   746  000034                     ___ftmul@cntr:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x33
   750  000034                     	ds	1
   751  000035                     ___ftmul@sign:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x34
   755  000035                     	ds	1
   756  000036                     ??_main:
   757                           
   758                           ; 1 bytes @ 0x35
   759  000036                     	ds	2
   760                           tblptru	equ	0xFF8
   761                           tblptrh	equ	0xFF7
   762                           tblptrl	equ	0xFF6
   763                           tablat	equ	0xFF5
   764                           postinc0	equ	0xFEE
   765                           wreg	equ	0xFE8
   766                           postdec1	equ	0xFE5
   767                           fsr1l	equ	0xFE1
   768                           
   769 ;;
   770 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   771 ;;
   772 ;; *************** function _main *****************
   773 ;; Defined at:
   774 ;;		line 84 in file "main.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;		None
   777 ;; Auto vars:     Size  Location     Type
   778 ;;  correccion      3    1[BANK1 ] float 
   779 ;;  velocidad_mo    2   19[BANK1 ] int 
   780 ;;  velocidad_mo    2   17[BANK1 ] int 
   781 ;;  velocidad_av    2   15[BANK1 ] int 
   782 ;;  correccion_e    2   12[BANK1 ] int 
   783 ;;  extra_abajo_    2   10[BANK1 ] int 
   784 ;;  extra_abajo_    2    8[BANK1 ] int 
   785 ;;  extra_arriba    2    6[BANK1 ] int 
   786 ;;  extra_arriba    2    4[BANK1 ] int 
   787 ;;  inicio          1   14[BANK1 ] unsigned char 
   788 ;;  anterior        1    0[BANK1 ] unsigned char 
   789 ;; Return value:  Size  Location     Type
   790 ;;                  1    wreg      void 
   791 ;; Registers used:
   792 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   793 ;; Tracked objects:
   794 ;;		On entry : 0/0
   795 ;;		On exit  : 0/0
   796 ;;		Unchanged: 0/0
   797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   798 ;;      Params:         0       0       0       0       0       0       0
   799 ;;      Locals:         0       0      21       0       0       0       0
   800 ;;      Temps:          2       0       0       0       0       0       0
   801 ;;      Totals:         2       0      21       0       0       0       0
   802 ;;Total ram usage:       23 bytes
   803 ;; Hardware stack levels required when called:    7
   804 ;; This function calls:
   805 ;;		_SYSTEM_Initialize
   806 ;;		_TMR4_HasOverflowOccured
   807 ;;		___fttol
   808 ;;		_calculo_PID
   809 ;;		_calibracion
   810 ;;		_encender_motores
   811 ;;		_lectura_precalibracion
   812 ;;		_moverse
   813 ;; This function is called by:
   814 ;;		Startup code after reset
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818                           	psect	text0
   819  0007EA                     __ptext0:
   820                           	opt stack 0
   821  0007EA                     _main:
   822                           	opt stack 24
   823                           
   824                           ;main.c: 87: SYSTEM_Initialize();
   825                           
   826                           ;incstack = 0
   827  0007EA  ECFF  F009         	call	_SYSTEM_Initialize	;wreg free
   828                           
   829                           ;main.c: 94: (INTCONbits.GIE = 1);
   830  0007EE  8EF2               	bsf	intcon,7,c	;volatile
   831                           
   832                           ;main.c: 100: (INTCONbits.PEIE = 1);
   833  0007F0  8CF2               	bsf	intcon,6,c	;volatile
   834                           
   835                           ;main.c: 105: LATC7 = 1;
   836  0007F2  8E8B               	bsf	3979,7,c	;volatile
   837                           
   838                           ;main.c: 107: int velocidad_avance = 750;
   839  0007F4  0E02               	movlw	2
   840  0007F6  0101               	movlb	1	; () banked
   841  0007F8  6F10               	movwf	(main@velocidad_avance+1)& (0+255),b
   842  0007FA  0EEE               	movlw	238
   843  0007FC  6F0F               	movwf	main@velocidad_avance& (0+255),b
   844                           
   845                           ; BSR set to: 1
   846                           ;main.c: 108: int velocidad_motor_A = 0, velocidad_motor_B = 0;
   847  0007FE  0E00               	movlw	0
   848  000800  6F12               	movwf	(main@velocidad_motor_A+1)& (0+255),b
   849  000802  0E00               	movlw	0
   850  000804  6F11               	movwf	main@velocidad_motor_A& (0+255),b
   851                           
   852                           ; BSR set to: 1
   853  000806  0E00               	movlw	0
   854  000808  6F14               	movwf	(main@velocidad_motor_B+1)& (0+255),b
   855  00080A  0E00               	movlw	0
   856  00080C  6F13               	movwf	main@velocidad_motor_B& (0+255),b
   857                           
   858                           ; BSR set to: 1
   859                           ;main.c: 109: char anterior = 1;
   860  00080E  0E01               	movlw	1
   861  000810  6F00               	movwf	main@anterior& (0+255),b
   862                           
   863                           ; BSR set to: 1
   864                           ;main.c: 110: char inicio;
   865                           ;main.c: 111: float correccion;
   866                           ;main.c: 112: int extra_arriba_A, extra_arriba_B,extra_abajo_B, extra_abajo_A;
   867                           ;main.c: 113: int correccion_entera;
   868                           ;main.c: 114: encender_motores();
   869  000812  EC0A  F00B         	call	_encender_motores	;wreg free
   870                           
   871                           ;main.c: 115: lectura_precalibracion();
   872  000816  EC10  F008         	call	_lectura_precalibracion	;wreg free
   873                           
   874                           ;main.c: 116: calibracion();
   875  00081A  EC03  F002         	call	_calibracion	;wreg free
   876                           
   877                           ;main.c: 117: LATC7 = 0;
   878  00081E  9E8B               	bcf	3979,7,c	;volatile
   879  000820  B281               	btfsc	3969,1,c	;volatile
   880  000822  D7FE               	goto	l533
   881                           
   882                           ;main.c: 119: for(inicio = 0; inicio < 50; inicio++)
   883  000824  0E00               	movlw	0
   884  000826  0101               	movlb	1	; () banked
   885  000828  6F0E               	movwf	main@inicio& (0+255),b
   886  00082A                     l3649:
   887                           
   888                           ; BSR set to: 1
   889  00082A  0E31               	movlw	49
   890  00082C  650E               	cpfsgt	main@inicio& (0+255),b
   891  00082E  D001               	goto	l535
   892  000830  D014               	goto	u3700
   893  000832                     l535:
   894                           
   895                           ; BSR set to: 1
   896                           ;main.c: 120: {
   897                           ;main.c: 121: LATC7 =~ LATC7;
   898  000832  BE8B               	btfsc	3979,7,c	;volatile
   899  000834  D002               	goto	u3680
   900  000836  8E8B               	bsf	3979,7,c	;volatile
   901  000838  D001               	goto	u3695
   902  00083A                     u3680:
   903  00083A  9E8B               	bcf	3979,7,c	;volatile
   904  00083C                     u3695:
   905                           
   906                           ;main.c: 122: _delay((unsigned long)((100)*(64000000/4000.0)));
   907  00083C  0E09               	movlw	9
   908  00083E  6E37               	movwf	(??_main+1)& (0+255),c
   909  000840  0E1E               	movlw	30
   910  000842  6E36               	movwf	??_main& (0+255),c
   911  000844  0EE4               	movlw	228
   912  000846                     u3777:
   913  000846  2EE8               	decfsz	wreg,f,c
   914  000848  D7FE               	bra	u3777
   915  00084A  2E36               	decfsz	??_main& (0+255),f,c
   916  00084C  D7FC               	bra	u3777
   917  00084E  2E37               	decfsz	(??_main+1)& (0+255),f,c
   918  000850  D7FA               	bra	u3777
   919  000852  D000               	nop2	
   920  000854  0101               	movlb	1	; () banked
   921  000856  2B0E               	incf	main@inicio& (0+255),f,b
   922  000858  D7E8               	goto	l3649
   923  00085A                     u3700:
   924                           
   925                           ; BSR set to: 1
   926                           
   927                           ; BSR set to: 1
   928                           
   929                           ; BSR set to: 1
   930                           ;main.c: 125: {
   931                           ;main.c: 149: while(!(TMR4_HasOverflowOccured()));
   932                           
   933                           ;main.c: 123: }
   934                           ;main.c: 124: while (1)
   935                           
   936                           ; BSR set to: 1
   937  00085A  EC9D  F00A         	call	_TMR4_HasOverflowOccured	;wreg free
   938  00085E  0900               	iorlw	0
   939  000860  B4D8               	btfsc	status,2,c
   940  000862  D7FB               	goto	u3700
   941                           
   942                           ;main.c: 151: correccion = calculo_PID();
   943  000864  EC85  F000         	call	_calculo_PID	;wreg free
   944  000868  C0CF  F101         	movff	?_calculo_PID,main@correccion
   945  00086C  C0D0  F102         	movff	?_calculo_PID+1,main@correccion+1
   946  000870  C0D1  F103         	movff	?_calculo_PID+2,main@correccion+2
   947                           
   948                           ;main.c: 152: correccion_entera = (int)correccion;
   949  000874  C101  F013         	movff	main@correccion,___fttol@f1
   950  000878  C102  F014         	movff	main@correccion+1,___fttol@f1+1
   951  00087C  C103  F015         	movff	main@correccion+2,___fttol@f1+2
   952  000880  EC2E  F006         	call	___fttol	;wreg free
   953  000884  C013  F10C         	movff	?___fttol,main@correccion_entera
   954  000888  C014  F10D         	movff	?___fttol+1,main@correccion_entera+1
   955                           
   956                           ;main.c: 154: if(flag_recta)
   957  00088C  A04C               	btfss	_flag_recta/(0+8),_flag_recta& (0+7),c
   958  00088E  D005               	goto	l541
   959                           
   960                           ;main.c: 155: velocidad_avance = 1000;
   961  000890  0E03               	movlw	3
   962  000892  0101               	movlb	1	; () banked
   963  000894  6F10               	movwf	(main@velocidad_avance+1)& (0+255),b
   964  000896  0EE8               	movlw	232
   965  000898  D004               	goto	L1
   966  00089A                     l541:
   967                           
   968                           ;main.c: 156: else
   969                           ;main.c: 157: velocidad_avance = 750;
   970                           
   971                           ; BSR set to: 1
   972  00089A  0E02               	movlw	2
   973  00089C  0101               	movlb	1	; () banked
   974  00089E  6F10               	movwf	(main@velocidad_avance+1)& (0+255),b
   975  0008A0  0EEE               	movlw	238
   976  0008A2                     L1:
   977  0008A2  6F0F               	movwf	main@velocidad_avance& (0+255),b
   978                           
   979                           ; BSR set to: 1
   980                           ;main.c: 159: velocidad_motor_A = velocidad_avance - correccion_entera;
   981                           
   982                           ; BSR set to: 1
   983  0008A4  C10C  F036         	movff	main@correccion_entera,??_main
   984  0008A8  C10D  F037         	movff	main@correccion_entera+1,??_main+1
   985  0008AC  1E36               	comf	??_main,f,c
   986  0008AE  1E37               	comf	??_main+1,f,c
   987  0008B0  4A36               	infsnz	??_main,f,c
   988  0008B2  2A37               	incf	??_main+1,f,c
   989  0008B4  510F               	movf	main@velocidad_avance& (0+255),w,b
   990  0008B6  2436               	addwf	??_main,w,c
   991  0008B8  6F11               	movwf	main@velocidad_motor_A& (0+255),b
   992  0008BA  5110               	movf	(main@velocidad_avance+1)& (0+255),w,b
   993  0008BC  2037               	addwfc	??_main+1,w,c
   994  0008BE  6F12               	movwf	(main@velocidad_motor_A+1)& (0+255),b
   995                           
   996                           ; BSR set to: 1
   997                           ;main.c: 160: velocidad_motor_B = velocidad_avance + correccion_entera;
   998  0008C0  510C               	movf	main@correccion_entera& (0+255),w,b
   999  0008C2  250F               	addwf	main@velocidad_avance& (0+255),w,b
  1000  0008C4  6F13               	movwf	main@velocidad_motor_B& (0+255),b
  1001  0008C6  510D               	movf	(main@correccion_entera+1)& (0+255),w,b
  1002  0008C8  2110               	addwfc	(main@velocidad_avance+1)& (0+255),w,b
  1003  0008CA  6F14               	movwf	(main@velocidad_motor_B+1)& (0+255),b
  1004                           
  1005                           ; BSR set to: 1
  1006                           ;main.c: 165: if(velocidad_motor_A > 1023)
  1007  0008CC  BF12               	btfsc	(main@velocidad_motor_A+1)& (0+255),7,b
  1008  0008CE  D018               	goto	l543
  1009  0008D0  0E04               	movlw	4
  1010  0008D2  5D12               	subwf	(main@velocidad_motor_A+1)& (0+255),w,b
  1011  0008D4  A0D8               	btfss	status,0,c
  1012  0008D6  D014               	goto	l543
  1013                           
  1014                           ; BSR set to: 1
  1015                           ;main.c: 166: {
  1016                           ;main.c: 167: extra_abajo_B = velocidad_motor_A - 1023;
  1017  0008D8  0E01               	movlw	1
  1018  0008DA  2511               	addwf	main@velocidad_motor_A& (0+255),w,b
  1019  0008DC  6F08               	movwf	main@extra_abajo_B& (0+255),b
  1020  0008DE  0EFC               	movlw	252
  1021  0008E0  2112               	addwfc	(main@velocidad_motor_A+1)& (0+255),w,b
  1022  0008E2  6F09               	movwf	(main@extra_abajo_B+1)& (0+255),b
  1023                           
  1024                           ;main.c: 168: velocidad_motor_B = velocidad_motor_B - extra_abajo_B;
  1025  0008E4  C108  F036         	movff	main@extra_abajo_B,??_main
  1026  0008E8  C109  F037         	movff	main@extra_abajo_B+1,??_main+1
  1027  0008EC  1E36               	comf	??_main,f,c
  1028  0008EE  1E37               	comf	??_main+1,f,c
  1029  0008F0  4A36               	infsnz	??_main,f,c
  1030  0008F2  2A37               	incf	??_main+1,f,c
  1031  0008F4  5113               	movf	main@velocidad_motor_B& (0+255),w,b
  1032  0008F6  2436               	addwf	??_main,w,c
  1033  0008F8  6F13               	movwf	main@velocidad_motor_B& (0+255),b
  1034  0008FA  5114               	movf	(main@velocidad_motor_B+1)& (0+255),w,b
  1035  0008FC  2037               	addwfc	??_main+1,w,c
  1036  0008FE  D035               	goto	L2
  1037  000900                     l543:
  1038                           
  1039                           ; BSR set to: 1
  1040                           
  1041                           ; BSR set to: 1
  1042  000900  BF14               	btfsc	(main@velocidad_motor_B+1)& (0+255),7,b
  1043  000902  D018               	goto	l545
  1044  000904  0E04               	movlw	4
  1045  000906  5D14               	subwf	(main@velocidad_motor_B+1)& (0+255),w,b
  1046  000908  A0D8               	btfss	status,0,c
  1047  00090A  D014               	goto	l545
  1048                           
  1049                           ; BSR set to: 1
  1050                           ;main.c: 170: {
  1051                           ;main.c: 171: extra_abajo_A = velocidad_motor_B - 1023;
  1052  00090C  0E01               	movlw	1
  1053  00090E  2513               	addwf	main@velocidad_motor_B& (0+255),w,b
  1054  000910  6F0A               	movwf	main@extra_abajo_A& (0+255),b
  1055  000912  0EFC               	movlw	252
  1056  000914  2114               	addwfc	(main@velocidad_motor_B+1)& (0+255),w,b
  1057  000916  6F0B               	movwf	(main@extra_abajo_A+1)& (0+255),b
  1058                           
  1059                           ;main.c: 172: velocidad_motor_A = velocidad_motor_A - extra_abajo_A;
  1060  000918  C10A  F036         	movff	main@extra_abajo_A,??_main
  1061  00091C  C10B  F037         	movff	main@extra_abajo_A+1,??_main+1
  1062  000920  1E36               	comf	??_main,f,c
  1063  000922  1E37               	comf	??_main+1,f,c
  1064  000924  4A36               	infsnz	??_main,f,c
  1065  000926  2A37               	incf	??_main+1,f,c
  1066  000928  5111               	movf	main@velocidad_motor_A& (0+255),w,b
  1067  00092A  2436               	addwf	??_main,w,c
  1068  00092C  6F11               	movwf	main@velocidad_motor_A& (0+255),b
  1069  00092E  5112               	movf	(main@velocidad_motor_A+1)& (0+255),w,b
  1070  000930  2037               	addwfc	??_main+1,w,c
  1071  000932  D038               	goto	L3
  1072  000934                     l545:
  1073                           
  1074                           ; BSR set to: 1
  1075                           
  1076                           ; BSR set to: 1
  1077  000934  BF12               	btfsc	(main@velocidad_motor_A+1)& (0+255),7,b
  1078  000936  D006               	goto	u3750
  1079  000938  5112               	movf	(main@velocidad_motor_A+1)& (0+255),w,b
  1080  00093A  E119               	bnz	l3685
  1081  00093C  0E28               	movlw	40
  1082  00093E  5D11               	subwf	main@velocidad_motor_A& (0+255),w,b
  1083  000940  B0D8               	btfsc	status,0,c
  1084  000942  D015               	goto	l547
  1085  000944                     u3750:
  1086                           
  1087                           ; BSR set to: 1
  1088                           ;main.c: 174: {
  1089                           ;main.c: 175: extra_arriba_B = 40 - velocidad_motor_A;
  1090  000944  C111  F036         	movff	main@velocidad_motor_A,??_main
  1091  000948  C112  F037         	movff	main@velocidad_motor_A+1,??_main+1
  1092  00094C  1E36               	comf	??_main,f,c
  1093  00094E  1E37               	comf	??_main+1,f,c
  1094  000950  4A36               	infsnz	??_main,f,c
  1095  000952  2A37               	incf	??_main+1,f,c
  1096  000954  0E28               	movlw	40
  1097  000956  2436               	addwf	??_main,w,c
  1098  000958  6F06               	movwf	main@extra_arriba_B& (0+255),b
  1099  00095A  0E00               	movlw	0
  1100  00095C  2037               	addwfc	??_main+1,w,c
  1101  00095E  6F07               	movwf	(main@extra_arriba_B+1)& (0+255),b
  1102                           
  1103                           ;main.c: 176: velocidad_motor_B = velocidad_motor_B + extra_arriba_B;
  1104  000960  5106               	movf	main@extra_arriba_B& (0+255),w,b
  1105  000962  2513               	addwf	main@velocidad_motor_B& (0+255),w,b
  1106  000964  6F13               	movwf	main@velocidad_motor_B& (0+255),b
  1107  000966  5107               	movf	(main@extra_arriba_B+1)& (0+255),w,b
  1108  000968  2114               	addwfc	(main@velocidad_motor_B+1)& (0+255),w,b
  1109  00096A                     L2:
  1110  00096A  6F14               	movwf	(main@velocidad_motor_B+1)& (0+255),b
  1111                           
  1112                           ;main.c: 177: }else if(velocidad_motor_B < 40)
  1113  00096C  D01C               	goto	l549
  1114  00096E                     l547:
  1115  00096E                     l3685:
  1116                           
  1117                           ; BSR set to: 1
  1118  00096E  BF14               	btfsc	(main@velocidad_motor_B+1)& (0+255),7,b
  1119  000970  D006               	goto	u3760
  1120  000972  5114               	movf	(main@velocidad_motor_B+1)& (0+255),w,b
  1121  000974  E118               	bnz	l3689
  1122  000976  0E28               	movlw	40
  1123  000978  5D13               	subwf	main@velocidad_motor_B& (0+255),w,b
  1124  00097A  B0D8               	btfsc	status,0,c
  1125  00097C  D014               	goto	l549
  1126  00097E                     u3760:
  1127                           
  1128                           ; BSR set to: 1
  1129                           ;main.c: 178: {
  1130                           ;main.c: 179: extra_arriba_A = 40 - velocidad_motor_B;
  1131  00097E  C113  F036         	movff	main@velocidad_motor_B,??_main
  1132  000982  C114  F037         	movff	main@velocidad_motor_B+1,??_main+1
  1133  000986  1E36               	comf	??_main,f,c
  1134  000988  1E37               	comf	??_main+1,f,c
  1135  00098A  4A36               	infsnz	??_main,f,c
  1136  00098C  2A37               	incf	??_main+1,f,c
  1137  00098E  0E28               	movlw	40
  1138  000990  2436               	addwf	??_main,w,c
  1139  000992  6F04               	movwf	main@extra_arriba_A& (0+255),b
  1140  000994  0E00               	movlw	0
  1141  000996  2037               	addwfc	??_main+1,w,c
  1142  000998  6F05               	movwf	(main@extra_arriba_A+1)& (0+255),b
  1143                           
  1144                           ;main.c: 180: velocidad_motor_A = velocidad_motor_A + extra_arriba_A;
  1145  00099A  5104               	movf	main@extra_arriba_A& (0+255),w,b
  1146  00099C  2511               	addwf	main@velocidad_motor_A& (0+255),w,b
  1147  00099E  6F11               	movwf	main@velocidad_motor_A& (0+255),b
  1148  0009A0  5105               	movf	(main@extra_arriba_A+1)& (0+255),w,b
  1149  0009A2  2112               	addwfc	(main@velocidad_motor_A+1)& (0+255),w,b
  1150  0009A4                     L3:
  1151  0009A4  6F12               	movwf	(main@velocidad_motor_A+1)& (0+255),b
  1152  0009A6                     l549:
  1153  0009A6                     l3689:
  1154                           
  1155                           ; BSR set to: 1
  1156                           ;main.c: 181: }
  1157                           ;main.c: 183: moverse(velocidad_motor_A,velocidad_motor_B);
  1158  0009A6  C111  F019         	movff	main@velocidad_motor_A,moverse@velocidad_A
  1159  0009AA  C112  F01A         	movff	main@velocidad_motor_A+1,moverse@velocidad_A+1
  1160  0009AE  C113  F01B         	movff	main@velocidad_motor_B,moverse@velocidad_B
  1161  0009B2  C114  F01C         	movff	main@velocidad_motor_B+1,moverse@velocidad_B+1
  1162  0009B6  EC7B  F00A         	call	_moverse	;wreg free
  1163  0009BA  D74F               	goto	u3700
  1164  0009BC                     __end_of_main:
  1165                           	opt stack 0
  1166                           tblptru	equ	0xFF8
  1167                           tblptrh	equ	0xFF7
  1168                           tblptrl	equ	0xFF6
  1169                           tablat	equ	0xFF5
  1170                           intcon	equ	0xFF2
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           postdec1	equ	0xFE5
  1174                           fsr1l	equ	0xFE1
  1175                           status	equ	0xFD8
  1176                           
  1177 ;; *************** function _moverse *****************
  1178 ;; Defined at:
  1179 ;;		line 253 in file "main.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;  velocidad_A     2   24[COMRAM] int 
  1182 ;;  velocidad_B     2   26[COMRAM] int 
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;		None
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      void 
  1187 ;; Registers used:
  1188 ;;		wreg, status,2, status,0, cstack
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1194 ;;      Params:         4       0       0       0       0       0       0
  1195 ;;      Locals:         0       0       0       0       0       0       0
  1196 ;;      Temps:          0       0       0       0       0       0       0
  1197 ;;      Totals:         4       0       0       0       0       0       0
  1198 ;;Total ram usage:        4 bytes
  1199 ;; Hardware stack levels used:    1
  1200 ;; Hardware stack levels required when called:    6
  1201 ;; This function calls:
  1202 ;;		_mover_motor_A
  1203 ;;		_mover_motor_B
  1204 ;; This function is called by:
  1205 ;;		_main
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text1
  1210  0014F6                     __ptext1:
  1211                           	opt stack 0
  1212  0014F6                     _moverse:
  1213                           	opt stack 24
  1214                           
  1215                           ;main.c: 255: mover_motor_A(velocidad_A);
  1216                           
  1217                           ;incstack = 0
  1218  0014F6  C019  F017         	movff	moverse@velocidad_A,mover_motor_A@velocidad
  1219  0014FA  C01A  F018         	movff	moverse@velocidad_A+1,mover_motor_A@velocidad+1
  1220  0014FE  ECF6  F008         	call	_mover_motor_A	;wreg free
  1221                           
  1222                           ;main.c: 256: mover_motor_B(velocidad_B);
  1223  001502  C01B  F017         	movff	moverse@velocidad_B,mover_motor_B@velocidad
  1224  001506  C01C  F018         	movff	moverse@velocidad_B+1,mover_motor_B@velocidad+1
  1225  00150A  ECCF  F008         	call	_mover_motor_B	;wreg free
  1226  00150E  0012               	return		;funcret
  1227  001510                     __end_of_moverse:
  1228                           	opt stack 0
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           intcon	equ	0xFF2
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1l	equ	0xFE1
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _mover_motor_B *****************
  1241 ;; Defined at:
  1242 ;;		line 221 in file "main.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  velocidad       2   22[COMRAM] int 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2, status,0, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1256 ;;      Params:         2       0       0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0
  1259 ;;      Totals:         2       0       0       0       0       0       0
  1260 ;;Total ram usage:        2 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    5
  1263 ;; This function calls:
  1264 ;;		_PWM4_LoadDutyValue
  1265 ;; This function is called by:
  1266 ;;		_moverse
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text2
  1271  00119E                     __ptext2:
  1272                           	opt stack 0
  1273  00119E                     _mover_motor_B:
  1274                           	opt stack 24
  1275                           
  1276                           ;main.c: 223: if (velocidad > 1023)
  1277                           
  1278                           ;incstack = 0
  1279  00119E  BE18               	btfsc	mover_motor_B@velocidad+1,7,c
  1280  0011A0  D008               	goto	l569
  1281  0011A2  0E04               	movlw	4
  1282  0011A4  5C18               	subwf	mover_motor_B@velocidad+1,w,c
  1283  0011A6  A0D8               	btfss	status,0,c
  1284  0011A8  D004               	goto	l569
  1285                           
  1286                           ;main.c: 224: velocidad = 1023;
  1287  0011AA  0E03               	movlw	3
  1288  0011AC  6E18               	movwf	mover_motor_B@velocidad+1,c
  1289  0011AE  6817               	setf	mover_motor_B@velocidad,c
  1290  0011B0  D00B               	goto	l571
  1291  0011B2                     l569:
  1292                           
  1293                           ;main.c: 225: else if (velocidad < -1023)
  1294  0011B2  AE18               	btfss	mover_motor_B@velocidad+1,7,c
  1295  0011B4  D009               	goto	l571
  1296  0011B6  0417               	decf	mover_motor_B@velocidad,w,c
  1297  0011B8  0EFC               	movlw	252
  1298  0011BA  5818               	subwfb	mover_motor_B@velocidad+1,w,c
  1299  0011BC  B0D8               	btfsc	status,0,c
  1300  0011BE  D004               	goto	l571
  1301                           
  1302                           ;main.c: 226: velocidad = -1023;
  1303  0011C0  0EFC               	movlw	252
  1304  0011C2  6E18               	movwf	mover_motor_B@velocidad+1,c
  1305  0011C4  0E01               	movlw	1
  1306  0011C6  6E17               	movwf	mover_motor_B@velocidad,c
  1307  0011C8                     l571:
  1308                           
  1309                           ;main.c: 228: if(velocidad >= 0)
  1310  0011C8  BE18               	btfsc	mover_motor_B@velocidad+1,7,c
  1311  0011CA  D003               	goto	l572
  1312                           
  1313                           ;main.c: 229: {
  1314                           ;main.c: 230: LATD0 = 1;
  1315  0011CC  808C               	bsf	3980,0,c	;volatile
  1316                           
  1317                           ;main.c: 231: LATD2 = 0;
  1318  0011CE  948C               	bcf	3980,2,c	;volatile
  1319                           
  1320                           ;main.c: 232: }else
  1321  0011D0  D006               	goto	l573
  1322  0011D2                     l572:
  1323                           
  1324                           ;main.c: 233: {
  1325                           ;main.c: 234: LATD0 = 0;
  1326  0011D2  908C               	bcf	3980,0,c	;volatile
  1327                           
  1328                           ;main.c: 235: LATD2 = 1;
  1329  0011D4  848C               	bsf	3980,2,c	;volatile
  1330                           
  1331                           ;main.c: 236: velocidad = velocidad * (-1);
  1332  0011D6  6C17               	negf	mover_motor_B@velocidad,c
  1333  0011D8  1E18               	comf	mover_motor_B@velocidad+1,f,c
  1334  0011DA  B0D8               	btfsc	status,0,c
  1335  0011DC  2A18               	incf	mover_motor_B@velocidad+1,f,c
  1336  0011DE                     l573:
  1337                           
  1338                           ;main.c: 237: }
  1339                           ;main.c: 239: PWM4_LoadDutyValue(velocidad);
  1340  0011DE  C017  F013         	movff	mover_motor_B@velocidad,PWM4_LoadDutyValue@dutyValue
  1341  0011E2  C018  F014         	movff	mover_motor_B@velocidad+1,PWM4_LoadDutyValue@dutyValue+1
  1342  0011E6  ECB6  F009         	call	_PWM4_LoadDutyValue	;wreg free
  1343  0011EA  0012               	return		;funcret
  1344  0011EC                     __end_of_mover_motor_B:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           intcon	equ	0xFF2
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           status	equ	0xFD8
  1356                           
  1357 ;; *************** function _PWM4_LoadDutyValue *****************
  1358 ;; Defined at:
  1359 ;;		line 82 in file "mcc_generated_files/pwm4.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  dutyValue       2   18[COMRAM] unsigned int 
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      void 
  1366 ;; Registers used:
  1367 ;;		wreg, status,2, status,0
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1373 ;;      Params:         2       0       0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0       0       0
  1375 ;;      Temps:          2       0       0       0       0       0       0
  1376 ;;      Totals:         4       0       0       0       0       0       0
  1377 ;;Total ram usage:        4 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    4
  1380 ;; This function calls:
  1381 ;;		Nothing
  1382 ;; This function is called by:
  1383 ;;		_mover_motor_B
  1384 ;;		_parada
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text3
  1389  00136C                     __ptext3:
  1390                           	opt stack 0
  1391  00136C                     _PWM4_LoadDutyValue:
  1392                           	opt stack 24
  1393                           
  1394                           ;pwm4.c: 85: CCPR4L = ((dutyValue & 0x03FC)>>2);
  1395                           
  1396                           ;incstack = 0
  1397  00136C  C013  F015         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  1398  001370  C014  F016         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  1399  001374  90D8               	bcf	status,0,c
  1400  001376  3216               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  1401  001378  3215               	rrcf	??_PWM4_LoadDutyValue,f,c
  1402  00137A  90D8               	bcf	status,0,c
  1403  00137C  3216               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  1404  00137E  3215               	rrcf	??_PWM4_LoadDutyValue,f,c
  1405  001380  5015               	movf	??_PWM4_LoadDutyValue,w,c
  1406  001382  010F               	movlb	15	; () banked
  1407  001384  6F58               	movwf	88,b	;volatile
  1408                           
  1409                           ;pwm4.c: 88: CCP4CON = ((uint8_t)(CCP4CON & 0xCF) | ((dutyValue & 0x0003)<<4));
  1410  001386  C013  F015         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  1411  00138A  0E03               	movlw	3
  1412  00138C  1615               	andwf	??_PWM4_LoadDutyValue,f,c
  1413  00138E  3A15               	swapf	??_PWM4_LoadDutyValue,f,c
  1414  001390  0EF0               	movlw	240
  1415  001392  1615               	andwf	??_PWM4_LoadDutyValue,f,c
  1416  001394  5157               	movf	87,w,b	;volatile
  1417  001396  0BCF               	andlw	207
  1418  001398  1015               	iorwf	??_PWM4_LoadDutyValue,w,c
  1419  00139A  6F57               	movwf	87,b	;volatile
  1420                           
  1421                           ; BSR set to: 15
  1422  00139C  0012               	return		;funcret
  1423  00139E                     __end_of_PWM4_LoadDutyValue:
  1424                           	opt stack 0
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           intcon	equ	0xFF2
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           fsr1l	equ	0xFE1
  1434                           status	equ	0xFD8
  1435                           
  1436 ;; *************** function _mover_motor_A *****************
  1437 ;; Defined at:
  1438 ;;		line 200 in file "main.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  velocidad       2   22[COMRAM] int 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2, status,0, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1452 ;;      Params:         2       0       0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0
  1455 ;;      Totals:         2       0       0       0       0       0       0
  1456 ;;Total ram usage:        2 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    5
  1459 ;; This function calls:
  1460 ;;		_PWM5_LoadDutyValue
  1461 ;; This function is called by:
  1462 ;;		_moverse
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text4
  1467  0011EC                     __ptext4:
  1468                           	opt stack 0
  1469  0011EC                     _mover_motor_A:
  1470                           	opt stack 24
  1471                           
  1472                           ;main.c: 202: if (velocidad > 1023)
  1473                           
  1474                           ; BSR set to: 15
  1475                           ;incstack = 0
  1476  0011EC  BE18               	btfsc	mover_motor_A@velocidad+1,7,c
  1477  0011EE  D008               	goto	l561
  1478  0011F0  0E04               	movlw	4
  1479  0011F2  5C18               	subwf	mover_motor_A@velocidad+1,w,c
  1480  0011F4  A0D8               	btfss	status,0,c
  1481  0011F6  D004               	goto	l561
  1482                           
  1483                           ;main.c: 203: velocidad = 1023;
  1484  0011F8  0E03               	movlw	3
  1485  0011FA  6E18               	movwf	mover_motor_A@velocidad+1,c
  1486  0011FC  6817               	setf	mover_motor_A@velocidad,c
  1487  0011FE  D00B               	goto	l563
  1488  001200                     l561:
  1489                           
  1490                           ;main.c: 204: else if (velocidad < -1023)
  1491  001200  AE18               	btfss	mover_motor_A@velocidad+1,7,c
  1492  001202  D009               	goto	l563
  1493  001204  0417               	decf	mover_motor_A@velocidad,w,c
  1494  001206  0EFC               	movlw	252
  1495  001208  5818               	subwfb	mover_motor_A@velocidad+1,w,c
  1496  00120A  B0D8               	btfsc	status,0,c
  1497  00120C  D004               	goto	l563
  1498                           
  1499                           ;main.c: 205: velocidad = -1023;
  1500  00120E  0EFC               	movlw	252
  1501  001210  6E18               	movwf	mover_motor_A@velocidad+1,c
  1502  001212  0E01               	movlw	1
  1503  001214  6E17               	movwf	mover_motor_A@velocidad,c
  1504  001216                     l563:
  1505                           
  1506                           ;main.c: 207: if(velocidad >= 0)
  1507  001216  BE18               	btfsc	mover_motor_A@velocidad+1,7,c
  1508  001218  D003               	goto	l564
  1509                           
  1510                           ;main.c: 208: {
  1511                           ;main.c: 209: LATC3 = 1;
  1512  00121A  868B               	bsf	3979,3,c	;volatile
  1513                           
  1514                           ;main.c: 210: LATC2 = 0;
  1515  00121C  948B               	bcf	3979,2,c	;volatile
  1516                           
  1517                           ;main.c: 211: }else
  1518  00121E  D006               	goto	l565
  1519  001220                     l564:
  1520                           
  1521                           ;main.c: 212: {
  1522                           ;main.c: 213: LATC3 = 0;
  1523  001220  968B               	bcf	3979,3,c	;volatile
  1524                           
  1525                           ;main.c: 214: LATC2 = 1;
  1526  001222  848B               	bsf	3979,2,c	;volatile
  1527                           
  1528                           ;main.c: 215: velocidad = velocidad * (-1);
  1529  001224  6C17               	negf	mover_motor_A@velocidad,c
  1530  001226  1E18               	comf	mover_motor_A@velocidad+1,f,c
  1531  001228  B0D8               	btfsc	status,0,c
  1532  00122A  2A18               	incf	mover_motor_A@velocidad+1,f,c
  1533  00122C                     l565:
  1534                           
  1535                           ;main.c: 216: }
  1536                           ;main.c: 219: PWM5_LoadDutyValue(velocidad);
  1537  00122C  C017  F013         	movff	mover_motor_A@velocidad,PWM5_LoadDutyValue@dutyValue
  1538  001230  C018  F014         	movff	mover_motor_A@velocidad+1,PWM5_LoadDutyValue@dutyValue+1
  1539  001234  ECCF  F009         	call	_PWM5_LoadDutyValue	;wreg free
  1540  001238  0012               	return		;funcret
  1541  00123A                     __end_of_mover_motor_A:
  1542                           	opt stack 0
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           intcon	equ	0xFF2
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           postdec1	equ	0xFE5
  1551                           fsr1l	equ	0xFE1
  1552                           status	equ	0xFD8
  1553                           
  1554 ;; *************** function _PWM5_LoadDutyValue *****************
  1555 ;; Defined at:
  1556 ;;		line 82 in file "mcc_generated_files/pwm5.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;  dutyValue       2   18[COMRAM] unsigned int 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      void 
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1570 ;;      Params:         2       0       0       0       0       0       0
  1571 ;;      Locals:         0       0       0       0       0       0       0
  1572 ;;      Temps:          2       0       0       0       0       0       0
  1573 ;;      Totals:         4       0       0       0       0       0       0
  1574 ;;Total ram usage:        4 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    4
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_mover_motor_A
  1581 ;;		_parada
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text5
  1586  00139E                     __ptext5:
  1587                           	opt stack 0
  1588  00139E                     _PWM5_LoadDutyValue:
  1589                           	opt stack 24
  1590                           
  1591                           ;pwm5.c: 85: CCPR5L = ((dutyValue & 0x03FC)>>2);
  1592                           
  1593                           ;incstack = 0
  1594  00139E  C013  F015         	movff	PWM5_LoadDutyValue@dutyValue,??_PWM5_LoadDutyValue
  1595  0013A2  C014  F016         	movff	PWM5_LoadDutyValue@dutyValue+1,??_PWM5_LoadDutyValue+1
  1596  0013A6  90D8               	bcf	status,0,c
  1597  0013A8  3216               	rrcf	??_PWM5_LoadDutyValue+1,f,c
  1598  0013AA  3215               	rrcf	??_PWM5_LoadDutyValue,f,c
  1599  0013AC  90D8               	bcf	status,0,c
  1600  0013AE  3216               	rrcf	??_PWM5_LoadDutyValue+1,f,c
  1601  0013B0  3215               	rrcf	??_PWM5_LoadDutyValue,f,c
  1602  0013B2  5015               	movf	??_PWM5_LoadDutyValue,w,c
  1603  0013B4  010F               	movlb	15	; () banked
  1604  0013B6  6F55               	movwf	85,b	;volatile
  1605                           
  1606                           ;pwm5.c: 88: CCP5CON = ((uint8_t)(CCP5CON & 0xCF) | ((dutyValue & 0x0003)<<4));
  1607  0013B8  C013  F015         	movff	PWM5_LoadDutyValue@dutyValue,??_PWM5_LoadDutyValue
  1608  0013BC  0E03               	movlw	3
  1609  0013BE  1615               	andwf	??_PWM5_LoadDutyValue,f,c
  1610  0013C0  3A15               	swapf	??_PWM5_LoadDutyValue,f,c
  1611  0013C2  0EF0               	movlw	240
  1612  0013C4  1615               	andwf	??_PWM5_LoadDutyValue,f,c
  1613  0013C6  5154               	movf	84,w,b	;volatile
  1614  0013C8  0BCF               	andlw	207
  1615  0013CA  1015               	iorwf	??_PWM5_LoadDutyValue,w,c
  1616  0013CC  6F54               	movwf	84,b	;volatile
  1617                           
  1618                           ; BSR set to: 15
  1619  0013CE  0012               	return		;funcret
  1620  0013D0                     __end_of_PWM5_LoadDutyValue:
  1621                           	opt stack 0
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           intcon	equ	0xFF2
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1l	equ	0xFE1
  1631                           status	equ	0xFD8
  1632                           
  1633 ;; *************** function _lectura_precalibracion *****************
  1634 ;; Defined at:
  1635 ;;		line 397 in file "main.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  1    wreg      void 
  1642 ;; Registers used:
  1643 ;;		wreg, status,2, status,0, cstack
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1649 ;;      Params:         0       0       0       0       0       0       0
  1650 ;;      Locals:         0       0       0       0       0       0       0
  1651 ;;      Temps:          0       0       0       0       0       0       0
  1652 ;;      Totals:         0       0       0       0       0       0       0
  1653 ;;Total ram usage:        0 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    5
  1656 ;; This function calls:
  1657 ;;		_ADC_GetConversion
  1658 ;; This function is called by:
  1659 ;;		_main
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text6
  1664  001020                     __ptext6:
  1665                           	opt stack 0
  1666  001020                     _lectura_precalibracion:
  1667                           	opt stack 25
  1668                           
  1669                           ;main.c: 400: sensor_min[0] = sensor_max[0] = ADC_GetConversion(11);
  1670                           
  1671                           ; BSR set to: 15
  1672                           ;incstack = 0
  1673  001020  0E0B               	movlw	11
  1674  001022  EC62  F009         	call	_ADC_GetConversion
  1675  001026  C013  F080         	movff	?_ADC_GetConversion,_sensor_max
  1676  00102A  C014  F081         	movff	?_ADC_GetConversion+1,_sensor_max+1
  1677  00102E  C080  F070         	movff	_sensor_max,_sensor_min
  1678  001032  C081  F071         	movff	_sensor_max+1,_sensor_min+1
  1679                           
  1680                           ;main.c: 401: sensor_min[1] = sensor_max[1] = ADC_GetConversion(13);
  1681  001036  0E0D               	movlw	13
  1682  001038  EC62  F009         	call	_ADC_GetConversion
  1683  00103C  C013  F082         	movff	?_ADC_GetConversion,_sensor_max+2
  1684  001040  C014  F083         	movff	?_ADC_GetConversion+1,_sensor_max+3
  1685  001044  C082  F072         	movff	_sensor_max+2,_sensor_min+2
  1686  001048  C083  F073         	movff	_sensor_max+3,_sensor_min+3
  1687                           
  1688                           ;main.c: 402: sensor_min[2] = sensor_max[2] = ADC_GetConversion(4);
  1689  00104C  0E04               	movlw	4
  1690  00104E  EC62  F009         	call	_ADC_GetConversion
  1691  001052  C013  F084         	movff	?_ADC_GetConversion,_sensor_max+4
  1692  001056  C014  F085         	movff	?_ADC_GetConversion+1,_sensor_max+5
  1693  00105A  C084  F074         	movff	_sensor_max+4,_sensor_min+4
  1694  00105E  C085  F075         	movff	_sensor_max+5,_sensor_min+5
  1695                           
  1696                           ;main.c: 403: sensor_min[3] = sensor_max[3] = ADC_GetConversion(0);
  1697  001062  0E00               	movlw	0
  1698  001064  EC62  F009         	call	_ADC_GetConversion
  1699  001068  C013  F086         	movff	?_ADC_GetConversion,_sensor_max+6
  1700  00106C  C014  F087         	movff	?_ADC_GetConversion+1,_sensor_max+7
  1701  001070  C086  F076         	movff	_sensor_max+6,_sensor_min+6
  1702  001074  C087  F077         	movff	_sensor_max+7,_sensor_min+7
  1703                           
  1704                           ;main.c: 404: sensor_min[4] = sensor_max[4] = ADC_GetConversion(1);
  1705  001078  0E01               	movlw	1
  1706  00107A  EC62  F009         	call	_ADC_GetConversion
  1707  00107E  C013  F088         	movff	?_ADC_GetConversion,_sensor_max+8
  1708  001082  C014  F089         	movff	?_ADC_GetConversion+1,_sensor_max+9
  1709  001086  C088  F078         	movff	_sensor_max+8,_sensor_min+8
  1710  00108A  C089  F079         	movff	_sensor_max+9,_sensor_min+9
  1711                           
  1712                           ;main.c: 405: sensor_min[5] = sensor_max[5] = ADC_GetConversion(2);
  1713  00108E  0E02               	movlw	2
  1714  001090  EC62  F009         	call	_ADC_GetConversion
  1715  001094  C013  F08A         	movff	?_ADC_GetConversion,_sensor_max+10
  1716  001098  C014  F08B         	movff	?_ADC_GetConversion+1,_sensor_max+11
  1717  00109C  C08A  F07A         	movff	_sensor_max+10,_sensor_min+10
  1718  0010A0  C08B  F07B         	movff	_sensor_max+11,_sensor_min+11
  1719  0010A4  0012               	return		;funcret
  1720  0010A6                     __end_of_lectura_precalibracion:
  1721                           	opt stack 0
  1722                           tblptru	equ	0xFF8
  1723                           tblptrh	equ	0xFF7
  1724                           tblptrl	equ	0xFF6
  1725                           tablat	equ	0xFF5
  1726                           intcon	equ	0xFF2
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           postdec1	equ	0xFE5
  1730                           fsr1l	equ	0xFE1
  1731                           status	equ	0xFD8
  1732                           
  1733 ;; *************** function _encender_motores *****************
  1734 ;; Defined at:
  1735 ;;		line 192 in file "main.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;		None
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;		None
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		None
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1749 ;;      Params:         0       0       0       0       0       0       0
  1750 ;;      Locals:         0       0       0       0       0       0       0
  1751 ;;      Temps:          0       0       0       0       0       0       0
  1752 ;;      Totals:         0       0       0       0       0       0       0
  1753 ;;Total ram usage:        0 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    4
  1756 ;; This function calls:
  1757 ;;		Nothing
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text7
  1764  001614                     __ptext7:
  1765                           	opt stack 0
  1766  001614                     _encender_motores:
  1767                           	opt stack 26
  1768                           
  1769                           ;main.c: 194: LATC1 = 1;
  1770                           
  1771                           ;incstack = 0
  1772  001614  828B               	bsf	3979,1,c	;volatile
  1773  001616  0012               	return		;funcret
  1774  001618                     __end_of_encender_motores:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           intcon	equ	0xFF2
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1l	equ	0xFE1
  1785                           status	equ	0xFD8
  1786                           
  1787 ;; *************** function _calibracion *****************
  1788 ;; Defined at:
  1789 ;;		line 357 in file "main.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  lectura_sin_   16   35[COMRAM] int [8]
  1794 ;;  repeticiones    4   31[COMRAM] unsigned long 
  1795 ;;  numero_senso    1   51[COMRAM] unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1805 ;;      Params:         0       0       0       0       0       0       0
  1806 ;;      Locals:        21       0       0       0       0       0       0
  1807 ;;      Temps:          5       0       0       0       0       0       0
  1808 ;;      Totals:        26       0       0       0       0       0       0
  1809 ;;Total ram usage:       26 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    5
  1812 ;; This function calls:
  1813 ;;		_ADC_GetConversion
  1814 ;;		___awdiv
  1815 ;; This function is called by:
  1816 ;;		_main
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text8
  1821  000406                     __ptext8:
  1822                           	opt stack 0
  1823  000406                     _calibracion:
  1824                           	opt stack 25
  1825                           
  1826                           ;main.c: 359: unsigned long int repeticiones_calibrado;
  1827                           ;main.c: 360: char numero_sensor;
  1828                           ;main.c: 361: int lectura_sin_calibrar[8];
  1829                           ;main.c: 363: lectura_sin_calibrar[0] = ADC_GetConversion(11);
  1830                           
  1831                           ;incstack = 0
  1832  000406  0E0B               	movlw	11
  1833  000408  EC62  F009         	call	_ADC_GetConversion
  1834  00040C  C013  F024         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar
  1835  000410  C014  F025         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+1
  1836                           
  1837                           ;main.c: 364: lectura_sin_calibrar[1] = ADC_GetConversion(13);
  1838  000414  0E0D               	movlw	13
  1839  000416  EC62  F009         	call	_ADC_GetConversion
  1840  00041A  C013  F026         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+2
  1841  00041E  C014  F027         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+3
  1842                           
  1843                           ;main.c: 365: lectura_sin_calibrar[2] = ADC_GetConversion(4);
  1844  000422  0E04               	movlw	4
  1845  000424  EC62  F009         	call	_ADC_GetConversion
  1846  000428  C013  F028         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+4
  1847  00042C  C014  F029         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+5
  1848                           
  1849                           ;main.c: 366: lectura_sin_calibrar[3] = ADC_GetConversion(0);
  1850  000430  0E00               	movlw	0
  1851  000432  EC62  F009         	call	_ADC_GetConversion
  1852  000436  C013  F02A         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+6
  1853  00043A  C014  F02B         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+7
  1854                           
  1855                           ;main.c: 367: lectura_sin_calibrar[4] = ADC_GetConversion(1);
  1856  00043E  0E01               	movlw	1
  1857  000440  EC62  F009         	call	_ADC_GetConversion
  1858  000444  C013  F02C         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+8
  1859  000448  C014  F02D         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+9
  1860                           
  1861                           ;main.c: 368: lectura_sin_calibrar[5] = ADC_GetConversion(2);
  1862  00044C  0E02               	movlw	2
  1863  00044E  EC62  F009         	call	_ADC_GetConversion
  1864  000452  C013  F02E         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+10
  1865  000456  C014  F02F         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+11
  1866                           
  1867                           ;main.c: 370: for(repeticiones_calibrado = 0; repeticiones_calibrado < 30000; repeticion
      +                          es_calibrado++)
  1868  00045A  0E00               	movlw	0
  1869  00045C  6E20               	movwf	calibracion@repeticiones_calibrado,c
  1870  00045E  0E00               	movlw	0
  1871  000460  6E21               	movwf	calibracion@repeticiones_calibrado+1,c
  1872  000462  0E00               	movlw	0
  1873  000464  6E22               	movwf	calibracion@repeticiones_calibrado+2,c
  1874  000466  0E00               	movlw	0
  1875  000468  6E23               	movwf	calibracion@repeticiones_calibrado+3,c
  1876  00046A  5023               	movf	calibracion@repeticiones_calibrado+3,w,c
  1877  00046C  1022               	iorwf	calibracion@repeticiones_calibrado+2,w,c
  1878  00046E  E107               	bnz	u3380
  1879  000470  0E30               	movlw	48
  1880  000472  5C20               	subwf	calibracion@repeticiones_calibrado,w,c
  1881  000474  0E75               	movlw	117
  1882  000476  5821               	subwfb	calibracion@repeticiones_calibrado+1,w,c
  1883  000478  B0D8               	btfsc	status,0,c
  1884  00047A  D095               	goto	u3430
  1885  00047C  D001               	goto	l609
  1886  00047E                     u3380:
  1887  00047E  D093               	goto	u3430
  1888  000480                     l609:
  1889                           
  1890                           ;main.c: 371: {
  1891                           ;main.c: 372: lectura_sin_calibrar[0] = ADC_GetConversion(11);
  1892  000480  0E0B               	movlw	11
  1893  000482  EC62  F009         	call	_ADC_GetConversion
  1894  000486  C013  F024         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar
  1895  00048A  C014  F025         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+1
  1896                           
  1897                           ;main.c: 373: lectura_sin_calibrar[1] = ADC_GetConversion(13);
  1898  00048E  0E0D               	movlw	13
  1899  000490  EC62  F009         	call	_ADC_GetConversion
  1900  000494  C013  F026         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+2
  1901  000498  C014  F027         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+3
  1902                           
  1903                           ;main.c: 374: lectura_sin_calibrar[2] = ADC_GetConversion(4);
  1904  00049C  0E04               	movlw	4
  1905  00049E  EC62  F009         	call	_ADC_GetConversion
  1906  0004A2  C013  F028         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+4
  1907  0004A6  C014  F029         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+5
  1908                           
  1909                           ;main.c: 375: lectura_sin_calibrar[3] = ADC_GetConversion(0);
  1910  0004AA  0E00               	movlw	0
  1911  0004AC  EC62  F009         	call	_ADC_GetConversion
  1912  0004B0  C013  F02A         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+6
  1913  0004B4  C014  F02B         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+7
  1914                           
  1915                           ;main.c: 376: lectura_sin_calibrar[4] = ADC_GetConversion(1);
  1916  0004B8  0E01               	movlw	1
  1917  0004BA  EC62  F009         	call	_ADC_GetConversion
  1918  0004BE  C013  F02C         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+8
  1919  0004C2  C014  F02D         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+9
  1920                           
  1921                           ;main.c: 377: lectura_sin_calibrar[5] = ADC_GetConversion(2);
  1922  0004C6  0E02               	movlw	2
  1923  0004C8  EC62  F009         	call	_ADC_GetConversion
  1924  0004CC  C013  F02E         	movff	?_ADC_GetConversion,calibracion@lectura_sin_calibrar+10
  1925  0004D0  C014  F02F         	movff	?_ADC_GetConversion+1,calibracion@lectura_sin_calibrar+11
  1926                           
  1927                           ;main.c: 378: for(numero_sensor = 0; numero_sensor < 6; numero_sensor++)
  1928  0004D4  0E00               	movlw	0
  1929  0004D6  6E34               	movwf	calibracion@numero_sensor,c
  1930  0004D8                     l3487:
  1931  0004D8  0E05               	movlw	5
  1932  0004DA  6434               	cpfsgt	calibracion@numero_sensor,c
  1933  0004DC  D001               	goto	l611
  1934  0004DE  D059               	goto	u3420
  1935  0004E0                     l611:
  1936                           
  1937                           ;main.c: 379: {
  1938                           ;main.c: 380: if(lectura_sin_calibrar[numero_sensor] > sensor_max[numero_sensor])
  1939  0004E0  5034               	movf	calibracion@numero_sensor,w,c
  1940  0004E2  0D02               	mullw	2
  1941  0004E4  0E24               	movlw	low calibracion@lectura_sin_calibrar
  1942  0004E6  24F3               	addwf	prodl,w,c
  1943  0004E8  6ED9               	movwf	fsr2l,c
  1944  0004EA  0E00               	movlw	high calibracion@lectura_sin_calibrar
  1945  0004EC  20F4               	addwfc	prodh,w,c
  1946  0004EE  6EDA               	movwf	fsr2h,c
  1947  0004F0  5034               	movf	calibracion@numero_sensor,w,c
  1948  0004F2  0D02               	mullw	2
  1949  0004F4  0E80               	movlw	low _sensor_max
  1950  0004F6  24F3               	addwf	prodl,w,c
  1951  0004F8  6EE1               	movwf	fsr1l,c
  1952  0004FA  0E00               	movlw	high _sensor_max
  1953  0004FC  20F4               	addwfc	prodh,w,c
  1954  0004FE  6EE2               	movwf	fsr1h,c
  1955  000500  50DE               	movf	postinc2,w,c
  1956  000502  5CE6               	subwf	postinc1,w,c
  1957  000504  50E6               	movf	postinc1,w,c
  1958  000506  0A80               	xorlw	128
  1959  000508  6E1F               	movwf	(??_calibracion+4)& (0+255),c
  1960  00050A  50DE               	movf	postinc2,w,c
  1961  00050C  0A80               	xorlw	128
  1962  00050E  581F               	subwfb	(??_calibracion+4)& (0+255),w,c
  1963  000510  B0D8               	btfsc	status,0,c
  1964  000512  D00F               	goto	l613
  1965                           
  1966                           ;main.c: 381: sensor_max[numero_sensor] = lectura_sin_calibrar[numero_sensor];
  1967  000514  5034               	movf	calibracion@numero_sensor,w,c
  1968  000516  0D02               	mullw	2
  1969  000518  0E24               	movlw	low calibracion@lectura_sin_calibrar
  1970  00051A  24F3               	addwf	prodl,w,c
  1971  00051C  6ED9               	movwf	fsr2l,c
  1972  00051E  0E00               	movlw	high calibracion@lectura_sin_calibrar
  1973  000520  20F4               	addwfc	prodh,w,c
  1974  000522  6EDA               	movwf	fsr2h,c
  1975  000524  5034               	movf	calibracion@numero_sensor,w,c
  1976  000526  0D02               	mullw	2
  1977  000528  0E80               	movlw	low _sensor_max
  1978  00052A  24F3               	addwf	prodl,w,c
  1979  00052C  6EE1               	movwf	fsr1l,c
  1980  00052E  0E00               	movlw	high _sensor_max
  1981  000530  D028               	goto	L4
  1982  000532                     l613:
  1983                           
  1984                           ;main.c: 382: else if(lectura_sin_calibrar[numero_sensor] < sensor_min[numero_sensor])
  1985  000532  5034               	movf	calibracion@numero_sensor,w,c
  1986  000534  0D02               	mullw	2
  1987  000536  0E70               	movlw	low _sensor_min
  1988  000538  24F3               	addwf	prodl,w,c
  1989  00053A  6ED9               	movwf	fsr2l,c
  1990  00053C  0E00               	movlw	high _sensor_min
  1991  00053E  20F4               	addwfc	prodh,w,c
  1992  000540  6EDA               	movwf	fsr2h,c
  1993  000542  5034               	movf	calibracion@numero_sensor,w,c
  1994  000544  0D02               	mullw	2
  1995  000546  0E24               	movlw	low calibracion@lectura_sin_calibrar
  1996  000548  24F3               	addwf	prodl,w,c
  1997  00054A  6EE1               	movwf	fsr1l,c
  1998  00054C  0E00               	movlw	high calibracion@lectura_sin_calibrar
  1999  00054E  20F4               	addwfc	prodh,w,c
  2000  000550  6EE2               	movwf	fsr1h,c
  2001  000552  50DE               	movf	postinc2,w,c
  2002  000554  5CE6               	subwf	postinc1,w,c
  2003  000556  50E6               	movf	postinc1,w,c
  2004  000558  0A80               	xorlw	128
  2005  00055A  6E1F               	movwf	(??_calibracion+4)& (0+255),c
  2006  00055C  50DE               	movf	postinc2,w,c
  2007  00055E  0A80               	xorlw	128
  2008  000560  581F               	subwfb	(??_calibracion+4)& (0+255),w,c
  2009  000562  B0D8               	btfsc	status,0,c
  2010  000564  D014               	goto	l615
  2011                           
  2012                           ;main.c: 383: sensor_min[numero_sensor] = lectura_sin_calibrar[numero_sensor];
  2013  000566  5034               	movf	calibracion@numero_sensor,w,c
  2014  000568  0D02               	mullw	2
  2015  00056A  0E24               	movlw	low calibracion@lectura_sin_calibrar
  2016  00056C  24F3               	addwf	prodl,w,c
  2017  00056E  6ED9               	movwf	fsr2l,c
  2018  000570  0E00               	movlw	high calibracion@lectura_sin_calibrar
  2019  000572  20F4               	addwfc	prodh,w,c
  2020  000574  6EDA               	movwf	fsr2h,c
  2021  000576  5034               	movf	calibracion@numero_sensor,w,c
  2022  000578  0D02               	mullw	2
  2023  00057A  0E70               	movlw	low _sensor_min
  2024  00057C  24F3               	addwf	prodl,w,c
  2025  00057E  6EE1               	movwf	fsr1l,c
  2026  000580  0E00               	movlw	high _sensor_min
  2027  000582                     L4:
  2028  000582  20F4               	addwfc	prodh,w,c
  2029  000584  6EE2               	movwf	fsr1h,c
  2030  000586  CFDE FFE6          	movff	postinc2,postinc1
  2031  00058A  CFDD FFE5          	movff	postdec2,postdec1
  2032  00058E                     l615:
  2033  00058E  2A34               	incf	calibracion@numero_sensor,f,c
  2034  000590  D7A3               	goto	l3487
  2035  000592                     u3420:
  2036  000592  0E01               	movlw	1
  2037  000594  2620               	addwf	calibracion@repeticiones_calibrado,f,c
  2038  000596  0E00               	movlw	0
  2039  000598  2221               	addwfc	calibracion@repeticiones_calibrado+1,f,c
  2040  00059A  2222               	addwfc	calibracion@repeticiones_calibrado+2,f,c
  2041  00059C  2223               	addwfc	calibracion@repeticiones_calibrado+3,f,c
  2042  00059E  5023               	movf	calibracion@repeticiones_calibrado+3,w,c
  2043  0005A0  1022               	iorwf	calibracion@repeticiones_calibrado+2,w,c
  2044  0005A2  E101               	bnz	l3505
  2045  0005A4  D765               	goto	L5
  2046  0005A6                     u3430:
  2047  0005A6                     l3505:
  2048                           
  2049                           ;main.c: 385: }
  2050                           ;main.c: 386: }
  2051                           ;main.c: 392: for(numero_sensor = 0; numero_sensor < 6; numero_sensor++)
  2052  0005A6  0E00               	movlw	0
  2053  0005A8  6E34               	movwf	calibracion@numero_sensor,c
  2054  0005AA                     l3507:
  2055  0005AA  0E05               	movlw	5
  2056  0005AC  6434               	cpfsgt	calibracion@numero_sensor,c
  2057  0005AE  D001               	goto	l616
  2058  0005B0  0012               	return	
  2059  0005B2                     l616:
  2060                           
  2061                           ;main.c: 393: {
  2062                           ;main.c: 394: media_blanco[numero_sensor] = (sensor_min[numero_sensor] + sensor_max[nume
      +                          ro_sensor]) / 2;
  2063  0005B2  5034               	movf	calibracion@numero_sensor,w,c
  2064  0005B4  0D02               	mullw	2
  2065  0005B6  0E80               	movlw	low _sensor_max
  2066  0005B8  24F3               	addwf	prodl,w,c
  2067  0005BA  6ED9               	movwf	fsr2l,c
  2068  0005BC  0E00               	movlw	high _sensor_max
  2069  0005BE  20F4               	addwfc	prodh,w,c
  2070  0005C0  6EDA               	movwf	fsr2h,c
  2071  0005C2  CFDE F01B          	movff	postinc2,??_calibracion
  2072  0005C6  CFDD F01C          	movff	postdec2,??_calibracion+1
  2073  0005CA  5034               	movf	calibracion@numero_sensor,w,c
  2074  0005CC  0D02               	mullw	2
  2075  0005CE  0E70               	movlw	low _sensor_min
  2076  0005D0  24F3               	addwf	prodl,w,c
  2077  0005D2  6ED9               	movwf	fsr2l,c
  2078  0005D4  0E00               	movlw	high _sensor_min
  2079  0005D6  20F4               	addwfc	prodh,w,c
  2080  0005D8  6EDA               	movwf	fsr2h,c
  2081  0005DA  CFDE F01D          	movff	postinc2,??_calibracion+2
  2082  0005DE  CFDD F01E          	movff	postdec2,??_calibracion+3
  2083  0005E2  501B               	movf	??_calibracion,w,c
  2084  0005E4  241D               	addwf	??_calibracion+2,w,c
  2085  0005E6  6E13               	movwf	___awdiv@dividend,c
  2086  0005E8  501C               	movf	??_calibracion+1,w,c
  2087  0005EA  201E               	addwfc	??_calibracion+3,w,c
  2088  0005EC  6E14               	movwf	___awdiv@dividend+1,c
  2089  0005EE  0E00               	movlw	0
  2090  0005F0  6E16               	movwf	___awdiv@divisor+1,c
  2091  0005F2  0E02               	movlw	2
  2092  0005F4  6E15               	movwf	___awdiv@divisor,c
  2093  0005F6  EC53  F008         	call	___awdiv	;wreg free
  2094  0005FA  5034               	movf	calibracion@numero_sensor,w,c
  2095  0005FC  0D02               	mullw	2
  2096  0005FE  0E60               	movlw	low _media_blanco
  2097  000600  24F3               	addwf	prodl,w,c
  2098  000602  6ED9               	movwf	fsr2l,c
  2099  000604  0E00               	movlw	high _media_blanco
  2100  000606  20F4               	addwfc	prodh,w,c
  2101  000608  6EDA               	movwf	fsr2h,c
  2102  00060A  C013  FFDE         	movff	?___awdiv,postinc2
  2103  00060E  C014  FFDD         	movff	?___awdiv+1,postdec2
  2104  000612  2A34               	incf	calibracion@numero_sensor,f,c
  2105  000614  D7CA               	goto	l3507
  2106  000616                     __end_of_calibracion:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           prodh	equ	0xFF4
  2113                           prodl	equ	0xFF3
  2114                           intcon	equ	0xFF2
  2115                           postinc0	equ	0xFEE
  2116                           wreg	equ	0xFE8
  2117                           postinc1	equ	0xFE6
  2118                           postdec1	equ	0xFE5
  2119                           fsr1h	equ	0xFE2
  2120                           fsr1l	equ	0xFE1
  2121                           postinc2	equ	0xFDE
  2122                           postdec2	equ	0xFDD
  2123                           fsr2h	equ	0xFDA
  2124                           fsr2l	equ	0xFD9
  2125                           status	equ	0xFD8
  2126                           
  2127 ;; *************** function _calculo_PID *****************
  2128 ;; Defined at:
  2129 ;;		line 258 in file "main.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  valores_digi    8   28[BANK0 ] unsigned char [8]
  2134 ;;  error           3   48[BANK0 ] float 
  2135 ;;  valor_difere    3   42[BANK0 ] float 
  2136 ;;  valor_propor    3   39[BANK0 ] float 
  2137 ;;  correccion      3   36[BANK0 ] float 
  2138 ;;  numero_senso    1   52[BANK0 ] unsigned char 
  2139 ;;  valor_digita    1   51[BANK0 ] unsigned char 
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  3   17[BANK0 ] float 
  2142 ;; Registers used:
  2143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2149 ;;      Params:         0       3       0       0       0       0       0
  2150 ;;      Locals:         0      25       0       0       0       0       0
  2151 ;;      Temps:          0       8       0       0       0       0       0
  2152 ;;      Totals:         0      36       0       0       0       0       0
  2153 ;;Total ram usage:       36 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    6
  2156 ;; This function calls:
  2157 ;;		___awtoft
  2158 ;;		___ftadd
  2159 ;;		___ftdiv
  2160 ;;		___ftge
  2161 ;;		___ftmul
  2162 ;;		___ftneg
  2163 ;;		___wmul
  2164 ;;		_leer_sensores
  2165 ;; This function is called by:
  2166 ;;		_main
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           	psect	text9
  2171  00010A                     __ptext9:
  2172                           	opt stack 0
  2173  00010A                     _calculo_PID:
  2174                           	opt stack 24
  2175                           
  2176                           ;main.c: 260: float correccion;
  2177                           ;main.c: 261: static float last_error;
  2178                           ;main.c: 262: float valor_proporcional, valor_diferencial;
  2179                           ;main.c: 263: float error;
  2180                           ;main.c: 264: char valores_digitales[8];
  2181                           ;main.c: 265: char numero_sensor, valor_digital;
  2182                           ;main.c: 267: leer_sensores();
  2183                           
  2184                           ;incstack = 0
  2185  00010A  EC0B  F003         	call	_leer_sensores	;wreg free
  2186                           
  2187                           ;main.c: 274: error = -3 * sensor[0] - 2 * sensor[1] - sensor[2] + sensor[3] + 2 * senso
      +                          r[4] + 3 * sensor[5];
  2188  00010E  EE20  F0B2         	lfsr	2,_sensor+4
  2189  000112  CFDE F0D2          	movff	postinc2,??_calculo_PID
  2190  000116  CFDD F0D3          	movff	postdec2,??_calculo_PID+1
  2191  00011A  0100               	movlb	0	; () banked
  2192  00011C  1FD2               	comf	??_calculo_PID& (0+255),f,b
  2193  00011E  1FD3               	comf	(??_calculo_PID+1)& (0+255),f,b
  2194  000120  4BD2               	infsnz	??_calculo_PID& (0+255),f,b
  2195  000122  2BD3               	incf	(??_calculo_PID+1)& (0+255),f,b
  2196  000124  EE20  F0B0         	lfsr	2,_sensor+2
  2197  000128  CFDE F0D4          	movff	postinc2,??_calculo_PID+2
  2198  00012C  CFDD F0D5          	movff	postdec2,??_calculo_PID+3
  2199  000130  90D8               	bcf	status,0,c
  2200  000132  37D4               	rlcf	(??_calculo_PID+2)& (0+255),f,b
  2201  000134  37D5               	rlcf	(??_calculo_PID+3)& (0+255),f,b
  2202  000136  1FD4               	comf	(??_calculo_PID+2)& (0+255),f,b
  2203  000138  1FD5               	comf	(??_calculo_PID+3)& (0+255),f,b
  2204  00013A  4BD4               	infsnz	(??_calculo_PID+2)& (0+255),f,b
  2205  00013C  2BD5               	incf	(??_calculo_PID+3)& (0+255),f,b
  2206  00013E  EE20  F0B6         	lfsr	2,_sensor+8
  2207  000142  CFDE F0D6          	movff	postinc2,??_calculo_PID+4
  2208  000146  CFDD F0D7          	movff	postdec2,??_calculo_PID+5
  2209  00014A  90D8               	bcf	status,0,c
  2210  00014C  37D6               	rlcf	(??_calculo_PID+4)& (0+255),f,b
  2211  00014E  37D7               	rlcf	(??_calculo_PID+5)& (0+255),f,b
  2212  000150  C0AE  F01B         	movff	_sensor,___wmul@multiplier
  2213  000154  C0AF  F01C         	movff	_sensor+1,___wmul@multiplier+1
  2214  000158  0EFF               	movlw	255
  2215  00015A  6E1E               	movwf	___wmul@multiplicand+1,c
  2216  00015C  0EFD               	movlw	253
  2217  00015E  6E1D               	movwf	___wmul@multiplicand,c
  2218  000160  EC14  F00A         	call	___wmul	;wreg free
  2219  000164  C01B  F0D8         	movff	?___wmul,??_calculo_PID+6
  2220  000168  C01C  F0D9         	movff	?___wmul+1,??_calculo_PID+7
  2221  00016C  0100               	movlb	0	; () banked
  2222  00016E  51D6               	movf	(??_calculo_PID+4)& (0+255),w,b
  2223  000170  27D8               	addwf	(??_calculo_PID+6)& (0+255),f,b
  2224  000172  51D7               	movf	(??_calculo_PID+5)& (0+255),w,b
  2225  000174  23D9               	addwfc	(??_calculo_PID+7)& (0+255),f,b
  2226  000176  C0B8  F01B         	movff	_sensor+10,___wmul@multiplier
  2227  00017A  C0B9  F01C         	movff	_sensor+11,___wmul@multiplier+1
  2228  00017E  0E00               	movlw	0
  2229  000180  6E1E               	movwf	___wmul@multiplicand+1,c
  2230  000182  0E03               	movlw	3
  2231  000184  6E1D               	movwf	___wmul@multiplicand,c
  2232  000186  EC14  F00A         	call	___wmul	;wreg free
  2233  00018A  501B               	movf	?___wmul,w,c
  2234  00018C  0100               	movlb	0	; () banked
  2235  00018E  27D8               	addwf	(??_calculo_PID+6)& (0+255),f,b
  2236  000190  501C               	movf	?___wmul+1,w,c
  2237  000192  23D9               	addwfc	(??_calculo_PID+7)& (0+255),f,b
  2238  000194  51D4               	movf	(??_calculo_PID+2)& (0+255),w,b
  2239  000196  27D8               	addwf	(??_calculo_PID+6)& (0+255),f,b
  2240  000198  51D5               	movf	(??_calculo_PID+3)& (0+255),w,b
  2241  00019A  23D9               	addwfc	(??_calculo_PID+7)& (0+255),f,b
  2242  00019C  51D2               	movf	??_calculo_PID& (0+255),w,b
  2243  00019E  27D8               	addwf	(??_calculo_PID+6)& (0+255),f,b
  2244  0001A0  51D3               	movf	(??_calculo_PID+1)& (0+255),w,b
  2245  0001A2  23D9               	addwfc	(??_calculo_PID+7)& (0+255),f,b
  2246  0001A4  51B4               	movf	(_sensor+6)& (0+255),w,b
  2247  0001A6  25D8               	addwf	(??_calculo_PID+6)& (0+255),w,b
  2248  0001A8  6E21               	movwf	___awtoft@c,c
  2249  0001AA  51B5               	movf	(_sensor+7)& (0+255),w,b
  2250  0001AC  21D9               	addwfc	(??_calculo_PID+7)& (0+255),w,b
  2251  0001AE  6E22               	movwf	___awtoft@c+1,c
  2252  0001B0  EC7E  F009         	call	___awtoft	;wreg free
  2253  0001B4  C021  F0EE         	movff	?___awtoft,calculo_PID@error
  2254  0001B8  C022  F0EF         	movff	?___awtoft+1,calculo_PID@error+1
  2255  0001BC  C023  F0F0         	movff	?___awtoft+2,calculo_PID@error+2
  2256                           
  2257                           ;main.c: 276: error = ((error - (-4200)) * (1000 - (-1000)) / (4200 - (-4200))) - 1000;
  2258  0001C0  0E40               	movlw	64
  2259  0001C2  0100               	movlb	0	; () banked
  2260  0001C4  6FC1               	movwf	___ftdiv@f2& (0+255),b
  2261  0001C6  0E03               	movlw	3
  2262  0001C8  6FC2               	movwf	(___ftdiv@f2+1)& (0+255),b
  2263  0001CA  0E46               	movlw	70
  2264  0001CC  6FC3               	movwf	(___ftdiv@f2+2)& (0+255),b
  2265  0001CE  0E00               	movlw	0
  2266  0001D0  6E2A               	movwf	___ftmul@f2,c
  2267  0001D2  0EFA               	movlw	250
  2268  0001D4  6E2B               	movwf	___ftmul@f2+1,c
  2269  0001D6  0E44               	movlw	68
  2270  0001D8  6E2C               	movwf	___ftmul@f2+2,c
  2271  0001DA  0E40               	movlw	64
  2272  0001DC  6E1E               	movwf	___ftadd@f2,c
  2273  0001DE  0E83               	movlw	131
  2274  0001E0  6E1F               	movwf	___ftadd@f2+1,c
  2275  0001E2  0E45               	movlw	69
  2276  0001E4  6E20               	movwf	___ftadd@f2+2,c
  2277  0001E6  C0EE  F01B         	movff	calculo_PID@error,___ftadd@f1
  2278  0001EA  C0EF  F01C         	movff	calculo_PID@error+1,___ftadd@f1+1
  2279  0001EE  C0F0  F01D         	movff	calculo_PID@error+2,___ftadd@f1+2
  2280  0001F2  ECDE  F004         	call	___ftadd	;wreg free
  2281  0001F6  C01B  F027         	movff	?___ftadd,___ftmul@f1
  2282  0001FA  C01C  F028         	movff	?___ftadd+1,___ftmul@f1+1
  2283  0001FE  C01D  F029         	movff	?___ftadd+2,___ftmul@f1+2
  2284  000202  ECB4  F005         	call	___ftmul	;wreg free
  2285  000206  C027  F0BE         	movff	?___ftmul,___ftdiv@f1
  2286  00020A  C028  F0BF         	movff	?___ftmul+1,___ftdiv@f1+1
  2287  00020E  C029  F0C0         	movff	?___ftmul+2,___ftdiv@f1+2
  2288  000212  ECA8  F006         	call	___ftdiv	;wreg free
  2289  000216  C0BE  F0EB         	movff	?___ftdiv,_calculo_PID$2036
  2290  00021A  C0BF  F0EC         	movff	?___ftdiv+1,_calculo_PID$2036+1
  2291  00021E  C0C0  F0ED         	movff	?___ftdiv+2,_calculo_PID$2036+2
  2292                           
  2293                           ;main.c: 276: error = ((error - (-4200)) * (1000 - (-1000)) / (4200 - (-4200))) - 1000;
  2294  000222  C0EB  F01B         	movff	_calculo_PID$2036,___ftadd@f1
  2295  000226  C0EC  F01C         	movff	_calculo_PID$2036+1,___ftadd@f1+1
  2296  00022A  C0ED  F01D         	movff	_calculo_PID$2036+2,___ftadd@f1+2
  2297  00022E  0E00               	movlw	0
  2298  000230  6E1E               	movwf	___ftadd@f2,c
  2299  000232  0E7A               	movlw	122
  2300  000234  6E1F               	movwf	___ftadd@f2+1,c
  2301  000236  0EC4               	movlw	196
  2302  000238  6E20               	movwf	___ftadd@f2+2,c
  2303  00023A  ECDE  F004         	call	___ftadd	;wreg free
  2304  00023E  C01B  F0EE         	movff	?___ftadd,calculo_PID@error
  2305  000242  C01C  F0EF         	movff	?___ftadd+1,calculo_PID@error+1
  2306  000246  C01D  F0F0         	movff	?___ftadd+2,calculo_PID@error+2
  2307                           
  2308                           ;main.c: 278: valor_digital = 0;
  2309  00024A  0E00               	movlw	0
  2310  00024C  0100               	movlb	0	; () banked
  2311  00024E  6FF1               	movwf	calculo_PID@valor_digital& (0+255),b
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;main.c: 280: for(numero_sensor = 0; numero_sensor < 6; numero_sensor++)
  2315  000250  0E00               	movlw	0
  2316  000252  6FF2               	movwf	calculo_PID@numero_sensor& (0+255),b
  2317  000254                     l3529:
  2318                           
  2319                           ; BSR set to: 0
  2320  000254  0E05               	movlw	5
  2321  000256  65F2               	cpfsgt	calculo_PID@numero_sensor& (0+255),b
  2322  000258  D001               	goto	l585
  2323  00025A  D03B               	goto	u3480
  2324  00025C                     l585:
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;main.c: 281: {
  2328                           ;main.c: 282: if(sensor[numero_sensor] > media_blanco[numero_sensor])
  2329                           
  2330                           ; BSR set to: 0
  2331  00025C  51F2               	movf	calculo_PID@numero_sensor& (0+255),w,b
  2332  00025E  0D02               	mullw	2
  2333  000260  0EAE               	movlw	low _sensor
  2334  000262  24F3               	addwf	prodl,w,c
  2335  000264  6ED9               	movwf	fsr2l,c
  2336  000266  0E00               	movlw	high _sensor
  2337  000268  20F4               	addwfc	prodh,w,c
  2338  00026A  6EDA               	movwf	fsr2h,c
  2339  00026C  51F2               	movf	calculo_PID@numero_sensor& (0+255),w,b
  2340  00026E  0D02               	mullw	2
  2341  000270  0E60               	movlw	low _media_blanco
  2342  000272  24F3               	addwf	prodl,w,c
  2343  000274  6EE1               	movwf	fsr1l,c
  2344  000276  0E00               	movlw	high _media_blanco
  2345  000278  20F4               	addwfc	prodh,w,c
  2346  00027A  6EE2               	movwf	fsr1h,c
  2347  00027C  50DE               	movf	postinc2,w,c
  2348  00027E  5CE6               	subwf	postinc1,w,c
  2349  000280  50E6               	movf	postinc1,w,c
  2350  000282  0A80               	xorlw	128
  2351  000284  6FD6               	movwf	(??_calculo_PID+4)& (0+255),b
  2352  000286  50DE               	movf	postinc2,w,c
  2353  000288  0A80               	xorlw	128
  2354  00028A  59D6               	subwfb	(??_calculo_PID+4)& (0+255),w,b
  2355  00028C  B0D8               	btfsc	status,0,c
  2356  00028E  D00A               	goto	l587
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;main.c: 283: valores_digitales[numero_sensor] = 1;
  2360  000290  51F2               	movf	calculo_PID@numero_sensor& (0+255),w,b
  2361  000292  0D01               	mullw	1
  2362  000294  0EDA               	movlw	low calculo_PID@valores_digitales
  2363  000296  24F3               	addwf	prodl,w,c
  2364  000298  6ED9               	movwf	fsr2l,c
  2365  00029A  0E00               	movlw	high calculo_PID@valores_digitales
  2366  00029C  20F4               	addwfc	prodh,w,c
  2367  00029E  6EDA               	movwf	fsr2h,c
  2368  0002A0  0E01               	movlw	1
  2369  0002A2  D009               	goto	L6
  2370  0002A4                     l587:
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;main.c: 284: else
  2374                           ;main.c: 285: valores_digitales[numero_sensor] = 0;
  2375                           
  2376                           ; BSR set to: 0
  2377  0002A4  51F2               	movf	calculo_PID@numero_sensor& (0+255),w,b
  2378  0002A6  0D01               	mullw	1
  2379  0002A8  0EDA               	movlw	low calculo_PID@valores_digitales
  2380  0002AA  24F3               	addwf	prodl,w,c
  2381  0002AC  6ED9               	movwf	fsr2l,c
  2382  0002AE  0E00               	movlw	high calculo_PID@valores_digitales
  2383  0002B0  20F4               	addwfc	prodh,w,c
  2384  0002B2  6EDA               	movwf	fsr2h,c
  2385  0002B4  0E00               	movlw	0
  2386  0002B6                     L6:
  2387  0002B6  6EDF               	movwf	indf2,c
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;main.c: 286: valor_digital = valor_digital + valores_digitales[numero_sensor];
  2391  0002B8  51F2               	movf	calculo_PID@numero_sensor& (0+255),w,b
  2392  0002BA  0D01               	mullw	1
  2393  0002BC  0EDA               	movlw	low calculo_PID@valores_digitales
  2394  0002BE  24F3               	addwf	prodl,w,c
  2395  0002C0  6ED9               	movwf	fsr2l,c
  2396  0002C2  0E00               	movlw	high calculo_PID@valores_digitales
  2397  0002C4  20F4               	addwfc	prodh,w,c
  2398  0002C6  6EDA               	movwf	fsr2h,c
  2399  0002C8  50DF               	movf	indf2,w,c
  2400  0002CA  25F1               	addwf	calculo_PID@valor_digital& (0+255),w,b
  2401  0002CC  6FF1               	movwf	calculo_PID@valor_digital& (0+255),b
  2402                           
  2403                           ; BSR set to: 0
  2404  0002CE  2BF2               	incf	calculo_PID@numero_sensor& (0+255),f,b
  2405  0002D0  D7C1               	goto	l3529
  2406  0002D2                     u3480:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;main.c: 287: }
  2410                           ;main.c: 292: if((valor_digital == 0 || valor_digital == 6) && last_error < 0)
  2411                           
  2412                           ; BSR set to: 0
  2413  0002D2  51F1               	movf	calculo_PID@valor_digital& (0+255),w,b
  2414  0002D4  B4D8               	btfsc	status,2,c
  2415  0002D6  D004               	goto	u3500
  2416                           
  2417                           ; BSR set to: 0
  2418  0002D8  0E06               	movlw	6
  2419  0002DA  19F1               	xorwf	calculo_PID@valor_digital& (0+255),w,b
  2420  0002DC  A4D8               	btfss	status,2,c
  2421  0002DE  D008               	goto	l589
  2422  0002E0                     u3500:
  2423                           
  2424                           ; BSR set to: 0
  2425                           
  2426                           ; BSR set to: 0
  2427  0002E0  AE3A               	btfss	calculo_PID@last_error+2,7,c
  2428  0002E2  D006               	goto	l589
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;main.c: 293: error = -1000;
  2432  0002E4  0E00               	movlw	0
  2433  0002E6  6FEE               	movwf	calculo_PID@error& (0+255),b
  2434  0002E8  0E7A               	movlw	122
  2435  0002EA  6FEF               	movwf	(calculo_PID@error+1)& (0+255),b
  2436  0002EC  0EC4               	movlw	196
  2437  0002EE  D01D               	goto	L7
  2438  0002F0                     l589:
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;main.c: 294: else if((valor_digital == 0 || valor_digital == 6) && last_error > 0)
  2442                           
  2443                           ; BSR set to: 0
  2444  0002F0  51F1               	movf	calculo_PID@valor_digital& (0+255),w,b
  2445  0002F2  B4D8               	btfsc	status,2,c
  2446  0002F4  D004               	goto	u3530
  2447                           
  2448                           ; BSR set to: 0
  2449  0002F6  0E06               	movlw	6
  2450  0002F8  19F1               	xorwf	calculo_PID@valor_digital& (0+255),w,b
  2451  0002FA  A4D8               	btfss	status,2,c
  2452  0002FC  D017               	goto	l593
  2453  0002FE                     u3530:
  2454                           
  2455                           ; BSR set to: 0
  2456                           
  2457                           ; BSR set to: 0
  2458  0002FE  0E00               	movlw	0
  2459  000300  6E13               	movwf	___ftge@ff1,c
  2460  000302  0E00               	movlw	0
  2461  000304  6E14               	movwf	___ftge@ff1+1,c
  2462  000306  0E00               	movlw	0
  2463  000308  6E15               	movwf	___ftge@ff1+2,c
  2464  00030A  C038  F016         	movff	calculo_PID@last_error,___ftge@ff2
  2465  00030E  C039  F017         	movff	calculo_PID@last_error+1,___ftge@ff2+1
  2466  000312  C03A  F018         	movff	calculo_PID@last_error+2,___ftge@ff2+2
  2467  000316  ECC8  F007         	call	___ftge	;wreg free
  2468  00031A  B0D8               	btfsc	status,0,c
  2469  00031C  D007               	goto	l593
  2470                           
  2471                           ;main.c: 295: error = 1000;
  2472  00031E  0E00               	movlw	0
  2473  000320  0100               	movlb	0	; () banked
  2474  000322  6FEE               	movwf	calculo_PID@error& (0+255),b
  2475  000324  0E7A               	movlw	122
  2476  000326  6FEF               	movwf	(calculo_PID@error+1)& (0+255),b
  2477  000328  0E44               	movlw	68
  2478  00032A                     L7:
  2479  00032A  6FF0               	movwf	(calculo_PID@error+2)& (0+255),b
  2480  00032C                     l593:
  2481                           
  2482                           ;main.c: 296: if(valor_digital == 2 && valores_digitales[2] && valores_digitales[3])
  2483                           
  2484                           ; BSR set to: 0
  2485                           
  2486                           ; BSR set to: 0
  2487  00032C  0E02               	movlw	2
  2488  00032E  0100               	movlb	0	; () banked
  2489  000330  19F1               	xorwf	calculo_PID@valor_digital& (0+255),w,b
  2490  000332  A4D8               	btfss	status,2,c
  2491  000334  D008               	goto	l596
  2492                           
  2493                           ; BSR set to: 0
  2494  000336  51DC               	movf	(calculo_PID@valores_digitales+2)& (0+255),w,b
  2495  000338  B4D8               	btfsc	status,2,c
  2496  00033A  D005               	goto	l596
  2497                           
  2498                           ; BSR set to: 0
  2499  00033C  51DD               	movf	(calculo_PID@valores_digitales+3)& (0+255),w,b
  2500  00033E  B4D8               	btfsc	status,2,c
  2501  000340  D002               	goto	l596
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;main.c: 297: flag_recta = 1;
  2505  000342  804C               	bsf	_flag_recta/(0+8),_flag_recta& (0+7),c
  2506  000344  D001               	goto	l597
  2507  000346                     l596:
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 298: else
  2511                           ;main.c: 299: flag_recta = 0;
  2512  000346  904C               	bcf	_flag_recta/(0+8),_flag_recta& (0+7),c
  2513  000348                     l597:
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;main.c: 302: valor_proporcional = ((float)error)*KP;
  2517                           
  2518                           ; BSR set to: 0
  2519  000348  C0EE  F027         	movff	calculo_PID@error,___ftmul@f1
  2520  00034C  C0EF  F028         	movff	calculo_PID@error+1,___ftmul@f1+1
  2521  000350  C0F0  F029         	movff	calculo_PID@error+2,___ftmul@f1+2
  2522  000354  C0F6  F02A         	movff	_KP,___ftmul@f2
  2523  000358  C0F7  F02B         	movff	_KP+1,___ftmul@f2+1
  2524  00035C  C0F8  F02C         	movff	_KP+2,___ftmul@f2+2
  2525  000360  ECB4  F005         	call	___ftmul	;wreg free
  2526  000364  C027  F0E5         	movff	?___ftmul,calculo_PID@valor_proporcional
  2527  000368  C028  F0E6         	movff	?___ftmul+1,calculo_PID@valor_proporcional+1
  2528  00036C  C029  F0E7         	movff	?___ftmul+2,calculo_PID@valor_proporcional+2
  2529                           
  2530                           ;main.c: 303: valor_diferencial = (error - last_error) * KD;
  2531  000370  C0EE  F01E         	movff	calculo_PID@error,___ftadd@f2
  2532  000374  C0EF  F01F         	movff	calculo_PID@error+1,___ftadd@f2+1
  2533  000378  C0F0  F020         	movff	calculo_PID@error+2,___ftadd@f2+2
  2534  00037C  C038  F013         	movff	calculo_PID@last_error,___ftneg@f1
  2535  000380  C039  F014         	movff	calculo_PID@last_error+1,___ftneg@f1+1
  2536  000384  C03A  F015         	movff	calculo_PID@last_error+2,___ftneg@f1+2
  2537  000388  EC27  F00A         	call	___ftneg	;wreg free
  2538  00038C  C013  F01B         	movff	?___ftneg,___ftadd@f1
  2539  000390  C014  F01C         	movff	?___ftneg+1,___ftadd@f1+1
  2540  000394  C015  F01D         	movff	?___ftneg+2,___ftadd@f1+2
  2541  000398  ECDE  F004         	call	___ftadd	;wreg free
  2542  00039C  C01B  F027         	movff	?___ftadd,___ftmul@f1
  2543  0003A0  C01C  F028         	movff	?___ftadd+1,___ftmul@f1+1
  2544  0003A4  C01D  F029         	movff	?___ftadd+2,___ftmul@f1+2
  2545  0003A8  C0F3  F02A         	movff	_KD,___ftmul@f2
  2546  0003AC  C0F4  F02B         	movff	_KD+1,___ftmul@f2+1
  2547  0003B0  C0F5  F02C         	movff	_KD+2,___ftmul@f2+2
  2548  0003B4  ECB4  F005         	call	___ftmul	;wreg free
  2549  0003B8  C027  F0E8         	movff	?___ftmul,calculo_PID@valor_diferencial
  2550  0003BC  C028  F0E9         	movff	?___ftmul+1,calculo_PID@valor_diferencial+1
  2551  0003C0  C029  F0EA         	movff	?___ftmul+2,calculo_PID@valor_diferencial+2
  2552                           
  2553                           ;main.c: 305: correccion = valor_proporcional + valor_diferencial;
  2554  0003C4  C0E5  F01B         	movff	calculo_PID@valor_proporcional,___ftadd@f1
  2555  0003C8  C0E6  F01C         	movff	calculo_PID@valor_proporcional+1,___ftadd@f1+1
  2556  0003CC  C0E7  F01D         	movff	calculo_PID@valor_proporcional+2,___ftadd@f1+2
  2557  0003D0  C0E8  F01E         	movff	calculo_PID@valor_diferencial,___ftadd@f2
  2558  0003D4  C0E9  F01F         	movff	calculo_PID@valor_diferencial+1,___ftadd@f2+1
  2559  0003D8  C0EA  F020         	movff	calculo_PID@valor_diferencial+2,___ftadd@f2+2
  2560  0003DC  ECDE  F004         	call	___ftadd	;wreg free
  2561  0003E0  C01B  F0E2         	movff	?___ftadd,calculo_PID@correccion
  2562  0003E4  C01C  F0E3         	movff	?___ftadd+1,calculo_PID@correccion+1
  2563  0003E8  C01D  F0E4         	movff	?___ftadd+2,calculo_PID@correccion+2
  2564                           
  2565                           ;main.c: 309: last_error = error;
  2566  0003EC  C0EE  F038         	movff	calculo_PID@error,calculo_PID@last_error
  2567  0003F0  C0EF  F039         	movff	calculo_PID@error+1,calculo_PID@last_error+1
  2568  0003F4  C0F0  F03A         	movff	calculo_PID@error+2,calculo_PID@last_error+2
  2569                           
  2570                           ;main.c: 312: return correccion;
  2571  0003F8  C0E2  F0CF         	movff	calculo_PID@correccion,?_calculo_PID
  2572  0003FC  C0E3  F0D0         	movff	calculo_PID@correccion+1,?_calculo_PID+1
  2573  000400  C0E4  F0D1         	movff	calculo_PID@correccion+2,?_calculo_PID+2
  2574  000404  0012               	return	
  2575  000406                     __end_of_calculo_PID:
  2576                           	opt stack 0
  2577                           tblptru	equ	0xFF8
  2578                           tblptrh	equ	0xFF7
  2579                           tblptrl	equ	0xFF6
  2580                           tablat	equ	0xFF5
  2581                           prodh	equ	0xFF4
  2582                           prodl	equ	0xFF3
  2583                           intcon	equ	0xFF2
  2584                           postinc0	equ	0xFEE
  2585                           wreg	equ	0xFE8
  2586                           postinc1	equ	0xFE6
  2587                           postdec1	equ	0xFE5
  2588                           fsr1h	equ	0xFE2
  2589                           fsr1l	equ	0xFE1
  2590                           indf2	equ	0xFDF
  2591                           postinc2	equ	0xFDE
  2592                           postdec2	equ	0xFDD
  2593                           fsr2h	equ	0xFDA
  2594                           fsr2l	equ	0xFD9
  2595                           status	equ	0xFD8
  2596                           
  2597 ;; *************** function _leer_sensores *****************
  2598 ;; Defined at:
  2599 ;;		line 314 in file "main.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;		None
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  lectura_sin_   16    0[BANK0 ] int [8]
  2604 ;;  numero_senso    1   16[BANK0 ] unsigned char 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2614 ;;      Params:         0       0       0       0       0       0       0
  2615 ;;      Locals:         0      17       0       0       0       0       0
  2616 ;;      Temps:          8       0       0       0       0       0       0
  2617 ;;      Totals:         8      17       0       0       0       0       0
  2618 ;;Total ram usage:       25 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    5
  2621 ;; This function calls:
  2622 ;;		_ADC_GetConversion
  2623 ;;		___awdiv
  2624 ;;		___wmul
  2625 ;; This function is called by:
  2626 ;;		_calculo_PID
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           	psect	text10
  2631  000616                     __ptext10:
  2632                           	opt stack 0
  2633  000616                     _leer_sensores:
  2634                           	opt stack 24
  2635                           
  2636                           ;main.c: 316: int lectura_sin_calibrar[8];
  2637                           ;main.c: 317: char numero_sensor;
  2638                           ;main.c: 318: ADC_GetConversion(11);
  2639                           
  2640                           ;incstack = 0
  2641  000616  0E0B               	movlw	11
  2642  000618  EC62  F009         	call	_ADC_GetConversion
  2643                           
  2644                           ;main.c: 319: ADC_GetConversion(13);
  2645  00061C  0E0D               	movlw	13
  2646  00061E  EC62  F009         	call	_ADC_GetConversion
  2647                           
  2648                           ;main.c: 320: ADC_GetConversion(11);
  2649  000622  0E0B               	movlw	11
  2650  000624  EC62  F009         	call	_ADC_GetConversion
  2651                           
  2652                           ;main.c: 321: ADC_GetConversion(13);
  2653  000628  0E0D               	movlw	13
  2654  00062A  EC62  F009         	call	_ADC_GetConversion
  2655                           
  2656                           ;main.c: 323: lectura_sin_calibrar[0] = ADC_GetConversion(11);
  2657  00062E  0E0B               	movlw	11
  2658  000630  EC62  F009         	call	_ADC_GetConversion
  2659  000634  C013  F0BE         	movff	?_ADC_GetConversion,leer_sensores@lectura_sin_calibrar
  2660  000638  C014  F0BF         	movff	?_ADC_GetConversion+1,leer_sensores@lectura_sin_calibrar+1
  2661                           
  2662                           ;main.c: 324: lectura_sin_calibrar[1] = ADC_GetConversion(13);
  2663  00063C  0E0D               	movlw	13
  2664  00063E  EC62  F009         	call	_ADC_GetConversion
  2665  000642  C013  F0C0         	movff	?_ADC_GetConversion,leer_sensores@lectura_sin_calibrar+2
  2666  000646  C014  F0C1         	movff	?_ADC_GetConversion+1,leer_sensores@lectura_sin_calibrar+3
  2667                           
  2668                           ;main.c: 325: lectura_sin_calibrar[2] = ADC_GetConversion(4);
  2669  00064A  0E04               	movlw	4
  2670  00064C  EC62  F009         	call	_ADC_GetConversion
  2671  000650  C013  F0C2         	movff	?_ADC_GetConversion,leer_sensores@lectura_sin_calibrar+4
  2672  000654  C014  F0C3         	movff	?_ADC_GetConversion+1,leer_sensores@lectura_sin_calibrar+5
  2673                           
  2674                           ;main.c: 326: lectura_sin_calibrar[3] = ADC_GetConversion(0);
  2675  000658  0E00               	movlw	0
  2676  00065A  EC62  F009         	call	_ADC_GetConversion
  2677  00065E  C013  F0C4         	movff	?_ADC_GetConversion,leer_sensores@lectura_sin_calibrar+6
  2678  000662  C014  F0C5         	movff	?_ADC_GetConversion+1,leer_sensores@lectura_sin_calibrar+7
  2679                           
  2680                           ;main.c: 327: lectura_sin_calibrar[4] = ADC_GetConversion(1);
  2681  000666  0E01               	movlw	1
  2682  000668  EC62  F009         	call	_ADC_GetConversion
  2683  00066C  C013  F0C6         	movff	?_ADC_GetConversion,leer_sensores@lectura_sin_calibrar+8
  2684  000670  C014  F0C7         	movff	?_ADC_GetConversion+1,leer_sensores@lectura_sin_calibrar+9
  2685                           
  2686                           ;main.c: 328: lectura_sin_calibrar[5] = ADC_GetConversion(2);
  2687  000674  0E02               	movlw	2
  2688  000676  EC62  F009         	call	_ADC_GetConversion
  2689  00067A  C013  F0C8         	movff	?_ADC_GetConversion,leer_sensores@lectura_sin_calibrar+10
  2690  00067E  C014  F0C9         	movff	?_ADC_GetConversion+1,leer_sensores@lectura_sin_calibrar+11
  2691                           
  2692                           ;main.c: 338: for(numero_sensor = 0; numero_sensor < 6; numero_sensor++)
  2693  000682  0E00               	movlw	0
  2694  000684  0100               	movlb	0	; () banked
  2695  000686  6FCE               	movwf	leer_sensores@numero_sensor& (0+255),b
  2696  000688                     l3225:
  2697                           
  2698                           ; BSR set to: 0
  2699  000688  0E05               	movlw	5
  2700  00068A  65CE               	cpfsgt	leer_sensores@numero_sensor& (0+255),b
  2701  00068C  D001               	goto	l601
  2702  00068E  0012               	return	
  2703  000690                     l601:
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;main.c: 339: {
  2707                           ;main.c: 340: sensor[numero_sensor] = ((lectura_sin_calibrar[numero_sensor] - sensor_min
      +                          [numero_sensor]) * (int)((1023) / (sensor_max[numero_sensor] - sensor_min[numero_sensor]
      +                          )));
  2708                           
  2709                           ; BSR set to: 0
  2710  000690  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2711  000692  0D02               	mullw	2
  2712  000694  0EBE               	movlw	low leer_sensores@lectura_sin_calibrar
  2713  000696  24F3               	addwf	prodl,w,c
  2714  000698  6ED9               	movwf	fsr2l,c
  2715  00069A  0E00               	movlw	high leer_sensores@lectura_sin_calibrar
  2716  00069C  20F4               	addwfc	prodh,w,c
  2717  00069E  6EDA               	movwf	fsr2h,c
  2718  0006A0  CFDE F021          	movff	postinc2,??_leer_sensores
  2719  0006A4  CFDD F022          	movff	postdec2,??_leer_sensores+1
  2720  0006A8  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2721  0006AA  0D02               	mullw	2
  2722  0006AC  0E70               	movlw	low _sensor_min
  2723  0006AE  24F3               	addwf	prodl,w,c
  2724  0006B0  6ED9               	movwf	fsr2l,c
  2725  0006B2  0E00               	movlw	high _sensor_min
  2726  0006B4  20F4               	addwfc	prodh,w,c
  2727  0006B6  6EDA               	movwf	fsr2h,c
  2728  0006B8  CFDE F023          	movff	postinc2,??_leer_sensores+2
  2729  0006BC  CFDD F024          	movff	postdec2,??_leer_sensores+3
  2730  0006C0  1E23               	comf	??_leer_sensores+2,f,c
  2731  0006C2  1E24               	comf	??_leer_sensores+3,f,c
  2732  0006C4  4A23               	infsnz	??_leer_sensores+2,f,c
  2733  0006C6  2A24               	incf	??_leer_sensores+3,f,c
  2734  0006C8  5021               	movf	??_leer_sensores,w,c
  2735  0006CA  2423               	addwf	??_leer_sensores+2,w,c
  2736  0006CC  6E1B               	movwf	___wmul@multiplier,c
  2737  0006CE  5022               	movf	??_leer_sensores+1,w,c
  2738  0006D0  2024               	addwfc	??_leer_sensores+3,w,c
  2739  0006D2  6E1C               	movwf	___wmul@multiplier+1,c
  2740  0006D4  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2741  0006D6  0D02               	mullw	2
  2742  0006D8  0E80               	movlw	low _sensor_max
  2743  0006DA  24F3               	addwf	prodl,w,c
  2744  0006DC  6ED9               	movwf	fsr2l,c
  2745  0006DE  0E00               	movlw	high _sensor_max
  2746  0006E0  20F4               	addwfc	prodh,w,c
  2747  0006E2  6EDA               	movwf	fsr2h,c
  2748  0006E4  CFDE F025          	movff	postinc2,??_leer_sensores+4
  2749  0006E8  CFDD F026          	movff	postdec2,??_leer_sensores+5
  2750  0006EC  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2751  0006EE  0D02               	mullw	2
  2752  0006F0  0E70               	movlw	low _sensor_min
  2753  0006F2  24F3               	addwf	prodl,w,c
  2754  0006F4  6ED9               	movwf	fsr2l,c
  2755  0006F6  0E00               	movlw	high _sensor_min
  2756  0006F8  20F4               	addwfc	prodh,w,c
  2757  0006FA  6EDA               	movwf	fsr2h,c
  2758  0006FC  CFDE F027          	movff	postinc2,??_leer_sensores+6
  2759  000700  CFDD F028          	movff	postdec2,??_leer_sensores+7
  2760  000704  1E27               	comf	??_leer_sensores+6,f,c
  2761  000706  1E28               	comf	??_leer_sensores+7,f,c
  2762  000708  4A27               	infsnz	??_leer_sensores+6,f,c
  2763  00070A  2A28               	incf	??_leer_sensores+7,f,c
  2764  00070C  5025               	movf	??_leer_sensores+4,w,c
  2765  00070E  2427               	addwf	??_leer_sensores+6,w,c
  2766  000710  6E15               	movwf	___awdiv@divisor,c
  2767  000712  5026               	movf	??_leer_sensores+5,w,c
  2768  000714  2028               	addwfc	??_leer_sensores+7,w,c
  2769  000716  6E16               	movwf	___awdiv@divisor+1,c
  2770  000718  0E03               	movlw	3
  2771  00071A  6E14               	movwf	___awdiv@dividend+1,c
  2772  00071C  6813               	setf	___awdiv@dividend,c
  2773  00071E  EC53  F008         	call	___awdiv	;wreg free
  2774  000722  C013  F01D         	movff	?___awdiv,___wmul@multiplicand
  2775  000726  C014  F01E         	movff	?___awdiv+1,___wmul@multiplicand+1
  2776  00072A  EC14  F00A         	call	___wmul	;wreg free
  2777  00072E  0100               	movlb	0	; () banked
  2778  000730  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2779  000732  0D02               	mullw	2
  2780  000734  0EAE               	movlw	low _sensor
  2781  000736  24F3               	addwf	prodl,w,c
  2782  000738  6ED9               	movwf	fsr2l,c
  2783  00073A  0E00               	movlw	high _sensor
  2784  00073C  20F4               	addwfc	prodh,w,c
  2785  00073E  6EDA               	movwf	fsr2h,c
  2786  000740  C01B  FFDE         	movff	?___wmul,postinc2
  2787  000744  C01C  FFDD         	movff	?___wmul+1,postdec2
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;main.c: 341: if(sensor[numero_sensor] < sensor_min[numero_sensor])
  2791  000748  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2792  00074A  0D02               	mullw	2
  2793  00074C  0E70               	movlw	low _sensor_min
  2794  00074E  24F3               	addwf	prodl,w,c
  2795  000750  6ED9               	movwf	fsr2l,c
  2796  000752  0E00               	movlw	high _sensor_min
  2797  000754  20F4               	addwfc	prodh,w,c
  2798  000756  6EDA               	movwf	fsr2h,c
  2799  000758  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2800  00075A  0D02               	mullw	2
  2801  00075C  0EAE               	movlw	low _sensor
  2802  00075E  24F3               	addwf	prodl,w,c
  2803  000760  6EE1               	movwf	fsr1l,c
  2804  000762  0E00               	movlw	high _sensor
  2805  000764  20F4               	addwfc	prodh,w,c
  2806  000766  6EE2               	movwf	fsr1h,c
  2807  000768  50DE               	movf	postinc2,w,c
  2808  00076A  5CE6               	subwf	postinc1,w,c
  2809  00076C  50E6               	movf	postinc1,w,c
  2810  00076E  0A80               	xorlw	128
  2811  000770  6E25               	movwf	(??_leer_sensores+4)& (0+255),c
  2812  000772  50DE               	movf	postinc2,w,c
  2813  000774  0A80               	xorlw	128
  2814  000776  5825               	subwfb	(??_leer_sensores+4)& (0+255),w,c
  2815  000778  B0D8               	btfsc	status,0,c
  2816  00077A  D007               	goto	l603
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 342: sensor[numero_sensor] = sensor_min[numero_sensor];
  2820  00077C  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2821  00077E  0D02               	mullw	2
  2822  000780  0E70               	movlw	low _sensor_min
  2823  000782  24F3               	addwf	prodl,w,c
  2824  000784  6ED9               	movwf	fsr2l,c
  2825  000786  0E00               	movlw	high _sensor_min
  2826  000788  D020               	goto	L8
  2827  00078A                     l603:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 343: else if(sensor[numero_sensor] > sensor_max[numero_sensor])
  2831                           
  2832                           ; BSR set to: 0
  2833  00078A  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2834  00078C  0D02               	mullw	2
  2835  00078E  0EAE               	movlw	low _sensor
  2836  000790  24F3               	addwf	prodl,w,c
  2837  000792  6ED9               	movwf	fsr2l,c
  2838  000794  0E00               	movlw	high _sensor
  2839  000796  20F4               	addwfc	prodh,w,c
  2840  000798  6EDA               	movwf	fsr2h,c
  2841  00079A  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2842  00079C  0D02               	mullw	2
  2843  00079E  0E80               	movlw	low _sensor_max
  2844  0007A0  24F3               	addwf	prodl,w,c
  2845  0007A2  6EE1               	movwf	fsr1l,c
  2846  0007A4  0E00               	movlw	high _sensor_max
  2847  0007A6  20F4               	addwfc	prodh,w,c
  2848  0007A8  6EE2               	movwf	fsr1h,c
  2849  0007AA  50DE               	movf	postinc2,w,c
  2850  0007AC  5CE6               	subwf	postinc1,w,c
  2851  0007AE  50E6               	movf	postinc1,w,c
  2852  0007B0  0A80               	xorlw	128
  2853  0007B2  6E25               	movwf	(??_leer_sensores+4)& (0+255),c
  2854  0007B4  50DE               	movf	postinc2,w,c
  2855  0007B6  0A80               	xorlw	128
  2856  0007B8  5825               	subwfb	(??_leer_sensores+4)& (0+255),w,c
  2857  0007BA  B0D8               	btfsc	status,0,c
  2858  0007BC  D014               	goto	l605
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;main.c: 344: sensor[numero_sensor] = sensor_max[numero_sensor];
  2862  0007BE  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2863  0007C0  0D02               	mullw	2
  2864  0007C2  0E80               	movlw	low _sensor_max
  2865  0007C4  24F3               	addwf	prodl,w,c
  2866  0007C6  6ED9               	movwf	fsr2l,c
  2867  0007C8  0E00               	movlw	high _sensor_max
  2868  0007CA                     L8:
  2869  0007CA  20F4               	addwfc	prodh,w,c
  2870  0007CC  6EDA               	movwf	fsr2h,c
  2871  0007CE  51CE               	movf	leer_sensores@numero_sensor& (0+255),w,b
  2872  0007D0  0D02               	mullw	2
  2873  0007D2  0EAE               	movlw	low _sensor
  2874  0007D4  24F3               	addwf	prodl,w,c
  2875  0007D6  6EE1               	movwf	fsr1l,c
  2876  0007D8  0E00               	movlw	high _sensor
  2877  0007DA  20F4               	addwfc	prodh,w,c
  2878  0007DC  6EE2               	movwf	fsr1h,c
  2879  0007DE  CFDE FFE6          	movff	postinc2,postinc1
  2880  0007E2  CFDD FFE5          	movff	postdec2,postdec1
  2881  0007E6                     l605:
  2882                           
  2883                           ; BSR set to: 0
  2884                           
  2885                           ; BSR set to: 0
  2886                           
  2887                           ; BSR set to: 0
  2888  0007E6  2BCE               	incf	leer_sensores@numero_sensor& (0+255),f,b
  2889  0007E8  D74F               	goto	l3225
  2890  0007EA                     __end_of_leer_sensores:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           prodh	equ	0xFF4
  2897                           prodl	equ	0xFF3
  2898                           intcon	equ	0xFF2
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           postinc1	equ	0xFE6
  2902                           postdec1	equ	0xFE5
  2903                           fsr1h	equ	0xFE2
  2904                           fsr1l	equ	0xFE1
  2905                           indf2	equ	0xFDF
  2906                           postinc2	equ	0xFDE
  2907                           postdec2	equ	0xFDD
  2908                           fsr2h	equ	0xFDA
  2909                           fsr2l	equ	0xFD9
  2910                           status	equ	0xFD8
  2911                           
  2912 ;; *************** function ___wmul *****************
  2913 ;; Defined at:
  2914 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  multiplier      2   26[COMRAM] unsigned int 
  2917 ;;  multiplicand    2   28[COMRAM] unsigned int 
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;  product         2   30[COMRAM] unsigned int 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  2   26[COMRAM] unsigned int 
  2922 ;; Registers used:
  2923 ;;		wreg, status,2, status,0, prodl, prodh
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2929 ;;      Params:         4       0       0       0       0       0       0
  2930 ;;      Locals:         2       0       0       0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0
  2932 ;;      Totals:         6       0       0       0       0       0       0
  2933 ;;Total ram usage:        6 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    4
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_calculo_PID
  2940 ;;		_leer_sensores
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text11
  2945  001428                     __ptext11:
  2946                           	opt stack 0
  2947  001428                     ___wmul:
  2948                           	opt stack 24
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;incstack = 0
  2952  001428  501B               	movf	___wmul@multiplier,w,c
  2953  00142A  021D               	mulwf	___wmul@multiplicand,c
  2954  00142C  CFF3 F01F          	movff	prodl,___wmul@product
  2955  001430  CFF4 F020          	movff	prodh,___wmul@product+1
  2956  001434  501B               	movf	___wmul@multiplier,w,c
  2957  001436  021E               	mulwf	___wmul@multiplicand+1,c
  2958  001438  50F3               	movf	prodl,w,c
  2959  00143A  2620               	addwf	___wmul@product+1,f,c
  2960  00143C  501C               	movf	___wmul@multiplier+1,w,c
  2961  00143E  021D               	mulwf	___wmul@multiplicand,c
  2962  001440  50F3               	movf	prodl,w,c
  2963  001442  2620               	addwf	___wmul@product+1,f,c
  2964  001444  C01F  F01B         	movff	___wmul@product,?___wmul
  2965  001448  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  2966  00144C  0012               	return	
  2967  00144E                     __end_of___wmul:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           prodh	equ	0xFF4
  2974                           prodl	equ	0xFF3
  2975                           intcon	equ	0xFF2
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           postinc1	equ	0xFE6
  2979                           postdec1	equ	0xFE5
  2980                           fsr1h	equ	0xFE2
  2981                           fsr1l	equ	0xFE1
  2982                           indf2	equ	0xFDF
  2983                           postinc2	equ	0xFDE
  2984                           postdec2	equ	0xFDD
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989 ;; *************** function ___awdiv *****************
  2990 ;; Defined at:
  2991 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  dividend        2   18[COMRAM] int 
  2994 ;;  divisor         2   20[COMRAM] int 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  quotient        2   24[COMRAM] int 
  2997 ;;  sign            1   23[COMRAM] unsigned char 
  2998 ;;  counter         1   22[COMRAM] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  2   18[COMRAM] int 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3008 ;;      Params:         4       0       0       0       0       0       0
  3009 ;;      Locals:         4       0       0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0       0       0
  3011 ;;      Totals:         8       0       0       0       0       0       0
  3012 ;;Total ram usage:        8 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    4
  3015 ;; This function calls:
  3016 ;;		Nothing
  3017 ;; This function is called by:
  3018 ;;		_leer_sensores
  3019 ;;		_calibracion
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text12
  3024  0010A6                     __ptext12:
  3025                           	opt stack 0
  3026  0010A6                     ___awdiv:
  3027                           	opt stack 25
  3028                           
  3029                           ;incstack = 0
  3030  0010A6  0E00               	movlw	0
  3031  0010A8  6E18               	movwf	___awdiv@sign,c
  3032  0010AA  AE16               	btfss	___awdiv@divisor+1,7,c
  3033  0010AC  D006               	goto	l793
  3034  0010AE  6C15               	negf	___awdiv@divisor,c
  3035  0010B0  1E16               	comf	___awdiv@divisor+1,f,c
  3036  0010B2  B0D8               	btfsc	status,0,c
  3037  0010B4  2A16               	incf	___awdiv@divisor+1,f,c
  3038  0010B6  0E01               	movlw	1
  3039  0010B8  6E18               	movwf	___awdiv@sign,c
  3040  0010BA                     l793:
  3041  0010BA  AE14               	btfss	___awdiv@dividend+1,7,c
  3042  0010BC  D006               	goto	l794
  3043  0010BE  6C13               	negf	___awdiv@dividend,c
  3044  0010C0  1E14               	comf	___awdiv@dividend+1,f,c
  3045  0010C2  B0D8               	btfsc	status,0,c
  3046  0010C4  2A14               	incf	___awdiv@dividend+1,f,c
  3047  0010C6  0E01               	movlw	1
  3048  0010C8  1A18               	xorwf	___awdiv@sign,f,c
  3049  0010CA                     l794:
  3050  0010CA  0E00               	movlw	0
  3051  0010CC  6E1A               	movwf	___awdiv@quotient+1,c
  3052  0010CE  0E00               	movlw	0
  3053  0010D0  6E19               	movwf	___awdiv@quotient,c
  3054  0010D2  5015               	movf	___awdiv@divisor,w,c
  3055  0010D4  1016               	iorwf	___awdiv@divisor+1,w,c
  3056  0010D6  B4D8               	btfsc	status,2,c
  3057  0010D8  D01C               	goto	l801
  3058  0010DA  0E01               	movlw	1
  3059  0010DC  6E17               	movwf	___awdiv@counter,c
  3060  0010DE  D004               	goto	l796
  3061  0010E0  90D8               	bcf	status,0,c
  3062  0010E2  3615               	rlcf	___awdiv@divisor,f,c
  3063  0010E4  3616               	rlcf	___awdiv@divisor+1,f,c
  3064  0010E6  2A17               	incf	___awdiv@counter,f,c
  3065  0010E8                     l796:
  3066  0010E8  AE16               	btfss	___awdiv@divisor+1,7,c
  3067  0010EA  D7FA               	goto	l797
  3068  0010EC                     u2860:
  3069  0010EC  90D8               	bcf	status,0,c
  3070  0010EE  3619               	rlcf	___awdiv@quotient,f,c
  3071  0010F0  361A               	rlcf	___awdiv@quotient+1,f,c
  3072  0010F2  5015               	movf	___awdiv@divisor,w,c
  3073  0010F4  5C13               	subwf	___awdiv@dividend,w,c
  3074  0010F6  5016               	movf	___awdiv@divisor+1,w,c
  3075  0010F8  5814               	subwfb	___awdiv@dividend+1,w,c
  3076  0010FA  A0D8               	btfss	status,0,c
  3077  0010FC  D005               	goto	l800
  3078  0010FE  5015               	movf	___awdiv@divisor,w,c
  3079  001100  5E13               	subwf	___awdiv@dividend,f,c
  3080  001102  5016               	movf	___awdiv@divisor+1,w,c
  3081  001104  5A14               	subwfb	___awdiv@dividend+1,f,c
  3082  001106  8019               	bsf	___awdiv@quotient,0,c
  3083  001108                     l800:
  3084  001108  90D8               	bcf	status,0,c
  3085  00110A  3216               	rrcf	___awdiv@divisor+1,f,c
  3086  00110C  3215               	rrcf	___awdiv@divisor,f,c
  3087  00110E  2E17               	decfsz	___awdiv@counter,f,c
  3088  001110  D7ED               	goto	u2860
  3089  001112                     l801:
  3090  001112  5018               	movf	___awdiv@sign,w,c
  3091  001114  B4D8               	btfsc	status,2,c
  3092  001116  D004               	goto	l802
  3093  001118  6C19               	negf	___awdiv@quotient,c
  3094  00111A  1E1A               	comf	___awdiv@quotient+1,f,c
  3095  00111C  B0D8               	btfsc	status,0,c
  3096  00111E  2A1A               	incf	___awdiv@quotient+1,f,c
  3097  001120                     l802:
  3098  001120  C019  F013         	movff	___awdiv@quotient,?___awdiv
  3099  001124  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  3100  001128  0012               	return	
  3101  00112A                     __end_of___awdiv:
  3102                           	opt stack 0
  3103                           tblptru	equ	0xFF8
  3104                           tblptrh	equ	0xFF7
  3105                           tblptrl	equ	0xFF6
  3106                           tablat	equ	0xFF5
  3107                           prodh	equ	0xFF4
  3108                           prodl	equ	0xFF3
  3109                           intcon	equ	0xFF2
  3110                           postinc0	equ	0xFEE
  3111                           wreg	equ	0xFE8
  3112                           postinc1	equ	0xFE6
  3113                           postdec1	equ	0xFE5
  3114                           fsr1h	equ	0xFE2
  3115                           fsr1l	equ	0xFE1
  3116                           indf2	equ	0xFDF
  3117                           postinc2	equ	0xFDE
  3118                           postdec2	equ	0xFDD
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _ADC_GetConversion *****************
  3124 ;; Defined at:
  3125 ;;		line 108 in file "mcc_generated_files/adc.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  channel         1    wreg     enum E6975
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  channel         1   22[COMRAM] enum E6975
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  2   18[COMRAM] unsigned int 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3139 ;;      Params:         2       0       0       0       0       0       0
  3140 ;;      Locals:         1       0       0       0       0       0       0
  3141 ;;      Temps:          2       0       0       0       0       0       0
  3142 ;;      Totals:         5       0       0       0       0       0       0
  3143 ;;Total ram usage:        5 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    4
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_leer_sensores
  3150 ;;		_calibracion
  3151 ;;		_lectura_precalibracion
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text13
  3156  0012C4                     __ptext13:
  3157                           	opt stack 0
  3158  0012C4                     _ADC_GetConversion:
  3159                           	opt stack 25
  3160                           
  3161                           ;incstack = 0
  3162                           ;ADC_GetConversion@channel stored from wreg
  3163  0012C4  6E17               	movwf	ADC_GetConversion@channel,c
  3164                           
  3165                           ;adc.c: 111: ADCON0bits.CHS = channel;
  3166  0012C6  C017  F015         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  3167  0012CA  4615               	rlncf	??_ADC_GetConversion,f,c
  3168  0012CC  4615               	rlncf	??_ADC_GetConversion,f,c
  3169  0012CE  50C2               	movf	4034,w,c	;volatile
  3170  0012D0  1815               	xorwf	??_ADC_GetConversion,w,c
  3171  0012D2  0B83               	andlw	-125
  3172  0012D4  1815               	xorwf	??_ADC_GetConversion,w,c
  3173  0012D6  6EC2               	movwf	4034,c	;volatile
  3174                           
  3175                           ;adc.c: 112: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3176  0012D8  0E05               	movlw	5
  3177  0012DA                     u3787:
  3178  0012DA  2EE8               	decfsz	wreg,f,c
  3179  0012DC  D7FE               	bra	u3787
  3180  0012DE  F000               	nop	
  3181                           
  3182                           ;adc.c: 114: ADCON0bits.ADON = 1;
  3183  0012E0  80C2               	bsf	4034,0,c	;volatile
  3184                           
  3185                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
  3186  0012E2  82C2               	bsf	4034,1,c	;volatile
  3187  0012E4                     
  3188                           ;adc.c: 121: {
  3189  0012E4  B2C2               	btfsc	4034,1,c	;volatile
  3190  0012E6  D7FE               	goto	l282
  3191                           
  3192                           ;adc.c: 122: }
  3193                           ;adc.c: 125: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  3194  0012E8  50C4               	movf	4036,w,c	;volatile
  3195  0012EA  6E16               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  3196  0012EC  6A15               	clrf	??_ADC_GetConversion& (0+255),c
  3197  0012EE  50C3               	movf	4035,w,c	;volatile
  3198  0012F0  2415               	addwf	??_ADC_GetConversion,w,c
  3199  0012F2  6E13               	movwf	?_ADC_GetConversion,c
  3200  0012F4  0E00               	movlw	0
  3201  0012F6  2016               	addwfc	??_ADC_GetConversion+1,w,c
  3202  0012F8  6E14               	movwf	?_ADC_GetConversion+1,c
  3203  0012FA  0012               	return	
  3204  0012FC                     __end_of_ADC_GetConversion:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           intcon	equ	0xFF2
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           postinc1	equ	0xFE6
  3216                           postdec1	equ	0xFE5
  3217                           fsr1h	equ	0xFE2
  3218                           fsr1l	equ	0xFE1
  3219                           indf2	equ	0xFDF
  3220                           postinc2	equ	0xFDE
  3221                           postdec2	equ	0xFDD
  3222                           fsr2h	equ	0xFDA
  3223                           fsr2l	equ	0xFD9
  3224                           status	equ	0xFD8
  3225                           
  3226 ;; *************** function ___ftneg *****************
  3227 ;; Defined at:
  3228 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;  f1              3   18[COMRAM] float 
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;		None
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  3   18[COMRAM] float 
  3235 ;; Registers used:
  3236 ;;		wreg, status,2, status,0
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3242 ;;      Params:         3       0       0       0       0       0       0
  3243 ;;      Locals:         0       0       0       0       0       0       0
  3244 ;;      Temps:          0       0       0       0       0       0       0
  3245 ;;      Totals:         3       0       0       0       0       0       0
  3246 ;;Total ram usage:        3 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    4
  3249 ;; This function calls:
  3250 ;;		Nothing
  3251 ;; This function is called by:
  3252 ;;		_calculo_PID
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	text14
  3257  00144E                     __ptext14:
  3258                           	opt stack 0
  3259  00144E                     ___ftneg:
  3260                           	opt stack 25
  3261                           
  3262                           ;incstack = 0
  3263  00144E  5013               	movf	___ftneg@f1,w,c
  3264  001450  1014               	iorwf	___ftneg@f1+1,w,c
  3265  001452  1015               	iorwf	___ftneg@f1+2,w,c
  3266  001454  B4D8               	btfsc	status,2,c
  3267  001456  D006               	goto	l930
  3268  001458  0E00               	movlw	0
  3269  00145A  1A13               	xorwf	___ftneg@f1,f,c
  3270  00145C  0E00               	movlw	0
  3271  00145E  1A14               	xorwf	___ftneg@f1+1,f,c
  3272  001460  0E80               	movlw	128
  3273  001462  1A15               	xorwf	___ftneg@f1+2,f,c
  3274  001464                     l930:
  3275  001464  C013  F013         	movff	___ftneg@f1,?___ftneg
  3276  001468  C014  F014         	movff	___ftneg@f1+1,?___ftneg+1
  3277  00146C  C015  F015         	movff	___ftneg@f1+2,?___ftneg+2
  3278  001470  0012               	return		;funcret
  3279  001472                     __end_of___ftneg:
  3280                           	opt stack 0
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           prodh	equ	0xFF4
  3286                           prodl	equ	0xFF3
  3287                           intcon	equ	0xFF2
  3288                           postinc0	equ	0xFEE
  3289                           wreg	equ	0xFE8
  3290                           postinc1	equ	0xFE6
  3291                           postdec1	equ	0xFE5
  3292                           fsr1h	equ	0xFE2
  3293                           fsr1l	equ	0xFE1
  3294                           indf2	equ	0xFDF
  3295                           postinc2	equ	0xFDE
  3296                           postdec2	equ	0xFDD
  3297                           fsr2h	equ	0xFDA
  3298                           fsr2l	equ	0xFD9
  3299                           status	equ	0xFD8
  3300                           
  3301 ;; *************** function ___ftmul *****************
  3302 ;; Defined at:
  3303 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  f1              3   38[COMRAM] float 
  3306 ;;  f2              3   41[COMRAM] float 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  3309 ;;  sign            1   52[COMRAM] unsigned char 
  3310 ;;  cntr            1   51[COMRAM] unsigned char 
  3311 ;;  exp             1   47[COMRAM] unsigned char 
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  3   38[COMRAM] float 
  3314 ;; Registers used:
  3315 ;;		wreg, status,2, status,0, cstack
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3321 ;;      Params:         6       0       0       0       0       0       0
  3322 ;;      Locals:         6       0       0       0       0       0       0
  3323 ;;      Temps:          3       0       0       0       0       0       0
  3324 ;;      Totals:        15       0       0       0       0       0       0
  3325 ;;Total ram usage:       15 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:    5
  3328 ;; This function calls:
  3329 ;;		___ftpack
  3330 ;; This function is called by:
  3331 ;;		_calculo_PID
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text15
  3336  000B68                     __ptext15:
  3337                           	opt stack 0
  3338  000B68                     ___ftmul:
  3339                           	opt stack 24
  3340                           
  3341                           ;incstack = 0
  3342  000B68  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  3343  000B6C  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  3344  000B6E  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  3345  000B70  3428               	rlcf	___ftmul@f1+1,w,c
  3346  000B72  362D               	rlcf	??___ftmul& (0+255),f,c
  3347  000B74  E301               	bnc	u3261
  3348  000B76  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  3349  000B78                     u3261:
  3350  000B78  502D               	movf	??___ftmul,w,c
  3351  000B7A  6E30               	movwf	___ftmul@exp,c
  3352  000B7C  5030               	movf	___ftmul@exp,w,c
  3353  000B7E  A4D8               	btfss	status,2,c
  3354  000B80  D007               	goto	l919
  3355  000B82  0E00               	movlw	0
  3356  000B84  6E27               	movwf	?___ftmul,c
  3357  000B86  0E00               	movlw	0
  3358  000B88  6E28               	movwf	?___ftmul+1,c
  3359  000B8A  0E00               	movlw	0
  3360  000B8C  6E29               	movwf	?___ftmul+2,c
  3361  000B8E  0012               	return	
  3362  000B90                     l919:
  3363  000B90  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  3364  000B94  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  3365  000B96  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  3366  000B98  342B               	rlcf	___ftmul@f2+1,w,c
  3367  000B9A  362D               	rlcf	??___ftmul& (0+255),f,c
  3368  000B9C  E301               	bnc	u3281
  3369  000B9E  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  3370  000BA0                     u3281:
  3371  000BA0  502D               	movf	??___ftmul,w,c
  3372  000BA2  6E35               	movwf	___ftmul@sign,c
  3373  000BA4  5035               	movf	___ftmul@sign,w,c
  3374  000BA6  A4D8               	btfss	status,2,c
  3375  000BA8  D007               	goto	l921
  3376  000BAA  0E00               	movlw	0
  3377  000BAC  6E27               	movwf	?___ftmul,c
  3378  000BAE  0E00               	movlw	0
  3379  000BB0  6E28               	movwf	?___ftmul+1,c
  3380  000BB2  0E00               	movlw	0
  3381  000BB4  6E29               	movwf	?___ftmul+2,c
  3382  000BB6  0012               	return	
  3383  000BB8                     l921:
  3384  000BB8  5035               	movf	___ftmul@sign,w,c
  3385  000BBA  0F7B               	addlw	123
  3386  000BBC  2630               	addwf	___ftmul@exp,f,c
  3387  000BBE  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  3388  000BC2  502C               	movf	___ftmul@f2+2,w,c
  3389  000BC4  1A35               	xorwf	___ftmul@sign,f,c
  3390  000BC6  0E80               	movlw	128
  3391  000BC8  1635               	andwf	___ftmul@sign,f,c
  3392  000BCA  8E28               	bsf	___ftmul@f1+1,7,c
  3393  000BCC  8E2B               	bsf	___ftmul@f2+1,7,c
  3394  000BCE  0EFF               	movlw	255
  3395  000BD0  162A               	andwf	___ftmul@f2,f,c
  3396  000BD2  0EFF               	movlw	255
  3397  000BD4  162B               	andwf	___ftmul@f2+1,f,c
  3398  000BD6  0E00               	movlw	0
  3399  000BD8  162C               	andwf	___ftmul@f2+2,f,c
  3400  000BDA  0E00               	movlw	0
  3401  000BDC  6E31               	movwf	___ftmul@f3_as_product,c
  3402  000BDE  0E00               	movlw	0
  3403  000BE0  6E32               	movwf	___ftmul@f3_as_product+1,c
  3404  000BE2  0E00               	movlw	0
  3405  000BE4  6E33               	movwf	___ftmul@f3_as_product+2,c
  3406  000BE6  0E07               	movlw	7
  3407  000BE8  6E34               	movwf	___ftmul@cntr,c
  3408  000BEA  A027               	btfss	___ftmul@f1,0,c
  3409  000BEC  D006               	goto	l923
  3410  000BEE  502A               	movf	___ftmul@f2,w,c
  3411  000BF0  2631               	addwf	___ftmul@f3_as_product,f,c
  3412  000BF2  502B               	movf	___ftmul@f2+1,w,c
  3413  000BF4  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  3414  000BF6  502C               	movf	___ftmul@f2+2,w,c
  3415  000BF8  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  3416  000BFA                     l923:
  3417  000BFA  90D8               	bcf	status,0,c
  3418  000BFC  3229               	rrcf	___ftmul@f1+2,f,c
  3419  000BFE  3228               	rrcf	___ftmul@f1+1,f,c
  3420  000C00  3227               	rrcf	___ftmul@f1,f,c
  3421  000C02  90D8               	bcf	status,0,c
  3422  000C04  362A               	rlcf	___ftmul@f2,f,c
  3423  000C06  362B               	rlcf	___ftmul@f2+1,f,c
  3424  000C08  362C               	rlcf	___ftmul@f2+2,f,c
  3425  000C0A  2E34               	decfsz	___ftmul@cntr,f,c
  3426  000C0C  D7EE               	goto	l922
  3427  000C0E  0E09               	movlw	9
  3428  000C10  6E34               	movwf	___ftmul@cntr,c
  3429  000C12  A027               	btfss	___ftmul@f1,0,c
  3430  000C14  D006               	goto	l926
  3431  000C16  502A               	movf	___ftmul@f2,w,c
  3432  000C18  2631               	addwf	___ftmul@f3_as_product,f,c
  3433  000C1A  502B               	movf	___ftmul@f2+1,w,c
  3434  000C1C  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  3435  000C1E  502C               	movf	___ftmul@f2+2,w,c
  3436  000C20  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  3437  000C22                     l926:
  3438  000C22  90D8               	bcf	status,0,c
  3439  000C24  3229               	rrcf	___ftmul@f1+2,f,c
  3440  000C26  3228               	rrcf	___ftmul@f1+1,f,c
  3441  000C28  3227               	rrcf	___ftmul@f1,f,c
  3442  000C2A  90D8               	bcf	status,0,c
  3443  000C2C  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  3444  000C2E  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  3445  000C30  3231               	rrcf	___ftmul@f3_as_product,f,c
  3446  000C32  2E34               	decfsz	___ftmul@cntr,f,c
  3447  000C34  D7EE               	goto	l925
  3448  000C36  C031  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  3449  000C3A  C032  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3450  000C3E  C033  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3451  000C42  C030  F016         	movff	___ftmul@exp,___ftpack@exp
  3452  000C46  C035  F017         	movff	___ftmul@sign,___ftpack@sign
  3453  000C4A  EC1C  F007         	call	___ftpack	;wreg free
  3454  000C4E  C013  F027         	movff	?___ftpack,?___ftmul
  3455  000C52  C014  F028         	movff	?___ftpack+1,?___ftmul+1
  3456  000C56  C015  F029         	movff	?___ftpack+2,?___ftmul+2
  3457  000C5A  0012               	return	
  3458  000C5C                     __end_of___ftmul:
  3459                           	opt stack 0
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           prodh	equ	0xFF4
  3465                           prodl	equ	0xFF3
  3466                           intcon	equ	0xFF2
  3467                           postinc0	equ	0xFEE
  3468                           wreg	equ	0xFE8
  3469                           postinc1	equ	0xFE6
  3470                           postdec1	equ	0xFE5
  3471                           fsr1h	equ	0xFE2
  3472                           fsr1l	equ	0xFE1
  3473                           indf2	equ	0xFDF
  3474                           postinc2	equ	0xFDE
  3475                           postdec2	equ	0xFDD
  3476                           fsr2h	equ	0xFDA
  3477                           fsr2l	equ	0xFD9
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function ___ftge *****************
  3481 ;; Defined at:
  3482 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  ff1             3   18[COMRAM] float 
  3485 ;;  ff2             3   21[COMRAM] float 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;		None
  3488 ;; Return value:  Size  Location     Type
  3489 ;;		None               void
  3490 ;; Registers used:
  3491 ;;		wreg, status,2, status,0
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3497 ;;      Params:         6       0       0       0       0       0       0
  3498 ;;      Locals:         0       0       0       0       0       0       0
  3499 ;;      Temps:          3       0       0       0       0       0       0
  3500 ;;      Totals:         9       0       0       0       0       0       0
  3501 ;;Total ram usage:        9 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    4
  3504 ;; This function calls:
  3505 ;;		Nothing
  3506 ;; This function is called by:
  3507 ;;		_calculo_PID
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text16
  3512  000F90                     __ptext16:
  3513                           	opt stack 0
  3514  000F90                     ___ftge:
  3515                           	opt stack 25
  3516                           
  3517                           ;incstack = 0
  3518  000F90  AE15               	btfss	___ftge@ff1+2,7,c
  3519  000F92  D016               	goto	l912
  3520  000F94  C013  F019         	movff	___ftge@ff1,??___ftge
  3521  000F98  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  3522  000F9C  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  3523  000FA0  1E19               	comf	??___ftge,f,c
  3524  000FA2  1E1A               	comf	??___ftge+1,f,c
  3525  000FA4  1E1B               	comf	??___ftge+2,f,c
  3526  000FA6  2A19               	incf	??___ftge,f,c
  3527  000FA8  0E00               	movlw	0
  3528  000FAA  221A               	addwfc	??___ftge+1,f,c
  3529  000FAC  221B               	addwfc	??___ftge+2,f,c
  3530  000FAE  0E00               	movlw	0
  3531  000FB0  2419               	addwf	??___ftge,w,c
  3532  000FB2  6E13               	movwf	___ftge@ff1,c
  3533  000FB4  0E00               	movlw	0
  3534  000FB6  201A               	addwfc	??___ftge+1,w,c
  3535  000FB8  6E14               	movwf	___ftge@ff1+1,c
  3536  000FBA  0E80               	movlw	128
  3537  000FBC  201B               	addwfc	??___ftge+2,w,c
  3538  000FBE  6E15               	movwf	___ftge@ff1+2,c
  3539  000FC0                     l912:
  3540  000FC0  AE18               	btfss	___ftge@ff2+2,7,c
  3541  000FC2  D016               	goto	l913
  3542  000FC4  C016  F019         	movff	___ftge@ff2,??___ftge
  3543  000FC8  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  3544  000FCC  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  3545  000FD0  1E19               	comf	??___ftge,f,c
  3546  000FD2  1E1A               	comf	??___ftge+1,f,c
  3547  000FD4  1E1B               	comf	??___ftge+2,f,c
  3548  000FD6  2A19               	incf	??___ftge,f,c
  3549  000FD8  0E00               	movlw	0
  3550  000FDA  221A               	addwfc	??___ftge+1,f,c
  3551  000FDC  221B               	addwfc	??___ftge+2,f,c
  3552  000FDE  0E00               	movlw	0
  3553  000FE0  2419               	addwf	??___ftge,w,c
  3554  000FE2  6E16               	movwf	___ftge@ff2,c
  3555  000FE4  0E00               	movlw	0
  3556  000FE6  201A               	addwfc	??___ftge+1,w,c
  3557  000FE8  6E17               	movwf	___ftge@ff2+1,c
  3558  000FEA  0E80               	movlw	128
  3559  000FEC  201B               	addwfc	??___ftge+2,w,c
  3560  000FEE  6E18               	movwf	___ftge@ff2+2,c
  3561  000FF0                     l913:
  3562  000FF0  0E00               	movlw	0
  3563  000FF2  1A13               	xorwf	___ftge@ff1,f,c
  3564  000FF4  0E00               	movlw	0
  3565  000FF6  1A14               	xorwf	___ftge@ff1+1,f,c
  3566  000FF8  0E80               	movlw	128
  3567  000FFA  1A15               	xorwf	___ftge@ff1+2,f,c
  3568  000FFC  0E00               	movlw	0
  3569  000FFE  1A16               	xorwf	___ftge@ff2,f,c
  3570  001000  0E00               	movlw	0
  3571  001002  1A17               	xorwf	___ftge@ff2+1,f,c
  3572  001004  0E80               	movlw	128
  3573  001006  1A18               	xorwf	___ftge@ff2+2,f,c
  3574  001008  5016               	movf	___ftge@ff2,w,c
  3575  00100A  5C13               	subwf	___ftge@ff1,w,c
  3576  00100C  5017               	movf	___ftge@ff2+1,w,c
  3577  00100E  5814               	subwfb	___ftge@ff1+1,w,c
  3578  001010  5018               	movf	___ftge@ff2+2,w,c
  3579  001012  5815               	subwfb	___ftge@ff1+2,w,c
  3580  001014  B0D8               	btfsc	status,0,c
  3581  001016  D002               	goto	l2991
  3582  001018  90D8               	bcf	status,0,c
  3583  00101A  0012               	return	
  3584  00101C                     l2991:
  3585  00101C  80D8               	bsf	status,0,c
  3586  00101E  0012               	return	
  3587  001020                     __end_of___ftge:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           intcon	equ	0xFF2
  3596                           postinc0	equ	0xFEE
  3597                           wreg	equ	0xFE8
  3598                           postinc1	equ	0xFE6
  3599                           postdec1	equ	0xFE5
  3600                           fsr1h	equ	0xFE2
  3601                           fsr1l	equ	0xFE1
  3602                           indf2	equ	0xFDF
  3603                           postinc2	equ	0xFDE
  3604                           postdec2	equ	0xFDD
  3605                           fsr2h	equ	0xFDA
  3606                           fsr2l	equ	0xFD9
  3607                           status	equ	0xFD8
  3608                           
  3609 ;; *************** function ___ftdiv *****************
  3610 ;; Defined at:
  3611 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;  f1              3    0[BANK0 ] float 
  3614 ;;  f2              3    3[BANK0 ] float 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  f3              3   10[BANK0 ] float 
  3617 ;;  sign            1   14[BANK0 ] unsigned char 
  3618 ;;  exp             1   13[BANK0 ] unsigned char 
  3619 ;;  cntr            1    9[BANK0 ] unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  3    0[BANK0 ] float 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2, status,0, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3629 ;;      Params:         0       6       0       0       0       0       0
  3630 ;;      Locals:         0       6       0       0       0       0       0
  3631 ;;      Temps:          0       3       0       0       0       0       0
  3632 ;;      Totals:         0      15       0       0       0       0       0
  3633 ;;Total ram usage:       15 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    5
  3636 ;; This function calls:
  3637 ;;		___ftpack
  3638 ;; This function is called by:
  3639 ;;		_calculo_PID
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text17
  3644  000D50                     __ptext17:
  3645                           	opt stack 0
  3646  000D50                     ___ftdiv:
  3647                           	opt stack 24
  3648                           
  3649                           ;incstack = 0
  3650  000D50  C0C0  F0C4         	movff	___ftdiv@f1+2,??___ftdiv
  3651  000D54  0100               	movlb	0	; () banked
  3652  000D56  6BC5               	clrf	(??___ftdiv+1)& (0+255),b
  3653  000D58  6BC6               	clrf	(??___ftdiv+2)& (0+255),b
  3654  000D5A  35BF               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3655  000D5C  37C4               	rlcf	??___ftdiv& (0+255),f,b
  3656  000D5E  E301               	bnc	u3211
  3657  000D60  81C5               	bsf	(??___ftdiv+1)& (0+255),0,b
  3658  000D62                     u3211:
  3659  000D62  51C4               	movf	??___ftdiv& (0+255),w,b
  3660  000D64  6FCB               	movwf	___ftdiv@exp& (0+255),b
  3661  000D66  51CB               	movf	___ftdiv@exp& (0+255),w,b
  3662  000D68  A4D8               	btfss	status,2,c
  3663  000D6A  D007               	goto	l904
  3664                           
  3665                           ; BSR set to: 0
  3666  000D6C  0E00               	movlw	0
  3667  000D6E  6FBE               	movwf	?___ftdiv& (0+255),b
  3668  000D70  0E00               	movlw	0
  3669  000D72  6FBF               	movwf	(?___ftdiv+1)& (0+255),b
  3670  000D74  0E00               	movlw	0
  3671  000D76  6FC0               	movwf	(?___ftdiv+2)& (0+255),b
  3672                           
  3673                           ; BSR set to: 0
  3674  000D78  0012               	return	
  3675  000D7A                     l904:
  3676                           
  3677                           ; BSR set to: 0
  3678                           
  3679                           ; BSR set to: 0
  3680  000D7A  C0C3  F0C4         	movff	___ftdiv@f2+2,??___ftdiv
  3681  000D7E  6BC5               	clrf	(??___ftdiv+1)& (0+255),b
  3682  000D80  6BC6               	clrf	(??___ftdiv+2)& (0+255),b
  3683  000D82  35C2               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3684  000D84  37C4               	rlcf	??___ftdiv& (0+255),f,b
  3685  000D86  E301               	bnc	u3231
  3686  000D88  81C5               	bsf	(??___ftdiv+1)& (0+255),0,b
  3687  000D8A                     u3231:
  3688  000D8A  51C4               	movf	??___ftdiv& (0+255),w,b
  3689  000D8C  6FCC               	movwf	___ftdiv@sign& (0+255),b
  3690  000D8E  51CC               	movf	___ftdiv@sign& (0+255),w,b
  3691  000D90  A4D8               	btfss	status,2,c
  3692  000D92  D007               	goto	l906
  3693                           
  3694                           ; BSR set to: 0
  3695  000D94  0E00               	movlw	0
  3696  000D96  6FBE               	movwf	?___ftdiv& (0+255),b
  3697  000D98  0E00               	movlw	0
  3698  000D9A  6FBF               	movwf	(?___ftdiv+1)& (0+255),b
  3699  000D9C  0E00               	movlw	0
  3700  000D9E  6FC0               	movwf	(?___ftdiv+2)& (0+255),b
  3701                           
  3702                           ; BSR set to: 0
  3703  000DA0  0012               	return	
  3704  000DA2                     l906:
  3705                           
  3706                           ; BSR set to: 0
  3707                           
  3708                           ; BSR set to: 0
  3709  000DA2  0E00               	movlw	0
  3710  000DA4  6FC8               	movwf	___ftdiv@f3& (0+255),b
  3711  000DA6  0E00               	movlw	0
  3712  000DA8  6FC9               	movwf	(___ftdiv@f3+1)& (0+255),b
  3713  000DAA  0E00               	movlw	0
  3714  000DAC  6FCA               	movwf	(___ftdiv@f3+2)& (0+255),b
  3715                           
  3716                           ; BSR set to: 0
  3717  000DAE  51CC               	movf	___ftdiv@sign& (0+255),w,b
  3718  000DB0  0F89               	addlw	137
  3719  000DB2  5FCB               	subwf	___ftdiv@exp& (0+255),f,b
  3720                           
  3721                           ; BSR set to: 0
  3722  000DB4  C0C0  F0CC         	movff	___ftdiv@f1+2,___ftdiv@sign
  3723                           
  3724                           ; BSR set to: 0
  3725  000DB8  51C3               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3726  000DBA  1BCC               	xorwf	___ftdiv@sign& (0+255),f,b
  3727                           
  3728                           ; BSR set to: 0
  3729  000DBC  0E80               	movlw	128
  3730  000DBE  17CC               	andwf	___ftdiv@sign& (0+255),f,b
  3731                           
  3732                           ; BSR set to: 0
  3733  000DC0  8FBF               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3734                           
  3735                           ; BSR set to: 0
  3736  000DC2  0EFF               	movlw	255
  3737  000DC4  17BE               	andwf	___ftdiv@f1& (0+255),f,b
  3738  000DC6  0EFF               	movlw	255
  3739  000DC8  17BF               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3740  000DCA  0E00               	movlw	0
  3741  000DCC  17C0               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3742                           
  3743                           ; BSR set to: 0
  3744  000DCE  8FC2               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3745                           
  3746                           ; BSR set to: 0
  3747  000DD0  0EFF               	movlw	255
  3748  000DD2  17C1               	andwf	___ftdiv@f2& (0+255),f,b
  3749  000DD4  0EFF               	movlw	255
  3750  000DD6  17C2               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3751  000DD8  0E00               	movlw	0
  3752  000DDA  17C3               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3753                           
  3754                           ; BSR set to: 0
  3755  000DDC  0E18               	movlw	24
  3756  000DDE  6FC7               	movwf	___ftdiv@cntr& (0+255),b
  3757  000DE0                     
  3758                           ; BSR set to: 0
  3759                           
  3760                           ; BSR set to: 0
  3761  000DE0  90D8               	bcf	status,0,c
  3762  000DE2  37C8               	rlcf	___ftdiv@f3& (0+255),f,b
  3763  000DE4  37C9               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3764  000DE6  37CA               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3765                           
  3766                           ; BSR set to: 0
  3767  000DE8  51C1               	movf	___ftdiv@f2& (0+255),w,b
  3768  000DEA  5DBE               	subwf	___ftdiv@f1& (0+255),w,b
  3769  000DEC  51C2               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3770  000DEE  59BF               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3771  000DF0  51C3               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3772  000DF2  59C0               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3773  000DF4  A0D8               	btfss	status,0,c
  3774  000DF6  D007               	goto	l908
  3775                           
  3776                           ; BSR set to: 0
  3777  000DF8  51C1               	movf	___ftdiv@f2& (0+255),w,b
  3778  000DFA  5FBE               	subwf	___ftdiv@f1& (0+255),f,b
  3779  000DFC  51C2               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3780  000DFE  5BBF               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3781  000E00  51C3               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3782  000E02  5BC0               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3783                           
  3784                           ; BSR set to: 0
  3785  000E04  81C8               	bsf	___ftdiv@f3& (0+255),0,b
  3786  000E06                     l908:
  3787                           
  3788                           ; BSR set to: 0
  3789  000E06  90D8               	bcf	status,0,c
  3790  000E08  37BE               	rlcf	___ftdiv@f1& (0+255),f,b
  3791  000E0A  37BF               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3792  000E0C  37C0               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3793                           
  3794                           ; BSR set to: 0
  3795  000E0E  2FC7               	decfsz	___ftdiv@cntr& (0+255),f,b
  3796  000E10  D7E7               	goto	l907
  3797                           
  3798                           ; BSR set to: 0
  3799                           
  3800                           ; BSR set to: 0
  3801  000E12  C0C8  F013         	movff	___ftdiv@f3,___ftpack@arg
  3802  000E16  C0C9  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3803  000E1A  C0CA  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3804  000E1E  C0CB  F016         	movff	___ftdiv@exp,___ftpack@exp
  3805  000E22  C0CC  F017         	movff	___ftdiv@sign,___ftpack@sign
  3806  000E26  EC1C  F007         	call	___ftpack	;wreg free
  3807  000E2A  C013  F0BE         	movff	?___ftpack,?___ftdiv
  3808  000E2E  C014  F0BF         	movff	?___ftpack+1,?___ftdiv+1
  3809  000E32  C015  F0C0         	movff	?___ftpack+2,?___ftdiv+2
  3810  000E36  0012               	return	
  3811  000E38                     __end_of___ftdiv:
  3812                           	opt stack 0
  3813                           tblptru	equ	0xFF8
  3814                           tblptrh	equ	0xFF7
  3815                           tblptrl	equ	0xFF6
  3816                           tablat	equ	0xFF5
  3817                           prodh	equ	0xFF4
  3818                           prodl	equ	0xFF3
  3819                           intcon	equ	0xFF2
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           postinc1	equ	0xFE6
  3823                           postdec1	equ	0xFE5
  3824                           fsr1h	equ	0xFE2
  3825                           fsr1l	equ	0xFE1
  3826                           indf2	equ	0xFDF
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           fsr2h	equ	0xFDA
  3830                           fsr2l	equ	0xFD9
  3831                           status	equ	0xFD8
  3832                           
  3833 ;; *************** function ___ftadd *****************
  3834 ;; Defined at:
  3835 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;  f1              3   26[COMRAM] float 
  3838 ;;  f2              3   29[COMRAM] float 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;  exp1            1   37[COMRAM] unsigned char 
  3841 ;;  exp2            1   36[COMRAM] unsigned char 
  3842 ;;  sign            1   35[COMRAM] unsigned char 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  3   26[COMRAM] float 
  3845 ;; Registers used:
  3846 ;;		wreg, status,2, status,0, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3852 ;;      Params:         6       0       0       0       0       0       0
  3853 ;;      Locals:         3       0       0       0       0       0       0
  3854 ;;      Temps:          3       0       0       0       0       0       0
  3855 ;;      Totals:        12       0       0       0       0       0       0
  3856 ;;Total ram usage:       12 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    5
  3859 ;; This function calls:
  3860 ;;		___ftpack
  3861 ;; This function is called by:
  3862 ;;		_calculo_PID
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text18
  3867  0009BC                     __ptext18:
  3868                           	opt stack 0
  3869  0009BC                     ___ftadd:
  3870                           	opt stack 24
  3871                           
  3872                           ;incstack = 0
  3873  0009BC  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
  3874  0009C0  6A22               	clrf	(??___ftadd+1)& (0+255),c
  3875  0009C2  6A23               	clrf	(??___ftadd+2)& (0+255),c
  3876  0009C4  341C               	rlcf	___ftadd@f1+1,w,c
  3877  0009C6  3621               	rlcf	??___ftadd& (0+255),f,c
  3878  0009C8  E301               	bnc	u3001
  3879  0009CA  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  3880  0009CC                     u3001:
  3881  0009CC  5021               	movf	??___ftadd,w,c
  3882  0009CE  6E26               	movwf	___ftadd@exp1,c
  3883  0009D0  C020  F021         	movff	___ftadd@f2+2,??___ftadd
  3884  0009D4  6A22               	clrf	(??___ftadd+1)& (0+255),c
  3885  0009D6  6A23               	clrf	(??___ftadd+2)& (0+255),c
  3886  0009D8  341F               	rlcf	___ftadd@f2+1,w,c
  3887  0009DA  3621               	rlcf	??___ftadd& (0+255),f,c
  3888  0009DC  E301               	bnc	u3011
  3889  0009DE  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  3890  0009E0                     u3011:
  3891  0009E0  5021               	movf	??___ftadd,w,c
  3892  0009E2  6E25               	movwf	___ftadd@exp2,c
  3893  0009E4  5026               	movf	___ftadd@exp1,w,c
  3894  0009E6  B4D8               	btfsc	status,2,c
  3895  0009E8  D00B               	goto	u3040
  3896  0009EA  5025               	movf	___ftadd@exp2,w,c
  3897  0009EC  5C26               	subwf	___ftadd@exp1,w,c
  3898  0009EE  B0D8               	btfsc	status,0,c
  3899  0009F0  D00E               	goto	l871
  3900  0009F2  5026               	movf	___ftadd@exp1,w,c
  3901  0009F4  0800               	sublw	0
  3902  0009F6  2425               	addwf	___ftadd@exp2,w,c
  3903  0009F8  6E21               	movwf	??___ftadd& (0+255),c
  3904  0009FA  0E18               	movlw	24
  3905  0009FC  6421               	cpfsgt	??___ftadd,c
  3906  0009FE  D007               	goto	l871
  3907  000A00                     u3040:
  3908  000A00  C01E  F01B         	movff	___ftadd@f2,?___ftadd
  3909  000A04  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
  3910  000A08  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
  3911  000A0C  0012               	return	
  3912  000A0E                     l871:
  3913  000A0E  5025               	movf	___ftadd@exp2,w,c
  3914  000A10  B4D8               	btfsc	status,2,c
  3915  000A12  D00B               	goto	u3070
  3916  000A14  5026               	movf	___ftadd@exp1,w,c
  3917  000A16  5C25               	subwf	___ftadd@exp2,w,c
  3918  000A18  B0D8               	btfsc	status,0,c
  3919  000A1A  D00E               	goto	l875
  3920  000A1C  5025               	movf	___ftadd@exp2,w,c
  3921  000A1E  0800               	sublw	0
  3922  000A20  2426               	addwf	___ftadd@exp1,w,c
  3923  000A22  6E21               	movwf	??___ftadd& (0+255),c
  3924  000A24  0E18               	movlw	24
  3925  000A26  6421               	cpfsgt	??___ftadd,c
  3926  000A28  D007               	goto	l875
  3927  000A2A                     u3070:
  3928  000A2A  C01B  F01B         	movff	___ftadd@f1,?___ftadd
  3929  000A2E  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
  3930  000A32  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
  3931  000A36  0012               	return	
  3932  000A38                     l875:
  3933  000A38  0E06               	movlw	6
  3934  000A3A  6E24               	movwf	___ftadd@sign,c
  3935  000A3C  BE1D               	btfsc	___ftadd@f1+2,7,c
  3936  000A3E  8E24               	bsf	___ftadd@sign,7,c
  3937  000A40  BE20               	btfsc	___ftadd@f2+2,7,c
  3938  000A42  8C24               	bsf	___ftadd@sign,6,c
  3939  000A44  8E1C               	bsf	___ftadd@f1+1,7,c
  3940  000A46  0EFF               	movlw	255
  3941  000A48  161B               	andwf	___ftadd@f1,f,c
  3942  000A4A  0EFF               	movlw	255
  3943  000A4C  161C               	andwf	___ftadd@f1+1,f,c
  3944  000A4E  0E00               	movlw	0
  3945  000A50  161D               	andwf	___ftadd@f1+2,f,c
  3946  000A52  8E1F               	bsf	___ftadd@f2+1,7,c
  3947  000A54  0EFF               	movlw	255
  3948  000A56  161E               	andwf	___ftadd@f2,f,c
  3949  000A58  0EFF               	movlw	255
  3950  000A5A  161F               	andwf	___ftadd@f2+1,f,c
  3951  000A5C  0E00               	movlw	0
  3952  000A5E  1620               	andwf	___ftadd@f2+2,f,c
  3953  000A60  5025               	movf	___ftadd@exp2,w,c
  3954  000A62  5C26               	subwf	___ftadd@exp1,w,c
  3955  000A64  B0D8               	btfsc	status,0,c
  3956  000A66  D01B               	goto	l880
  3957  000A68                     u3100:
  3958  000A68  90D8               	bcf	status,0,c
  3959  000A6A  361E               	rlcf	___ftadd@f2,f,c
  3960  000A6C  361F               	rlcf	___ftadd@f2+1,f,c
  3961  000A6E  3620               	rlcf	___ftadd@f2+2,f,c
  3962  000A70  0625               	decf	___ftadd@exp2,f,c
  3963  000A72  5026               	movf	___ftadd@exp1,w,c
  3964  000A74  1825               	xorwf	___ftadd@exp2,w,c
  3965  000A76  B4D8               	btfsc	status,2,c
  3966  000A78  D00D               	goto	l885
  3967  000A7A  0624               	decf	___ftadd@sign,f,c
  3968  000A7C  C024  F021         	movff	___ftadd@sign,??___ftadd
  3969  000A80  0E07               	movlw	7
  3970  000A82  1621               	andwf	??___ftadd,f,c
  3971  000A84  B4D8               	btfsc	status,2,c
  3972  000A86  D006               	goto	l885
  3973  000A88  D7EF               	goto	u3100
  3974  000A8A  90D8               	bcf	status,0,c
  3975  000A8C  321D               	rrcf	___ftadd@f1+2,f,c
  3976  000A8E  321C               	rrcf	___ftadd@f1+1,f,c
  3977  000A90  321B               	rrcf	___ftadd@f1,f,c
  3978  000A92  2A26               	incf	___ftadd@exp1,f,c
  3979  000A94                     l885:
  3980  000A94  5025               	movf	___ftadd@exp2,w,c
  3981  000A96  1826               	xorwf	___ftadd@exp1,w,c
  3982  000A98  B4D8               	btfsc	status,2,c
  3983  000A9A  D01F               	goto	u3170
  3984  000A9C  D7F6               	goto	l886
  3985  000A9E                     l880:
  3986  000A9E  5026               	movf	___ftadd@exp1,w,c
  3987  000AA0  5C25               	subwf	___ftadd@exp2,w,c
  3988  000AA2  B0D8               	btfsc	status,0,c
  3989  000AA4  D01A               	goto	u3170
  3990  000AA6                     u3140:
  3991  000AA6  90D8               	bcf	status,0,c
  3992  000AA8  361B               	rlcf	___ftadd@f1,f,c
  3993  000AAA  361C               	rlcf	___ftadd@f1+1,f,c
  3994  000AAC  361D               	rlcf	___ftadd@f1+2,f,c
  3995  000AAE  0626               	decf	___ftadd@exp1,f,c
  3996  000AB0  5026               	movf	___ftadd@exp1,w,c
  3997  000AB2  1825               	xorwf	___ftadd@exp2,w,c
  3998  000AB4  B4D8               	btfsc	status,2,c
  3999  000AB6  D00D               	goto	l894
  4000  000AB8  0624               	decf	___ftadd@sign,f,c
  4001  000ABA  C024  F021         	movff	___ftadd@sign,??___ftadd
  4002  000ABE  0E07               	movlw	7
  4003  000AC0  1621               	andwf	??___ftadd,f,c
  4004  000AC2  B4D8               	btfsc	status,2,c
  4005  000AC4  D006               	goto	l894
  4006  000AC6  D7EF               	goto	u3140
  4007  000AC8  90D8               	bcf	status,0,c
  4008  000ACA  3220               	rrcf	___ftadd@f2+2,f,c
  4009  000ACC  321F               	rrcf	___ftadd@f2+1,f,c
  4010  000ACE  321E               	rrcf	___ftadd@f2,f,c
  4011  000AD0  2A25               	incf	___ftadd@exp2,f,c
  4012  000AD2                     l894:
  4013  000AD2  5025               	movf	___ftadd@exp2,w,c
  4014  000AD4  1826               	xorwf	___ftadd@exp1,w,c
  4015  000AD6  A4D8               	btfss	status,2,c
  4016  000AD8  D7F7               	goto	l895
  4017  000ADA                     u3170:
  4018  000ADA  AE24               	btfss	___ftadd@sign,7,c
  4019  000ADC  D00C               	goto	l897
  4020  000ADE  0EFF               	movlw	255
  4021  000AE0  1A1B               	xorwf	___ftadd@f1,f,c
  4022  000AE2  0EFF               	movlw	255
  4023  000AE4  1A1C               	xorwf	___ftadd@f1+1,f,c
  4024  000AE6  0EFF               	movlw	255
  4025  000AE8  1A1D               	xorwf	___ftadd@f1+2,f,c
  4026  000AEA  0E01               	movlw	1
  4027  000AEC  261B               	addwf	___ftadd@f1,f,c
  4028  000AEE  0E00               	movlw	0
  4029  000AF0  221C               	addwfc	___ftadd@f1+1,f,c
  4030  000AF2  0E00               	movlw	0
  4031  000AF4  221D               	addwfc	___ftadd@f1+2,f,c
  4032  000AF6                     l897:
  4033  000AF6  AC24               	btfss	___ftadd@sign,6,c
  4034  000AF8  D00C               	goto	l898
  4035  000AFA  0EFF               	movlw	255
  4036  000AFC  1A1E               	xorwf	___ftadd@f2,f,c
  4037  000AFE  0EFF               	movlw	255
  4038  000B00  1A1F               	xorwf	___ftadd@f2+1,f,c
  4039  000B02  0EFF               	movlw	255
  4040  000B04  1A20               	xorwf	___ftadd@f2+2,f,c
  4041  000B06  0E01               	movlw	1
  4042  000B08  261E               	addwf	___ftadd@f2,f,c
  4043  000B0A  0E00               	movlw	0
  4044  000B0C  221F               	addwfc	___ftadd@f2+1,f,c
  4045  000B0E  0E00               	movlw	0
  4046  000B10  2220               	addwfc	___ftadd@f2+2,f,c
  4047  000B12                     l898:
  4048  000B12  0E00               	movlw	0
  4049  000B14  6E24               	movwf	___ftadd@sign,c
  4050  000B16  501B               	movf	___ftadd@f1,w,c
  4051  000B18  261E               	addwf	___ftadd@f2,f,c
  4052  000B1A  501C               	movf	___ftadd@f1+1,w,c
  4053  000B1C  221F               	addwfc	___ftadd@f2+1,f,c
  4054  000B1E  501D               	movf	___ftadd@f1+2,w,c
  4055  000B20  2220               	addwfc	___ftadd@f2+2,f,c
  4056  000B22  AE20               	btfss	___ftadd@f2+2,7,c
  4057  000B24  D00E               	goto	l899
  4058  000B26  0EFF               	movlw	255
  4059  000B28  1A1E               	xorwf	___ftadd@f2,f,c
  4060  000B2A  0EFF               	movlw	255
  4061  000B2C  1A1F               	xorwf	___ftadd@f2+1,f,c
  4062  000B2E  0EFF               	movlw	255
  4063  000B30  1A20               	xorwf	___ftadd@f2+2,f,c
  4064  000B32  0E01               	movlw	1
  4065  000B34  261E               	addwf	___ftadd@f2,f,c
  4066  000B36  0E00               	movlw	0
  4067  000B38  221F               	addwfc	___ftadd@f2+1,f,c
  4068  000B3A  0E00               	movlw	0
  4069  000B3C  2220               	addwfc	___ftadd@f2+2,f,c
  4070  000B3E  0E01               	movlw	1
  4071  000B40  6E24               	movwf	___ftadd@sign,c
  4072  000B42                     l899:
  4073  000B42  C01E  F013         	movff	___ftadd@f2,___ftpack@arg
  4074  000B46  C01F  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  4075  000B4A  C020  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  4076  000B4E  C026  F016         	movff	___ftadd@exp1,___ftpack@exp
  4077  000B52  C024  F017         	movff	___ftadd@sign,___ftpack@sign
  4078  000B56  EC1C  F007         	call	___ftpack	;wreg free
  4079  000B5A  C013  F01B         	movff	?___ftpack,?___ftadd
  4080  000B5E  C014  F01C         	movff	?___ftpack+1,?___ftadd+1
  4081  000B62  C015  F01D         	movff	?___ftpack+2,?___ftadd+2
  4082  000B66  0012               	return	
  4083  000B68                     __end_of___ftadd:
  4084                           	opt stack 0
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           intcon	equ	0xFF2
  4092                           postinc0	equ	0xFEE
  4093                           wreg	equ	0xFE8
  4094                           postinc1	equ	0xFE6
  4095                           postdec1	equ	0xFE5
  4096                           fsr1h	equ	0xFE2
  4097                           fsr1l	equ	0xFE1
  4098                           indf2	equ	0xFDF
  4099                           postinc2	equ	0xFDE
  4100                           postdec2	equ	0xFDD
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           
  4105 ;; *************** function ___awtoft *****************
  4106 ;; Defined at:
  4107 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  c               2   32[COMRAM] int 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  sign            1   35[COMRAM] unsigned char 
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  3   32[COMRAM] float 
  4114 ;; Registers used:
  4115 ;;		wreg, status,2, status,0, cstack
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4121 ;;      Params:         3       0       0       0       0       0       0
  4122 ;;      Locals:         1       0       0       0       0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0
  4124 ;;      Totals:         4       0       0       0       0       0       0
  4125 ;;Total ram usage:        4 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    5
  4128 ;; This function calls:
  4129 ;;		___ftpack
  4130 ;; This function is called by:
  4131 ;;		_calculo_PID
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           	psect	text19
  4136  0012FC                     __ptext19:
  4137                           	opt stack 0
  4138  0012FC                     ___awtoft:
  4139                           	opt stack 24
  4140                           
  4141                           ;incstack = 0
  4142  0012FC  0E00               	movlw	0
  4143  0012FE  6E24               	movwf	___awtoft@sign,c
  4144  001300  AE22               	btfss	___awtoft@c+1,7,c
  4145  001302  D006               	goto	l821
  4146  001304  6C21               	negf	___awtoft@c,c
  4147  001306  1E22               	comf	___awtoft@c+1,f,c
  4148  001308  B0D8               	btfsc	status,0,c
  4149  00130A  2A22               	incf	___awtoft@c+1,f,c
  4150  00130C  0E01               	movlw	1
  4151  00130E  6E24               	movwf	___awtoft@sign,c
  4152  001310                     l821:
  4153  001310  C021  F013         	movff	___awtoft@c,___ftpack@arg
  4154  001314  C022  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  4155  001318  6A15               	clrf	___ftpack@arg+2,c
  4156  00131A  0E8E               	movlw	142
  4157  00131C  6E16               	movwf	___ftpack@exp,c
  4158  00131E  C024  F017         	movff	___awtoft@sign,___ftpack@sign
  4159  001322  EC1C  F007         	call	___ftpack	;wreg free
  4160  001326  C013  F021         	movff	?___ftpack,?___awtoft
  4161  00132A  C014  F022         	movff	?___ftpack+1,?___awtoft+1
  4162  00132E  C015  F023         	movff	?___ftpack+2,?___awtoft+2
  4163  001332  0012               	return	
  4164  001334                     __end_of___awtoft:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon	equ	0xFF2
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           postinc1	equ	0xFE6
  4176                           postdec1	equ	0xFE5
  4177                           fsr1h	equ	0xFE2
  4178                           fsr1l	equ	0xFE1
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function ___ftpack *****************
  4187 ;; Defined at:
  4188 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  arg             3   18[COMRAM] unsigned um
  4191 ;;  exp             1   21[COMRAM] unsigned char 
  4192 ;;  sign            1   22[COMRAM] unsigned char 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;		None
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  3   18[COMRAM] float 
  4197 ;; Registers used:
  4198 ;;		wreg, status,2, status,0
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4204 ;;      Params:         5       0       0       0       0       0       0
  4205 ;;      Locals:         0       0       0       0       0       0       0
  4206 ;;      Temps:          3       0       0       0       0       0       0
  4207 ;;      Totals:         8       0       0       0       0       0       0
  4208 ;;Total ram usage:        8 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    4
  4211 ;; This function calls:
  4212 ;;		Nothing
  4213 ;; This function is called by:
  4214 ;;		___awtoft
  4215 ;;		___ftadd
  4216 ;;		___ftdiv
  4217 ;;		___ftmul
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text20
  4222  000E38                     __ptext20:
  4223                           	opt stack 0
  4224  000E38                     ___ftpack:
  4225                           	opt stack 24
  4226                           
  4227                           ;incstack = 0
  4228  000E38  5016               	movf	___ftpack@exp,w,c
  4229  000E3A  B4D8               	btfsc	status,2,c
  4230  000E3C  D005               	goto	u2760
  4231  000E3E  5013               	movf	___ftpack@arg,w,c
  4232  000E40  1014               	iorwf	___ftpack@arg+1,w,c
  4233  000E42  1015               	iorwf	___ftpack@arg+2,w,c
  4234  000E44  A4D8               	btfss	status,2,c
  4235  000E46  D00C               	goto	l840
  4236  000E48                     u2760:
  4237  000E48  0E00               	movlw	0
  4238  000E4A  6E13               	movwf	?___ftpack,c
  4239  000E4C  0E00               	movlw	0
  4240  000E4E  6E14               	movwf	?___ftpack+1,c
  4241  000E50  0E00               	movlw	0
  4242  000E52  6E15               	movwf	?___ftpack+2,c
  4243  000E54  0012               	return	
  4244  000E56  2A16               	incf	___ftpack@exp,f,c
  4245  000E58  90D8               	bcf	status,0,c
  4246  000E5A  3215               	rrcf	___ftpack@arg+2,f,c
  4247  000E5C  3214               	rrcf	___ftpack@arg+1,f,c
  4248  000E5E  3213               	rrcf	___ftpack@arg,f,c
  4249  000E60                     l840:
  4250  000E60  0E00               	movlw	0
  4251  000E62  1413               	andwf	___ftpack@arg,w,c
  4252  000E64  6E18               	movwf	??___ftpack& (0+255),c
  4253  000E66  0E00               	movlw	0
  4254  000E68  1414               	andwf	___ftpack@arg+1,w,c
  4255  000E6A  6E19               	movwf	(??___ftpack+1)& (0+255),c
  4256  000E6C  0EFE               	movlw	254
  4257  000E6E  1415               	andwf	___ftpack@arg+2,w,c
  4258  000E70  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  4259  000E72  5018               	movf	??___ftpack,w,c
  4260  000E74  1019               	iorwf	??___ftpack+1,w,c
  4261  000E76  101A               	iorwf	??___ftpack+2,w,c
  4262  000E78  B4D8               	btfsc	status,2,c
  4263  000E7A  D00C               	goto	l843
  4264  000E7C  D7EC               	goto	l841
  4265  000E7E  2A16               	incf	___ftpack@exp,f,c
  4266  000E80  0E01               	movlw	1
  4267  000E82  2613               	addwf	___ftpack@arg,f,c
  4268  000E84  0E00               	movlw	0
  4269  000E86  2214               	addwfc	___ftpack@arg+1,f,c
  4270  000E88  0E00               	movlw	0
  4271  000E8A  2215               	addwfc	___ftpack@arg+2,f,c
  4272  000E8C  90D8               	bcf	status,0,c
  4273  000E8E  3215               	rrcf	___ftpack@arg+2,f,c
  4274  000E90  3214               	rrcf	___ftpack@arg+1,f,c
  4275  000E92  3213               	rrcf	___ftpack@arg,f,c
  4276  000E94                     l843:
  4277  000E94  0E00               	movlw	0
  4278  000E96  1413               	andwf	___ftpack@arg,w,c
  4279  000E98  6E18               	movwf	??___ftpack& (0+255),c
  4280  000E9A  0E00               	movlw	0
  4281  000E9C  1414               	andwf	___ftpack@arg+1,w,c
  4282  000E9E  6E19               	movwf	(??___ftpack+1)& (0+255),c
  4283  000EA0  0EFF               	movlw	255
  4284  000EA2  1415               	andwf	___ftpack@arg+2,w,c
  4285  000EA4  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  4286  000EA6  5018               	movf	??___ftpack,w,c
  4287  000EA8  1019               	iorwf	??___ftpack+1,w,c
  4288  000EAA  101A               	iorwf	??___ftpack+2,w,c
  4289  000EAC  B4D8               	btfsc	status,2,c
  4290  000EAE  D006               	goto	l846
  4291  000EB0  D7E6               	goto	l844
  4292  000EB2  0616               	decf	___ftpack@exp,f,c
  4293  000EB4  90D8               	bcf	status,0,c
  4294  000EB6  3613               	rlcf	___ftpack@arg,f,c
  4295  000EB8  3614               	rlcf	___ftpack@arg+1,f,c
  4296  000EBA  3615               	rlcf	___ftpack@arg+2,f,c
  4297  000EBC                     l846:
  4298  000EBC  BE14               	btfsc	___ftpack@arg+1,7,c
  4299  000EBE  D003               	goto	u2800
  4300  000EC0  0E02               	movlw	2
  4301  000EC2  6016               	cpfslt	___ftpack@exp,c
  4302  000EC4  D7F6               	goto	l847
  4303  000EC6                     u2800:
  4304  000EC6  A016               	btfss	___ftpack@exp,0,c
  4305  000EC8  9E14               	bcf	___ftpack@arg+1,7,c
  4306  000ECA  90D8               	bcf	status,0,c
  4307  000ECC  3216               	rrcf	___ftpack@exp,f,c
  4308  000ECE  5016               	movf	___ftpack@exp,w,c
  4309  000ED0  1215               	iorwf	___ftpack@arg+2,f,c
  4310  000ED2  5017               	movf	___ftpack@sign,w,c
  4311  000ED4  A4D8               	btfss	status,2,c
  4312  000ED6  8E15               	bsf	___ftpack@arg+2,7,c
  4313  000ED8  C013  F013         	movff	___ftpack@arg,?___ftpack
  4314  000EDC  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  4315  000EE0  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  4316  000EE4  0012               	return	
  4317  000EE6                     __end_of___ftpack:
  4318                           	opt stack 0
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           postinc0	equ	0xFEE
  4327                           wreg	equ	0xFE8
  4328                           postinc1	equ	0xFE6
  4329                           postdec1	equ	0xFE5
  4330                           fsr1h	equ	0xFE2
  4331                           fsr1l	equ	0xFE1
  4332                           indf2	equ	0xFDF
  4333                           postinc2	equ	0xFDE
  4334                           postdec2	equ	0xFDD
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function ___fttol *****************
  4340 ;; Defined at:
  4341 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;  f1              3   18[COMRAM] float 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  lval            4   28[COMRAM] unsigned long 
  4346 ;;  exp1            1   32[COMRAM] unsigned char 
  4347 ;;  sign1           1   27[COMRAM] unsigned char 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  4   18[COMRAM] long 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4357 ;;      Params:         4       0       0       0       0       0       0
  4358 ;;      Locals:         6       0       0       0       0       0       0
  4359 ;;      Temps:          5       0       0       0       0       0       0
  4360 ;;      Totals:        15       0       0       0       0       0       0
  4361 ;;Total ram usage:       15 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    4
  4364 ;; This function calls:
  4365 ;;		Nothing
  4366 ;; This function is called by:
  4367 ;;		_main
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text21
  4372  000C5C                     __ptext21:
  4373                           	opt stack 0
  4374  000C5C                     ___fttol:
  4375                           	opt stack 26
  4376                           
  4377                           ;incstack = 0
  4378  000C5C  C015  F017         	movff	___fttol@f1+2,??___fttol
  4379  000C60  6A18               	clrf	(??___fttol+1)& (0+255),c
  4380  000C62  6A19               	clrf	(??___fttol+2)& (0+255),c
  4381  000C64  3414               	rlcf	___fttol@f1+1,w,c
  4382  000C66  3617               	rlcf	??___fttol& (0+255),f,c
  4383  000C68  E301               	bnc	u3581
  4384  000C6A  8018               	bsf	(??___fttol+1)& (0+255),0,c
  4385  000C6C                     u3581:
  4386  000C6C  5017               	movf	??___fttol,w,c
  4387  000C6E  6E21               	movwf	___fttol@exp1,c
  4388  000C70  5021               	movf	___fttol@exp1,w,c
  4389  000C72  A4D8               	btfss	status,2,c
  4390  000C74  D009               	goto	l940
  4391  000C76  0E00               	movlw	0
  4392  000C78  6E13               	movwf	?___fttol,c
  4393  000C7A  0E00               	movlw	0
  4394  000C7C  6E14               	movwf	?___fttol+1,c
  4395  000C7E  0E00               	movlw	0
  4396  000C80  6E15               	movwf	?___fttol+2,c
  4397  000C82  0E00               	movlw	0
  4398  000C84  6E16               	movwf	?___fttol+3,c
  4399  000C86  0012               	return	
  4400  000C88                     l940:
  4401  000C88  0E17               	movlw	23
  4402  000C8A  6E17               	movwf	??___fttol& (0+255),c
  4403  000C8C  C013  F018         	movff	___fttol@f1,??___fttol+1
  4404  000C90  C014  F019         	movff	___fttol@f1+1,??___fttol+2
  4405  000C94  C015  F01A         	movff	___fttol@f1+2,??___fttol+3
  4406  000C98  2817               	incf	??___fttol,w,c
  4407  000C9A  6E1B               	movwf	(??___fttol+4)& (0+255),c
  4408  000C9C  D004               	goto	u3600
  4409  000C9E                     u3605:
  4410  000C9E  90D8               	bcf	status,0,c
  4411  000CA0  321A               	rrcf	??___fttol+3,f,c
  4412  000CA2  3219               	rrcf	??___fttol+2,f,c
  4413  000CA4  3218               	rrcf	??___fttol+1,f,c
  4414  000CA6                     u3600:
  4415  000CA6  2E1B               	decfsz	(??___fttol+4)& (0+255),f,c
  4416  000CA8  D7FA               	goto	u3605
  4417  000CAA  5018               	movf	??___fttol+1,w,c
  4418  000CAC  6E1C               	movwf	___fttol@sign1,c
  4419  000CAE  8E14               	bsf	___fttol@f1+1,7,c
  4420  000CB0  0EFF               	movlw	255
  4421  000CB2  1613               	andwf	___fttol@f1,f,c
  4422  000CB4  0EFF               	movlw	255
  4423  000CB6  1614               	andwf	___fttol@f1+1,f,c
  4424  000CB8  0E00               	movlw	0
  4425  000CBA  1615               	andwf	___fttol@f1+2,f,c
  4426  000CBC  5013               	movf	___fttol@f1,w,c
  4427  000CBE  6E1D               	movwf	___fttol@lval,c
  4428  000CC0  5014               	movf	___fttol@f1+1,w,c
  4429  000CC2  6E1E               	movwf	___fttol@lval+1,c
  4430  000CC4  5015               	movf	___fttol@f1+2,w,c
  4431  000CC6  6E1F               	movwf	___fttol@lval+2,c
  4432  000CC8  6A20               	clrf	___fttol@lval+3,c
  4433  000CCA  0E8E               	movlw	142
  4434  000CCC  5E21               	subwf	___fttol@exp1,f,c
  4435  000CCE  AE21               	btfss	___fttol@exp1,7,c
  4436  000CD0  D016               	goto	l942
  4437  000CD2  5021               	movf	___fttol@exp1,w,c
  4438  000CD4  0A80               	xorlw	128
  4439  000CD6  0F8F               	addlw	143
  4440  000CD8  B0D8               	btfsc	status,0,c
  4441  000CDA  D009               	goto	l943
  4442  000CDC  0E00               	movlw	0
  4443  000CDE  6E13               	movwf	?___fttol,c
  4444  000CE0  0E00               	movlw	0
  4445  000CE2  6E14               	movwf	?___fttol+1,c
  4446  000CE4  0E00               	movlw	0
  4447  000CE6  6E15               	movwf	?___fttol+2,c
  4448  000CE8  0E00               	movlw	0
  4449  000CEA  6E16               	movwf	?___fttol+3,c
  4450  000CEC  0012               	return	
  4451  000CEE                     l943:
  4452  000CEE  90D8               	bcf	status,0,c
  4453  000CF0  3220               	rrcf	___fttol@lval+3,f,c
  4454  000CF2  321F               	rrcf	___fttol@lval+2,f,c
  4455  000CF4  321E               	rrcf	___fttol@lval+1,f,c
  4456  000CF6  321D               	rrcf	___fttol@lval,f,c
  4457  000CF8  3E21               	incfsz	___fttol@exp1,f,c
  4458  000CFA  D7F9               	goto	l943
  4459  000CFC  D015               	goto	u3640
  4460  000CFE                     l942:
  4461  000CFE  0E17               	movlw	23
  4462  000D00  6421               	cpfsgt	___fttol@exp1,c
  4463  000D02  D00F               	goto	l948
  4464  000D04  0E00               	movlw	0
  4465  000D06  6E13               	movwf	?___fttol,c
  4466  000D08  0E00               	movlw	0
  4467  000D0A  6E14               	movwf	?___fttol+1,c
  4468  000D0C  0E00               	movlw	0
  4469  000D0E  6E15               	movwf	?___fttol+2,c
  4470  000D10  0E00               	movlw	0
  4471  000D12  6E16               	movwf	?___fttol+3,c
  4472  000D14  0012               	return	
  4473  000D16  90D8               	bcf	status,0,c
  4474  000D18  361D               	rlcf	___fttol@lval,f,c
  4475  000D1A  361E               	rlcf	___fttol@lval+1,f,c
  4476  000D1C  361F               	rlcf	___fttol@lval+2,f,c
  4477  000D1E  3620               	rlcf	___fttol@lval+3,f,c
  4478  000D20  0621               	decf	___fttol@exp1,f,c
  4479  000D22                     l948:
  4480  000D22  5021               	movf	___fttol@exp1,w,c
  4481  000D24  A4D8               	btfss	status,2,c
  4482  000D26  D7F7               	goto	l949
  4483  000D28                     u3640:
  4484  000D28  501C               	movf	___fttol@sign1,w,c
  4485  000D2A  B4D8               	btfsc	status,2,c
  4486  000D2C  D008               	goto	l951
  4487  000D2E  1E20               	comf	___fttol@lval+3,f,c
  4488  000D30  1E1F               	comf	___fttol@lval+2,f,c
  4489  000D32  1E1E               	comf	___fttol@lval+1,f,c
  4490  000D34  6C1D               	negf	___fttol@lval,c
  4491  000D36  0E00               	movlw	0
  4492  000D38  221E               	addwfc	___fttol@lval+1,f,c
  4493  000D3A  221F               	addwfc	___fttol@lval+2,f,c
  4494  000D3C  2220               	addwfc	___fttol@lval+3,f,c
  4495  000D3E                     l951:
  4496  000D3E  C01D  F013         	movff	___fttol@lval,?___fttol
  4497  000D42  C01E  F014         	movff	___fttol@lval+1,?___fttol+1
  4498  000D46  C01F  F015         	movff	___fttol@lval+2,?___fttol+2
  4499  000D4A  C020  F016         	movff	___fttol@lval+3,?___fttol+3
  4500  000D4E  0012               	return	
  4501  000D50                     __end_of___fttol:
  4502                           	opt stack 0
  4503                           tblptru	equ	0xFF8
  4504                           tblptrh	equ	0xFF7
  4505                           tblptrl	equ	0xFF6
  4506                           tablat	equ	0xFF5
  4507                           prodh	equ	0xFF4
  4508                           prodl	equ	0xFF3
  4509                           intcon	equ	0xFF2
  4510                           postinc0	equ	0xFEE
  4511                           wreg	equ	0xFE8
  4512                           postinc1	equ	0xFE6
  4513                           postdec1	equ	0xFE5
  4514                           fsr1h	equ	0xFE2
  4515                           fsr1l	equ	0xFE1
  4516                           indf2	equ	0xFDF
  4517                           postinc2	equ	0xFDE
  4518                           postdec2	equ	0xFDD
  4519                           fsr2h	equ	0xFDA
  4520                           fsr2l	equ	0xFD9
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function _TMR4_HasOverflowOccured *****************
  4524 ;; Defined at:
  4525 ;;		line 111 in file "mcc_generated_files/tmr4.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  status          1   18[COMRAM] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      unsigned char 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         0       0       0       0       0       0       0
  4540 ;;      Locals:         1       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0
  4542 ;;      Totals:         1       0       0       0       0       0       0
  4543 ;;Total ram usage:        1 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    4
  4546 ;; This function calls:
  4547 ;;		Nothing
  4548 ;; This function is called by:
  4549 ;;		_main
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text22
  4554  00153A                     __ptext22:
  4555                           	opt stack 0
  4556  00153A                     _TMR4_HasOverflowOccured:
  4557                           	opt stack 26
  4558                           
  4559                           ;tmr4.c: 114: bool status = PIR5bits.TMR4IF;
  4560                           
  4561                           ;incstack = 0
  4562  00153A  0E00               	movlw	0
  4563  00153C  B07E               	btfsc	3966,0,c	;volatile
  4564  00153E  0E01               	movlw	1
  4565  001540  6E13               	movwf	TMR4_HasOverflowOccured@status,c
  4566                           
  4567                           ;tmr4.c: 115: if(status)
  4568  001542  5013               	movf	TMR4_HasOverflowOccured@status,w,c
  4569  001544  A4D8               	btfss	status,2,c
  4570                           
  4571                           ;tmr4.c: 116: {
  4572                           ;tmr4.c: 118: PIR5bits.TMR4IF = 0;
  4573  001546  907E               	bcf	3966,0,c	;volatile
  4574                           
  4575                           ;tmr4.c: 119: }
  4576                           ;tmr4.c: 120: return status;
  4577  001548  5013               	movf	TMR4_HasOverflowOccured@status,w,c
  4578  00154A  0012               	return	
  4579  00154C                     __end_of_TMR4_HasOverflowOccured:
  4580                           	opt stack 0
  4581                           tblptru	equ	0xFF8
  4582                           tblptrh	equ	0xFF7
  4583                           tblptrl	equ	0xFF6
  4584                           tablat	equ	0xFF5
  4585                           prodh	equ	0xFF4
  4586                           prodl	equ	0xFF3
  4587                           intcon	equ	0xFF2
  4588                           postinc0	equ	0xFEE
  4589                           wreg	equ	0xFE8
  4590                           postinc1	equ	0xFE6
  4591                           postdec1	equ	0xFE5
  4592                           fsr1h	equ	0xFE2
  4593                           fsr1l	equ	0xFE1
  4594                           indf2	equ	0xFDF
  4595                           postinc2	equ	0xFDE
  4596                           postdec2	equ	0xFDD
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8
  4600                           
  4601 ;; *************** function _SYSTEM_Initialize *****************
  4602 ;; Defined at:
  4603 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;		None
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;		None
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  1    wreg      void 
  4610 ;; Registers used:
  4611 ;;		wreg, status,2, status,0, cstack
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4617 ;;      Params:         0       0       0       0       0       0       0
  4618 ;;      Locals:         0       0       0       0       0       0       0
  4619 ;;      Temps:          0       0       0       0       0       0       0
  4620 ;;      Totals:         0       0       0       0       0       0       0
  4621 ;;Total ram usage:        0 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; Hardware stack levels required when called:    6
  4624 ;; This function calls:
  4625 ;;		_ADC_Initialize
  4626 ;;		_EUSART1_Initialize
  4627 ;;		_EXT_INT_Initialize
  4628 ;;		_INTERRUPT_Initialize
  4629 ;;		_OSCILLATOR_Initialize
  4630 ;;		_PIN_MANAGER_Initialize
  4631 ;;		_PWM4_Initialize
  4632 ;;		_PWM5_Initialize
  4633 ;;		_TMR2_Initialize
  4634 ;;		_TMR4_Initialize
  4635 ;; This function is called by:
  4636 ;;		_main
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text23
  4641  0013FE                     __ptext23:
  4642                           	opt stack 0
  4643  0013FE                     _SYSTEM_Initialize:
  4644                           	opt stack 24
  4645                           
  4646                           ;mcc.c: 53: INTERRUPT_Initialize();
  4647                           
  4648                           ;incstack = 0
  4649  0013FE  EC0C  F00B         	call	_INTERRUPT_Initialize	;wreg free
  4650                           
  4651                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  4652  001402  EC41  F009         	call	_PIN_MANAGER_Initialize	;wreg free
  4653                           
  4654                           ;mcc.c: 55: OSCILLATOR_Initialize();
  4655  001406  ECB8  F00A         	call	_OSCILLATOR_Initialize	;wreg free
  4656                           
  4657                           ;mcc.c: 56: ADC_Initialize();
  4658  00140A  EC88  F00A         	call	_ADC_Initialize	;wreg free
  4659                           
  4660                           ;mcc.c: 57: TMR4_Initialize();
  4661  00140E  ECA6  F00A         	call	_TMR4_Initialize	;wreg free
  4662                           
  4663                           ;mcc.c: 58: PWM4_Initialize();
  4664  001412  ECAF  F00A         	call	_PWM4_Initialize	;wreg free
  4665                           
  4666                           ;mcc.c: 59: PWM5_Initialize();
  4667  001416  EC93  F00A         	call	_PWM5_Initialize	;wreg free
  4668                           
  4669                           ;mcc.c: 60: TMR2_Initialize();
  4670  00141A  ECCA  F00A         	call	_TMR2_Initialize	;wreg free
  4671                           
  4672                           ;mcc.c: 61: EXT_INT_Initialize();
  4673  00141E  EC9A  F009         	call	_EXT_INT_Initialize	;wreg free
  4674                           
  4675                           ;mcc.c: 62: EUSART1_Initialize();
  4676  001422  EC95  F008         	call	_EUSART1_Initialize	;wreg free
  4677  001426  0012               	return		;funcret
  4678  001428                     __end_of_SYSTEM_Initialize:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           postinc0	equ	0xFEE
  4688                           wreg	equ	0xFE8
  4689                           postinc1	equ	0xFE6
  4690                           postdec1	equ	0xFE5
  4691                           fsr1h	equ	0xFE2
  4692                           fsr1l	equ	0xFE1
  4693                           indf2	equ	0xFDF
  4694                           postinc2	equ	0xFDE
  4695                           postdec2	equ	0xFDD
  4696                           fsr2h	equ	0xFDA
  4697                           fsr2l	equ	0xFD9
  4698                           status	equ	0xFD8
  4699                           
  4700 ;; *************** function _TMR4_Initialize *****************
  4701 ;; Defined at:
  4702 ;;		line 62 in file "mcc_generated_files/tmr4.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;		None
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, status,2
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4716 ;;      Params:         0       0       0       0       0       0       0
  4717 ;;      Locals:         0       0       0       0       0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0
  4719 ;;      Totals:         0       0       0       0       0       0       0
  4720 ;;Total ram usage:        0 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    4
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_SYSTEM_Initialize
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text24
  4731  00154C                     __ptext24:
  4732                           	opt stack 0
  4733  00154C                     _TMR4_Initialize:
  4734                           	opt stack 25
  4735                           
  4736                           ;tmr4.c: 67: PR4 = 0xD8;
  4737                           
  4738                           ;incstack = 0
  4739  00154C  0ED8               	movlw	216
  4740  00154E  010F               	movlb	15	; () banked
  4741  001550  6F52               	movwf	82,b	;volatile
  4742                           
  4743                           ;tmr4.c: 70: TMR4 = 0x00;
  4744  001552  0E00               	movlw	0
  4745  001554  6F53               	movwf	83,b	;volatile
  4746                           
  4747                           ; BSR set to: 15
  4748                           ;tmr4.c: 73: PIR5bits.TMR4IF = 0;
  4749  001556  907E               	bcf	3966,0,c	;volatile
  4750                           
  4751                           ;tmr4.c: 76: T4CON = 0x65;
  4752  001558  0E65               	movlw	101
  4753  00155A  6F51               	movwf	81,b	;volatile
  4754                           
  4755                           ; BSR set to: 15
  4756  00155C  0012               	return		;funcret
  4757  00155E                     __end_of_TMR4_Initialize:
  4758                           	opt stack 0
  4759                           tblptru	equ	0xFF8
  4760                           tblptrh	equ	0xFF7
  4761                           tblptrl	equ	0xFF6
  4762                           tablat	equ	0xFF5
  4763                           prodh	equ	0xFF4
  4764                           prodl	equ	0xFF3
  4765                           intcon	equ	0xFF2
  4766                           postinc0	equ	0xFEE
  4767                           wreg	equ	0xFE8
  4768                           postinc1	equ	0xFE6
  4769                           postdec1	equ	0xFE5
  4770                           fsr1h	equ	0xFE2
  4771                           fsr1l	equ	0xFE1
  4772                           indf2	equ	0xFDF
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           fsr2h	equ	0xFDA
  4776                           fsr2l	equ	0xFD9
  4777                           status	equ	0xFD8
  4778                           
  4779 ;; *************** function _TMR2_Initialize *****************
  4780 ;; Defined at:
  4781 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  1    wreg      void 
  4788 ;; Registers used:
  4789 ;;		wreg, status,2
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4795 ;;      Params:         0       0       0       0       0       0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0
  4798 ;;      Totals:         0       0       0       0       0       0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    4
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_SYSTEM_Initialize
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text25
  4810  001594                     __ptext25:
  4811                           	opt stack 0
  4812  001594                     _TMR2_Initialize:
  4813                           	opt stack 25
  4814                           
  4815                           ;tmr2.c: 67: PR2 = 0xFF;
  4816                           
  4817                           ; BSR set to: 15
  4818                           ;incstack = 0
  4819  001594  68BB               	setf	4027,c	;volatile
  4820                           
  4821                           ;tmr2.c: 70: TMR2 = 0x00;
  4822  001596  0E00               	movlw	0
  4823  001598  6EBC               	movwf	4028,c	;volatile
  4824                           
  4825                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
  4826  00159A  929E               	bcf	3998,1,c	;volatile
  4827                           
  4828                           ;tmr2.c: 76: T2CON = 0x05;
  4829  00159C  0E05               	movlw	5
  4830  00159E  6EBA               	movwf	4026,c	;volatile
  4831  0015A0  0012               	return		;funcret
  4832  0015A2                     __end_of_TMR2_Initialize:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           postinc0	equ	0xFEE
  4842                           wreg	equ	0xFE8
  4843                           postinc1	equ	0xFE6
  4844                           postdec1	equ	0xFE5
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function _PWM5_Initialize *****************
  4855 ;; Defined at:
  4856 ;;		line 64 in file "mcc_generated_files/pwm5.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;		None
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      void 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4870 ;;      Params:         0       0       0       0       0       0       0
  4871 ;;      Locals:         0       0       0       0       0       0       0
  4872 ;;      Temps:          0       0       0       0       0       0       0
  4873 ;;      Totals:         0       0       0       0       0       0       0
  4874 ;;Total ram usage:        0 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    4
  4877 ;; This function calls:
  4878 ;;		Nothing
  4879 ;; This function is called by:
  4880 ;;		_SYSTEM_Initialize
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text26
  4885  001526                     __ptext26:
  4886                           	opt stack 0
  4887  001526                     _PWM5_Initialize:
  4888                           	opt stack 25
  4889                           
  4890                           ;pwm5.c: 69: CCP5CON = 0x3C;
  4891                           
  4892                           ;incstack = 0
  4893  001526  0E3C               	movlw	60
  4894  001528  010F               	movlb	15	; () banked
  4895  00152A  6F54               	movwf	84,b	;volatile
  4896                           
  4897                           ;pwm5.c: 72: CCPR5L = 0x3F;
  4898  00152C  0E3F               	movlw	63
  4899  00152E  6F55               	movwf	85,b	;volatile
  4900                           
  4901                           ;pwm5.c: 75: CCPR5H = 0x00;
  4902  001530  0E00               	movlw	0
  4903  001532  6F56               	movwf	86,b	;volatile
  4904                           
  4905                           ;pwm5.c: 78: CCPTMRS1bits.C5TSEL = 0x0;
  4906  001534  0EF3               	movlw	-13
  4907  001536  1748               	andwf	72,f,b	;volatile
  4908                           
  4909                           ; BSR set to: 15
  4910  001538  0012               	return		;funcret
  4911  00153A                     __end_of_PWM5_Initialize:
  4912                           	opt stack 0
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           prodh	equ	0xFF4
  4918                           prodl	equ	0xFF3
  4919                           intcon	equ	0xFF2
  4920                           postinc0	equ	0xFEE
  4921                           wreg	equ	0xFE8
  4922                           postinc1	equ	0xFE6
  4923                           postdec1	equ	0xFE5
  4924                           fsr1h	equ	0xFE2
  4925                           fsr1l	equ	0xFE1
  4926                           indf2	equ	0xFDF
  4927                           postinc2	equ	0xFDE
  4928                           postdec2	equ	0xFDD
  4929                           fsr2h	equ	0xFDA
  4930                           fsr2l	equ	0xFD9
  4931                           status	equ	0xFD8
  4932                           
  4933 ;; *************** function _PWM4_Initialize *****************
  4934 ;; Defined at:
  4935 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;		None
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;		None
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  1    wreg      void 
  4942 ;; Registers used:
  4943 ;;		wreg, status,2
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4949 ;;      Params:         0       0       0       0       0       0       0
  4950 ;;      Locals:         0       0       0       0       0       0       0
  4951 ;;      Temps:          0       0       0       0       0       0       0
  4952 ;;      Totals:         0       0       0       0       0       0       0
  4953 ;;Total ram usage:        0 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    4
  4956 ;; This function calls:
  4957 ;;		Nothing
  4958 ;; This function is called by:
  4959 ;;		_SYSTEM_Initialize
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           	psect	text27
  4964  00155E                     __ptext27:
  4965                           	opt stack 0
  4966  00155E                     _PWM4_Initialize:
  4967                           	opt stack 25
  4968                           
  4969                           ;pwm4.c: 69: CCP4CON = 0x3C;
  4970                           
  4971                           ; BSR set to: 15
  4972                           ;incstack = 0
  4973  00155E  0E3C               	movlw	60
  4974  001560  010F               	movlb	15	; () banked
  4975  001562  6F57               	movwf	87,b	;volatile
  4976                           
  4977                           ; BSR set to: 15
  4978                           ;pwm4.c: 72: CCPR4L = 0xFF;
  4979  001564  6958               	setf	88,b	;volatile
  4980                           
  4981                           ;pwm4.c: 75: CCPR4H = 0x00;
  4982  001566  0E00               	movlw	0
  4983  001568  6F59               	movwf	89,b	;volatile
  4984                           
  4985                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  4986  00156A  0EFC               	movlw	-4
  4987  00156C  1748               	andwf	72,f,b	;volatile
  4988                           
  4989                           ; BSR set to: 15
  4990  00156E  0012               	return		;funcret
  4991  001570                     __end_of_PWM4_Initialize:
  4992                           	opt stack 0
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           intcon	equ	0xFF2
  5000                           postinc0	equ	0xFEE
  5001                           wreg	equ	0xFE8
  5002                           postinc1	equ	0xFE6
  5003                           postdec1	equ	0xFE5
  5004                           fsr1h	equ	0xFE2
  5005                           fsr1l	equ	0xFE1
  5006                           indf2	equ	0xFDF
  5007                           postinc2	equ	0xFDE
  5008                           postdec2	equ	0xFDD
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function _PIN_MANAGER_Initialize *****************
  5014 ;; Defined at:
  5015 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;		None
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;		None
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  1    wreg      void 
  5022 ;; Registers used:
  5023 ;;		wreg, status,2
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5029 ;;      Params:         0       0       0       0       0       0       0
  5030 ;;      Locals:         0       0       0       0       0       0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0
  5032 ;;      Totals:         0       0       0       0       0       0       0
  5033 ;;Total ram usage:        0 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    4
  5036 ;; This function calls:
  5037 ;;		Nothing
  5038 ;; This function is called by:
  5039 ;;		_SYSTEM_Initialize
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           	psect	text28
  5044  001282                     __ptext28:
  5045                           	opt stack 0
  5046  001282                     _PIN_MANAGER_Initialize:
  5047                           	opt stack 25
  5048                           
  5049                           ;pin_manager.c: 60: LATE = 0x00;
  5050                           
  5051                           ; BSR set to: 15
  5052                           ;incstack = 0
  5053  001282  0E00               	movlw	0
  5054  001284  6E8D               	movwf	3981,c	;volatile
  5055                           
  5056                           ;pin_manager.c: 61: LATD = 0x00;
  5057  001286  0E00               	movlw	0
  5058  001288  6E8C               	movwf	3980,c	;volatile
  5059                           
  5060                           ;pin_manager.c: 62: LATA = 0x00;
  5061  00128A  0E00               	movlw	0
  5062  00128C  6E89               	movwf	3977,c	;volatile
  5063                           
  5064                           ;pin_manager.c: 63: LATB = 0x02;
  5065  00128E  0E02               	movlw	2
  5066  001290  6E8A               	movwf	3978,c	;volatile
  5067                           
  5068                           ;pin_manager.c: 64: LATC = 0x00;
  5069  001292  0E00               	movlw	0
  5070  001294  6E8B               	movwf	3979,c	;volatile
  5071                           
  5072                           ;pin_manager.c: 69: TRISE = 0x03;
  5073  001296  0E03               	movlw	3
  5074  001298  6E96               	movwf	3990,c	;volatile
  5075                           
  5076                           ;pin_manager.c: 70: TRISA = 0xFF;
  5077  00129A  6892               	setf	3986,c	;volatile
  5078                           
  5079                           ;pin_manager.c: 71: TRISB = 0xFF;
  5080  00129C  6893               	setf	3987,c	;volatile
  5081                           
  5082                           ;pin_manager.c: 72: TRISC = 0x31;
  5083  00129E  0E31               	movlw	49
  5084  0012A0  6E94               	movwf	3988,c	;volatile
  5085                           
  5086                           ;pin_manager.c: 73: TRISD = 0xE8;
  5087  0012A2  0EE8               	movlw	232
  5088  0012A4  6E95               	movwf	3989,c	;volatile
  5089                           
  5090                           ;pin_manager.c: 78: ANSELD = 0xFF;
  5091  0012A6  010F               	movlb	15	; () banked
  5092  0012A8  693B               	setf	59,b	;volatile
  5093                           
  5094                           ;pin_manager.c: 79: ANSELC = 0x3C;
  5095  0012AA  0E3C               	movlw	60
  5096  0012AC  6F3A               	movwf	58,b	;volatile
  5097                           
  5098                           ;pin_manager.c: 80: ANSELB = 0x38;
  5099  0012AE  0E38               	movlw	56
  5100  0012B0  6F39               	movwf	57,b	;volatile
  5101                           
  5102                           ;pin_manager.c: 81: ANSELE = 0x07;
  5103  0012B2  0E07               	movlw	7
  5104  0012B4  6F3C               	movwf	60,b	;volatile
  5105                           
  5106                           ;pin_manager.c: 82: ANSELA = 0x2F;
  5107  0012B6  0E2F               	movlw	47
  5108  0012B8  6F38               	movwf	56,b	;volatile
  5109                           
  5110                           ;pin_manager.c: 87: WPUB = 0x00;
  5111  0012BA  0E00               	movlw	0
  5112  0012BC  6E61               	movwf	3937,c	;volatile
  5113                           
  5114                           ; BSR set to: 15
  5115                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 1;
  5116  0012BE  8EF1               	bsf	intcon2,7,c	;volatile
  5117                           
  5118                           ; BSR set to: 15
  5119                           ;pin_manager.c: 97: INTCONbits.RBIE = 1;
  5120  0012C0  86F2               	bsf	intcon,3,c	;volatile
  5121                           
  5122                           ; BSR set to: 15
  5123  0012C2  0012               	return		;funcret
  5124  0012C4                     __end_of_PIN_MANAGER_Initialize:
  5125                           	opt stack 0
  5126                           tblptru	equ	0xFF8
  5127                           tblptrh	equ	0xFF7
  5128                           tblptrl	equ	0xFF6
  5129                           tablat	equ	0xFF5
  5130                           prodh	equ	0xFF4
  5131                           prodl	equ	0xFF3
  5132                           intcon	equ	0xFF2
  5133                           intcon2	equ	0xFF1
  5134                           postinc0	equ	0xFEE
  5135                           wreg	equ	0xFE8
  5136                           postinc1	equ	0xFE6
  5137                           postdec1	equ	0xFE5
  5138                           fsr1h	equ	0xFE2
  5139                           fsr1l	equ	0xFE1
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function _OSCILLATOR_Initialize *****************
  5148 ;; Defined at:
  5149 ;;		line 65 in file "mcc_generated_files/mcc.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;		None
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  1    wreg      void 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5163 ;;      Params:         0       0       0       0       0       0       0
  5164 ;;      Locals:         0       0       0       0       0       0       0
  5165 ;;      Temps:          0       0       0       0       0       0       0
  5166 ;;      Totals:         0       0       0       0       0       0       0
  5167 ;;Total ram usage:        0 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    4
  5170 ;; This function calls:
  5171 ;;		Nothing
  5172 ;; This function is called by:
  5173 ;;		_SYSTEM_Initialize
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text29
  5178  001570                     __ptext29:
  5179                           	opt stack 0
  5180  001570                     _OSCILLATOR_Initialize:
  5181                           	opt stack 25
  5182                           
  5183                           ;mcc.c: 68: OSCCON = 0x70;
  5184                           
  5185                           ; BSR set to: 15
  5186                           ;incstack = 0
  5187  001570  0E70               	movlw	112
  5188  001572  6ED3               	movwf	4051,c	;volatile
  5189                           
  5190                           ;mcc.c: 70: OSCCON2 = 0x04;
  5191  001574  0E04               	movlw	4
  5192  001576  6ED2               	movwf	4050,c	;volatile
  5193                           
  5194                           ;mcc.c: 72: OSCTUNE = 0x40;
  5195  001578  0E40               	movlw	64
  5196  00157A  6E9B               	movwf	3995,c	;volatile
  5197  00157C                     
  5198                           ;mcc.c: 75: {
  5199  00157C  BED2               	btfsc	4050,7,c	;volatile
  5200  00157E  0012               	return	
  5201  001580  D7FD               	goto	l39
  5202  001582                     __end_of_OSCILLATOR_Initialize:
  5203                           	opt stack 0
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           prodh	equ	0xFF4
  5209                           prodl	equ	0xFF3
  5210                           intcon	equ	0xFF2
  5211                           intcon2	equ	0xFF1
  5212                           postinc0	equ	0xFEE
  5213                           wreg	equ	0xFE8
  5214                           postinc1	equ	0xFE6
  5215                           postdec1	equ	0xFE5
  5216                           fsr1h	equ	0xFE2
  5217                           fsr1l	equ	0xFE1
  5218                           indf2	equ	0xFDF
  5219                           postinc2	equ	0xFDE
  5220                           postdec2	equ	0xFDD
  5221                           fsr2h	equ	0xFDA
  5222                           fsr2l	equ	0xFD9
  5223                           status	equ	0xFD8
  5224                           
  5225 ;; *************** function _INTERRUPT_Initialize *****************
  5226 ;; Defined at:
  5227 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;		None
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;		None
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  1    wreg      void 
  5234 ;; Registers used:
  5235 ;;		None
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5241 ;;      Params:         0       0       0       0       0       0       0
  5242 ;;      Locals:         0       0       0       0       0       0       0
  5243 ;;      Temps:          0       0       0       0       0       0       0
  5244 ;;      Totals:         0       0       0       0       0       0       0
  5245 ;;Total ram usage:        0 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    4
  5248 ;; This function calls:
  5249 ;;		Nothing
  5250 ;; This function is called by:
  5251 ;;		_SYSTEM_Initialize
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text30
  5256  001618                     __ptext30:
  5257                           	opt stack 0
  5258  001618                     _INTERRUPT_Initialize:
  5259                           	opt stack 25
  5260                           
  5261                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5262                           
  5263                           ;incstack = 0
  5264  001618  9ED0               	bcf	4048,7,c	;volatile
  5265  00161A  0012               	return		;funcret
  5266  00161C                     __end_of_INTERRUPT_Initialize:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           postinc1	equ	0xFE6
  5279                           postdec1	equ	0xFE5
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function _EXT_INT_Initialize *****************
  5290 ;; Defined at:
  5291 ;;		line 113 in file "mcc_generated_files/ext_int.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5305 ;;      Params:         0       0       0       0       0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0
  5308 ;;      Totals:         0       0       0       0       0       0       0
  5309 ;;Total ram usage:        0 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    5
  5312 ;; This function calls:
  5313 ;;		_INT0_SetInterruptHandler
  5314 ;;		_INT1_SetInterruptHandler
  5315 ;;		_INT2_SetInterruptHandler
  5316 ;; This function is called by:
  5317 ;;		_SYSTEM_Initialize
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           	psect	text31
  5322  001334                     __ptext31:
  5323                           	opt stack 0
  5324  001334                     _EXT_INT_Initialize:
  5325                           	opt stack 24
  5326                           
  5327                           ;ext_int.c: 118: (INTCONbits.INT0IF = 0);
  5328                           
  5329                           ;incstack = 0
  5330  001334  92F2               	bcf	intcon,1,c	;volatile
  5331                           
  5332                           ;ext_int.c: 119: (INTCON2bits.INTEDG0 = 1);
  5333  001336  8CF1               	bsf	intcon2,6,c	;volatile
  5334                           
  5335                           ;ext_int.c: 121: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  5336  001338  0E24               	movlw	low _INT0_DefaultInterruptHandler
  5337  00133A  6E13               	movwf	INT0_SetInterruptHandler@InterruptHandler,c
  5338  00133C  0E16               	movlw	high _INT0_DefaultInterruptHandler
  5339  00133E  6E14               	movwf	INT0_SetInterruptHandler@InterruptHandler+1,c
  5340  001340  ECDB  F00A         	call	_INT0_SetInterruptHandler	;wreg free
  5341                           
  5342                           ;ext_int.c: 122: (INTCONbits.INT0IE = 1);
  5343  001344  88F2               	bsf	intcon,4,c	;volatile
  5344                           
  5345                           ;ext_int.c: 127: (INTCON3bits.INT1IF = 0);
  5346  001346  90F0               	bcf	intcon3,0,c	;volatile
  5347                           
  5348                           ;ext_int.c: 128: (INTCON2bits.INTEDG1 = 0);
  5349  001348  9AF1               	bcf	intcon2,5,c	;volatile
  5350                           
  5351                           ;ext_int.c: 130: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  5352  00134A  0E22               	movlw	low _INT1_DefaultInterruptHandler
  5353  00134C  6E13               	movwf	INT1_SetInterruptHandler@InterruptHandler,c
  5354  00134E  0E16               	movlw	high _INT1_DefaultInterruptHandler
  5355  001350  6E14               	movwf	INT1_SetInterruptHandler@InterruptHandler+1,c
  5356  001352  ECD6  F00A         	call	_INT1_SetInterruptHandler	;wreg free
  5357                           
  5358                           ;ext_int.c: 131: (INTCON3bits.INT1IE = 1);
  5359  001356  86F0               	bsf	intcon3,3,c	;volatile
  5360                           
  5361                           ;ext_int.c: 136: (INTCON3bits.INT2IF = 0);
  5362  001358  92F0               	bcf	intcon3,1,c	;volatile
  5363                           
  5364                           ;ext_int.c: 137: (INTCON2bits.INTEDG2 = 0);
  5365  00135A  98F1               	bcf	intcon2,4,c	;volatile
  5366                           
  5367                           ;ext_int.c: 139: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5368  00135C  0E20               	movlw	low _INT2_DefaultInterruptHandler
  5369  00135E  6E13               	movwf	INT2_SetInterruptHandler@InterruptHandler,c
  5370  001360  0E16               	movlw	high _INT2_DefaultInterruptHandler
  5371  001362  6E14               	movwf	INT2_SetInterruptHandler@InterruptHandler+1,c
  5372  001364  ECD1  F00A         	call	_INT2_SetInterruptHandler	;wreg free
  5373                           
  5374                           ;ext_int.c: 140: (INTCON3bits.INT2IE = 1);
  5375  001368  88F0               	bsf	intcon3,4,c	;volatile
  5376  00136A  0012               	return		;funcret
  5377  00136C                     __end_of_EXT_INT_Initialize:
  5378                           	opt stack 0
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           intcon2	equ	0xFF1
  5387                           intcon3	equ	0xFF0
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           postinc1	equ	0xFE6
  5391                           postdec1	equ	0xFE5
  5392                           fsr1h	equ	0xFE2
  5393                           fsr1l	equ	0xFE1
  5394                           indf2	equ	0xFDF
  5395                           postinc2	equ	0xFDE
  5396                           postdec2	equ	0xFDD
  5397                           fsr2h	equ	0xFDA
  5398                           fsr2l	equ	0xFD9
  5399                           status	equ	0xFD8
  5400                           
  5401 ;; *************** function _INT2_SetInterruptHandler *****************
  5402 ;; Defined at:
  5403 ;;		line 104 in file "mcc_generated_files/ext_int.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;  InterruptHan    2   18[COMRAM] PTR FTN()void 
  5406 ;;		 -> INT2_DefaultInterruptHandler(1), 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  1    wreg      void 
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5418 ;;      Params:         2       0       0       0       0       0       0
  5419 ;;      Locals:         0       0       0       0       0       0       0
  5420 ;;      Temps:          0       0       0       0       0       0       0
  5421 ;;      Totals:         2       0       0       0       0       0       0
  5422 ;;Total ram usage:        2 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    4
  5425 ;; This function calls:
  5426 ;;		Nothing
  5427 ;; This function is called by:
  5428 ;;		_EXT_INT_Initialize
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text32
  5433  0015A2                     __ptext32:
  5434                           	opt stack 0
  5435  0015A2                     _INT2_SetInterruptHandler:
  5436                           	opt stack 24
  5437                           
  5438                           ;ext_int.c: 105: INT2_InterruptHandler = InterruptHandler;
  5439                           
  5440                           ;incstack = 0
  5441  0015A2  C013  F03B         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5442  0015A6  C014  F03C         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5443  0015AA  0012               	return		;funcret
  5444  0015AC                     __end_of_INT2_SetInterruptHandler:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           intcon	equ	0xFF2
  5453                           intcon2	equ	0xFF1
  5454                           intcon3	equ	0xFF0
  5455                           postinc0	equ	0xFEE
  5456                           wreg	equ	0xFE8
  5457                           postinc1	equ	0xFE6
  5458                           postdec1	equ	0xFE5
  5459                           fsr1h	equ	0xFE2
  5460                           fsr1l	equ	0xFE1
  5461                           indf2	equ	0xFDF
  5462                           postinc2	equ	0xFDE
  5463                           postdec2	equ	0xFDD
  5464                           fsr2h	equ	0xFDA
  5465                           fsr2l	equ	0xFD9
  5466                           status	equ	0xFD8
  5467                           
  5468 ;; *************** function _INT1_SetInterruptHandler *****************
  5469 ;; Defined at:
  5470 ;;		line 78 in file "mcc_generated_files/ext_int.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  InterruptHan    2   18[COMRAM] PTR FTN()void 
  5473 ;;		 -> INT1_DefaultInterruptHandler(1), 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  1    wreg      void 
  5478 ;; Registers used:
  5479 ;;		wreg, status,2, status,0
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5485 ;;      Params:         2       0       0       0       0       0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0
  5488 ;;      Totals:         2       0       0       0       0       0       0
  5489 ;;Total ram usage:        2 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    4
  5492 ;; This function calls:
  5493 ;;		Nothing
  5494 ;; This function is called by:
  5495 ;;		_EXT_INT_Initialize
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text33
  5500  0015AC                     __ptext33:
  5501                           	opt stack 0
  5502  0015AC                     _INT1_SetInterruptHandler:
  5503                           	opt stack 24
  5504                           
  5505                           ;ext_int.c: 79: INT1_InterruptHandler = InterruptHandler;
  5506                           
  5507                           ;incstack = 0
  5508  0015AC  C013  F03D         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5509  0015B0  C014  F03E         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5510  0015B4  0012               	return		;funcret
  5511  0015B6                     __end_of_INT1_SetInterruptHandler:
  5512                           	opt stack 0
  5513                           tblptru	equ	0xFF8
  5514                           tblptrh	equ	0xFF7
  5515                           tblptrl	equ	0xFF6
  5516                           tablat	equ	0xFF5
  5517                           prodh	equ	0xFF4
  5518                           prodl	equ	0xFF3
  5519                           intcon	equ	0xFF2
  5520                           intcon2	equ	0xFF1
  5521                           intcon3	equ	0xFF0
  5522                           postinc0	equ	0xFEE
  5523                           wreg	equ	0xFE8
  5524                           postinc1	equ	0xFE6
  5525                           postdec1	equ	0xFE5
  5526                           fsr1h	equ	0xFE2
  5527                           fsr1l	equ	0xFE1
  5528                           indf2	equ	0xFDF
  5529                           postinc2	equ	0xFDE
  5530                           postdec2	equ	0xFDD
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _INT0_SetInterruptHandler *****************
  5536 ;; Defined at:
  5537 ;;		line 52 in file "mcc_generated_files/ext_int.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  InterruptHan    2   18[COMRAM] PTR FTN()void 
  5540 ;;		 -> INT0_DefaultInterruptHandler(1), 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;		None
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5552 ;;      Params:         2       0       0       0       0       0       0
  5553 ;;      Locals:         0       0       0       0       0       0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0
  5555 ;;      Totals:         2       0       0       0       0       0       0
  5556 ;;Total ram usage:        2 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    4
  5559 ;; This function calls:
  5560 ;;		Nothing
  5561 ;; This function is called by:
  5562 ;;		_EXT_INT_Initialize
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text34
  5567  0015B6                     __ptext34:
  5568                           	opt stack 0
  5569  0015B6                     _INT0_SetInterruptHandler:
  5570                           	opt stack 24
  5571                           
  5572                           ;ext_int.c: 53: INT0_InterruptHandler = InterruptHandler;
  5573                           
  5574                           ;incstack = 0
  5575  0015B6  C013  F03F         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  5576  0015BA  C014  F040         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  5577  0015BE  0012               	return		;funcret
  5578  0015C0                     __end_of_INT0_SetInterruptHandler:
  5579                           	opt stack 0
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           intcon2	equ	0xFF1
  5588                           intcon3	equ	0xFF0
  5589                           postinc0	equ	0xFEE
  5590                           wreg	equ	0xFE8
  5591                           postinc1	equ	0xFE6
  5592                           postdec1	equ	0xFE5
  5593                           fsr1h	equ	0xFE2
  5594                           fsr1l	equ	0xFE1
  5595                           indf2	equ	0xFDF
  5596                           postinc2	equ	0xFDE
  5597                           postdec2	equ	0xFDD
  5598                           fsr2h	equ	0xFDA
  5599                           fsr2l	equ	0xFD9
  5600                           status	equ	0xFD8
  5601                           
  5602 ;; *************** function _EUSART1_Initialize *****************
  5603 ;; Defined at:
  5604 ;;		line 85 in file "mcc_generated_files/eusart1.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;		None
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;		None
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      void 
  5611 ;; Registers used:
  5612 ;;		wreg, status,2, status,0, cstack
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5618 ;;      Params:         0       0       0       0       0       0       0
  5619 ;;      Locals:         0       0       0       0       0       0       0
  5620 ;;      Temps:          0       0       0       0       0       0       0
  5621 ;;      Totals:         0       0       0       0       0       0       0
  5622 ;;Total ram usage:        0 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:    5
  5625 ;; This function calls:
  5626 ;;		_EUSART1_SetErrorHandler
  5627 ;;		_EUSART1_SetFramingErrorHandler
  5628 ;;		_EUSART1_SetOverrunErrorHandler
  5629 ;;		_EUSART1_SetRxInterruptHandler
  5630 ;;		_EUSART1_SetTxInterruptHandler
  5631 ;; This function is called by:
  5632 ;;		_SYSTEM_Initialize
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           	psect	text35
  5637  00112A                     __ptext35:
  5638                           	opt stack 0
  5639  00112A                     _EUSART1_Initialize:
  5640                           	opt stack 24
  5641                           
  5642                           ;eusart1.c: 88: PIE1bits.RC1IE = 0;
  5643                           
  5644                           ;incstack = 0
  5645  00112A  9A9D               	bcf	3997,5,c	;volatile
  5646                           
  5647                           ;eusart1.c: 89: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  5648  00112C  0EE6               	movlw	low _EUSART1_Receive_ISR
  5649  00112E  6E13               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler,c
  5650  001130  0E0E               	movlw	high _EUSART1_Receive_ISR
  5651  001132  6E14               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1,c
  5652  001134  ECE5  F00A         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  5653                           
  5654                           ;eusart1.c: 90: PIE1bits.TX1IE = 0;
  5655  001138  989D               	bcf	3997,4,c	;volatile
  5656                           
  5657                           ;eusart1.c: 91: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  5658  00113A  0ED0               	movlw	low _EUSART1_Transmit_ISR
  5659  00113C  6E13               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler,c
  5660  00113E  0E13               	movlw	high _EUSART1_Transmit_ISR
  5661  001140  6E14               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler+1,c
  5662  001142  ECE0  F00A         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  5663                           
  5664                           ;eusart1.c: 95: BAUDCON1 = 0x08;
  5665  001146  0E08               	movlw	8
  5666  001148  6EB8               	movwf	4024,c	;volatile
  5667                           
  5668                           ;eusart1.c: 98: RCSTA1 = 0x80;
  5669  00114A  0E80               	movlw	128
  5670  00114C  6EAB               	movwf	4011,c	;volatile
  5671                           
  5672                           ;eusart1.c: 101: TXSTA1 = 0x24;
  5673  00114E  0E24               	movlw	36
  5674  001150  6EAC               	movwf	4012,c	;volatile
  5675                           
  5676                           ;eusart1.c: 104: SPBRG1 = 0x82;
  5677  001152  0E82               	movlw	130
  5678  001154  6EAF               	movwf	4015,c	;volatile
  5679                           
  5680                           ;eusart1.c: 107: SPBRGH1 = 0x06;
  5681  001156  0E06               	movlw	6
  5682  001158  6EB0               	movwf	4016,c	;volatile
  5683                           
  5684                           ;eusart1.c: 110: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
  5685  00115A  0E26               	movlw	low _EUSART1_DefaultFramingErrorHandler
  5686  00115C  6E13               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler,c
  5687  00115E  0E16               	movlw	high _EUSART1_DefaultFramingErrorHandler
  5688  001160  6E14               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler+1,c
  5689  001162  ECEF  F00A         	call	_EUSART1_SetFramingErrorHandler	;wreg free
  5690                           
  5691                           ;eusart1.c: 111: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
  5692  001166  0E08               	movlw	low _EUSART1_DefaultOverrunErrorHandler
  5693  001168  6E13               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler,c
  5694  00116A  0E16               	movlw	high _EUSART1_DefaultOverrunErrorHandler
  5695  00116C  6E14               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler+1,c
  5696  00116E  ECEA  F00A         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
  5697                           
  5698                           ;eusart1.c: 112: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
  5699  001172  0E0E               	movlw	low _EUSART1_DefaultErrorHandler
  5700  001174  6E13               	movwf	EUSART1_SetErrorHandler@interruptHandler,c
  5701  001176  0E16               	movlw	high _EUSART1_DefaultErrorHandler
  5702  001178  6E14               	movwf	EUSART1_SetErrorHandler@interruptHandler+1,c
  5703  00117A  ECF4  F00A         	call	_EUSART1_SetErrorHandler	;wreg free
  5704                           
  5705                           ;eusart1.c: 114: eusart1RxLastError.status = 0;
  5706  00117E  0E00               	movlw	0
  5707  001180  6E45               	movwf	_eusart1RxLastError,c	;volatile
  5708                           
  5709                           ;eusart1.c: 117: eusart1TxHead = 0;
  5710  001182  0E00               	movlw	0
  5711  001184  6E4B               	movwf	_eusart1TxHead,c	;volatile
  5712                           
  5713                           ;eusart1.c: 118: eusart1TxTail = 0;
  5714  001186  0E00               	movlw	0
  5715  001188  6E4A               	movwf	_eusart1TxTail,c	;volatile
  5716                           
  5717                           ;eusart1.c: 119: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  5718  00118A  0E08               	movlw	8
  5719  00118C  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  5720                           
  5721                           ;eusart1.c: 121: eusart1RxHead = 0;
  5722  00118E  0E00               	movlw	0
  5723  001190  6E48               	movwf	_eusart1RxHead,c	;volatile
  5724                           
  5725                           ;eusart1.c: 122: eusart1RxTail = 0;
  5726  001192  0E00               	movlw	0
  5727  001194  6E47               	movwf	_eusart1RxTail,c	;volatile
  5728                           
  5729                           ;eusart1.c: 123: eusart1RxCount = 0;
  5730  001196  0E00               	movlw	0
  5731  001198  6E46               	movwf	_eusart1RxCount,c	;volatile
  5732                           
  5733                           ;eusart1.c: 126: PIE1bits.RC1IE = 1;
  5734  00119A  8A9D               	bsf	3997,5,c	;volatile
  5735  00119C  0012               	return		;funcret
  5736  00119E                     __end_of_EUSART1_Initialize:
  5737                           	opt stack 0
  5738                           tblptru	equ	0xFF8
  5739                           tblptrh	equ	0xFF7
  5740                           tblptrl	equ	0xFF6
  5741                           tablat	equ	0xFF5
  5742                           prodh	equ	0xFF4
  5743                           prodl	equ	0xFF3
  5744                           intcon	equ	0xFF2
  5745                           intcon2	equ	0xFF1
  5746                           intcon3	equ	0xFF0
  5747                           postinc0	equ	0xFEE
  5748                           wreg	equ	0xFE8
  5749                           postinc1	equ	0xFE6
  5750                           postdec1	equ	0xFE5
  5751                           fsr1h	equ	0xFE2
  5752                           fsr1l	equ	0xFE1
  5753                           indf2	equ	0xFDF
  5754                           postinc2	equ	0xFDE
  5755                           postdec2	equ	0xFDD
  5756                           fsr2h	equ	0xFDA
  5757                           fsr2l	equ	0xFD9
  5758                           status	equ	0xFD8
  5759                           
  5760 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  5761 ;; Defined at:
  5762 ;;		line 282 in file "mcc_generated_files/eusart1.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  5765 ;;		 -> EUSART1_Transmit_ISR(1), 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5777 ;;      Params:         2       0       0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0
  5780 ;;      Totals:         2       0       0       0       0       0       0
  5781 ;;Total ram usage:        2 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    4
  5784 ;; This function calls:
  5785 ;;		Nothing
  5786 ;; This function is called by:
  5787 ;;		_EUSART1_Initialize
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text36
  5792  0015C0                     __ptext36:
  5793                           	opt stack 0
  5794  0015C0                     _EUSART1_SetTxInterruptHandler:
  5795                           	opt stack 24
  5796                           
  5797                           ;eusart1.c: 283: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  5798                           
  5799                           ;incstack = 0
  5800  0015C0  C013  F043         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  5801  0015C4  C014  F044         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  5802  0015C8  0012               	return		;funcret
  5803  0015CA                     __end_of_EUSART1_SetTxInterruptHandler:
  5804                           	opt stack 0
  5805                           tblptru	equ	0xFF8
  5806                           tblptrh	equ	0xFF7
  5807                           tblptrl	equ	0xFF6
  5808                           tablat	equ	0xFF5
  5809                           prodh	equ	0xFF4
  5810                           prodl	equ	0xFF3
  5811                           intcon	equ	0xFF2
  5812                           intcon2	equ	0xFF1
  5813                           intcon3	equ	0xFF0
  5814                           postinc0	equ	0xFEE
  5815                           wreg	equ	0xFE8
  5816                           postinc1	equ	0xFE6
  5817                           postdec1	equ	0xFE5
  5818                           fsr1h	equ	0xFE2
  5819                           fsr1l	equ	0xFE1
  5820                           indf2	equ	0xFDF
  5821                           postinc2	equ	0xFDE
  5822                           postdec2	equ	0xFDD
  5823                           fsr2h	equ	0xFDA
  5824                           fsr2l	equ	0xFD9
  5825                           status	equ	0xFD8
  5826                           
  5827 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  5828 ;; Defined at:
  5829 ;;		line 286 in file "mcc_generated_files/eusart1.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  5832 ;;		 -> EUSART1_Receive_ISR(1), 
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;		None
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  1    wreg      void 
  5837 ;; Registers used:
  5838 ;;		wreg, status,2, status,0
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5844 ;;      Params:         2       0       0       0       0       0       0
  5845 ;;      Locals:         0       0       0       0       0       0       0
  5846 ;;      Temps:          0       0       0       0       0       0       0
  5847 ;;      Totals:         2       0       0       0       0       0       0
  5848 ;;Total ram usage:        2 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:    4
  5851 ;; This function calls:
  5852 ;;		Nothing
  5853 ;; This function is called by:
  5854 ;;		_EUSART1_Initialize
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           	psect	text37
  5859  0015CA                     __ptext37:
  5860                           	opt stack 0
  5861  0015CA                     _EUSART1_SetRxInterruptHandler:
  5862                           	opt stack 24
  5863                           
  5864                           ;eusart1.c: 287: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  5865                           
  5866                           ;incstack = 0
  5867  0015CA  C013  F041         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  5868  0015CE  C014  F042         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  5869  0015D2  0012               	return		;funcret
  5870  0015D4                     __end_of_EUSART1_SetRxInterruptHandler:
  5871                           	opt stack 0
  5872                           tblptru	equ	0xFF8
  5873                           tblptrh	equ	0xFF7
  5874                           tblptrl	equ	0xFF6
  5875                           tablat	equ	0xFF5
  5876                           prodh	equ	0xFF4
  5877                           prodl	equ	0xFF3
  5878                           intcon	equ	0xFF2
  5879                           intcon2	equ	0xFF1
  5880                           intcon3	equ	0xFF0
  5881                           postinc0	equ	0xFEE
  5882                           wreg	equ	0xFE8
  5883                           postinc1	equ	0xFE6
  5884                           postdec1	equ	0xFE5
  5885                           fsr1h	equ	0xFE2
  5886                           fsr1l	equ	0xFE1
  5887                           indf2	equ	0xFDF
  5888                           postinc2	equ	0xFDE
  5889                           postdec2	equ	0xFDD
  5890                           fsr2h	equ	0xFDA
  5891                           fsr2l	equ	0xFD9
  5892                           status	equ	0xFD8
  5893                           
  5894 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
  5895 ;; Defined at:
  5896 ;;		line 274 in file "mcc_generated_files/eusart1.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  5899 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;		None
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  1    wreg      void 
  5904 ;; Registers used:
  5905 ;;		wreg, status,2, status,0
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5911 ;;      Params:         2       0       0       0       0       0       0
  5912 ;;      Locals:         0       0       0       0       0       0       0
  5913 ;;      Temps:          0       0       0       0       0       0       0
  5914 ;;      Totals:         2       0       0       0       0       0       0
  5915 ;;Total ram usage:        2 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    4
  5918 ;; This function calls:
  5919 ;;		Nothing
  5920 ;; This function is called by:
  5921 ;;		_EUSART1_Initialize
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	text38
  5926  0015D4                     __ptext38:
  5927                           	opt stack 0
  5928  0015D4                     _EUSART1_SetOverrunErrorHandler:
  5929                           	opt stack 24
  5930                           
  5931                           ;eusart1.c: 275: EUSART1_OverrunErrorHandler = interruptHandler;
  5932                           
  5933                           ;incstack = 0
  5934  0015D4  C013  F0AA         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
  5935  0015D8  C014  F0AB         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
  5936  0015DC  0012               	return		;funcret
  5937  0015DE                     __end_of_EUSART1_SetOverrunErrorHandler:
  5938                           	opt stack 0
  5939                           tblptru	equ	0xFF8
  5940                           tblptrh	equ	0xFF7
  5941                           tblptrl	equ	0xFF6
  5942                           tablat	equ	0xFF5
  5943                           prodh	equ	0xFF4
  5944                           prodl	equ	0xFF3
  5945                           intcon	equ	0xFF2
  5946                           intcon2	equ	0xFF1
  5947                           intcon3	equ	0xFF0
  5948                           postinc0	equ	0xFEE
  5949                           wreg	equ	0xFE8
  5950                           postinc1	equ	0xFE6
  5951                           postdec1	equ	0xFE5
  5952                           fsr1h	equ	0xFE2
  5953                           fsr1l	equ	0xFE1
  5954                           indf2	equ	0xFDF
  5955                           postinc2	equ	0xFDE
  5956                           postdec2	equ	0xFDD
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
  5962 ;; Defined at:
  5963 ;;		line 270 in file "mcc_generated_files/eusart1.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  5966 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      void 
  5971 ;; Registers used:
  5972 ;;		wreg, status,2, status,0
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5978 ;;      Params:         2       0       0       0       0       0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0
  5981 ;;      Totals:         2       0       0       0       0       0       0
  5982 ;;Total ram usage:        2 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    4
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_EUSART1_Initialize
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text39
  5993  0015DE                     __ptext39:
  5994                           	opt stack 0
  5995  0015DE                     _EUSART1_SetFramingErrorHandler:
  5996                           	opt stack 24
  5997                           
  5998                           ;eusart1.c: 271: EUSART1_FramingErrorHandler = interruptHandler;
  5999                           
  6000                           ;incstack = 0
  6001  0015DE  C013  F0AC         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
  6002  0015E2  C014  F0AD         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
  6003  0015E6  0012               	return		;funcret
  6004  0015E8                     __end_of_EUSART1_SetFramingErrorHandler:
  6005                           	opt stack 0
  6006                           tblptru	equ	0xFF8
  6007                           tblptrh	equ	0xFF7
  6008                           tblptrl	equ	0xFF6
  6009                           tablat	equ	0xFF5
  6010                           prodh	equ	0xFF4
  6011                           prodl	equ	0xFF3
  6012                           intcon	equ	0xFF2
  6013                           intcon2	equ	0xFF1
  6014                           intcon3	equ	0xFF0
  6015                           postinc0	equ	0xFEE
  6016                           wreg	equ	0xFE8
  6017                           postinc1	equ	0xFE6
  6018                           postdec1	equ	0xFE5
  6019                           fsr1h	equ	0xFE2
  6020                           fsr1l	equ	0xFE1
  6021                           indf2	equ	0xFDF
  6022                           postinc2	equ	0xFDE
  6023                           postdec2	equ	0xFDD
  6024                           fsr2h	equ	0xFDA
  6025                           fsr2l	equ	0xFD9
  6026                           status	equ	0xFD8
  6027                           
  6028 ;; *************** function _EUSART1_SetErrorHandler *****************
  6029 ;; Defined at:
  6030 ;;		line 278 in file "mcc_generated_files/eusart1.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  6033 ;;		 -> EUSART1_DefaultErrorHandler(1), 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;		None
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6045 ;;      Params:         2       0       0       0       0       0       0
  6046 ;;      Locals:         0       0       0       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0
  6048 ;;      Totals:         2       0       0       0       0       0       0
  6049 ;;Total ram usage:        2 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    4
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_EUSART1_Initialize
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           	psect	text40
  6060  0015E8                     __ptext40:
  6061                           	opt stack 0
  6062  0015E8                     _EUSART1_SetErrorHandler:
  6063                           	opt stack 24
  6064                           
  6065                           ;eusart1.c: 279: EUSART1_ErrorHandler = interruptHandler;
  6066                           
  6067                           ;incstack = 0
  6068  0015E8  C013  F0A8         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
  6069  0015EC  C014  F0A9         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
  6070  0015F0  0012               	return		;funcret
  6071  0015F2                     __end_of_EUSART1_SetErrorHandler:
  6072                           	opt stack 0
  6073                           tblptru	equ	0xFF8
  6074                           tblptrh	equ	0xFF7
  6075                           tblptrl	equ	0xFF6
  6076                           tablat	equ	0xFF5
  6077                           prodh	equ	0xFF4
  6078                           prodl	equ	0xFF3
  6079                           intcon	equ	0xFF2
  6080                           intcon2	equ	0xFF1
  6081                           intcon3	equ	0xFF0
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           postinc1	equ	0xFE6
  6085                           postdec1	equ	0xFE5
  6086                           fsr1h	equ	0xFE2
  6087                           fsr1l	equ	0xFE1
  6088                           indf2	equ	0xFDF
  6089                           postinc2	equ	0xFDE
  6090                           postdec2	equ	0xFDD
  6091                           fsr2h	equ	0xFDA
  6092                           fsr2l	equ	0xFD9
  6093                           status	equ	0xFD8
  6094                           
  6095 ;; *************** function _ADC_Initialize *****************
  6096 ;; Defined at:
  6097 ;;		line 60 in file "mcc_generated_files/adc.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;		None
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;		None
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  1    wreg      void 
  6104 ;; Registers used:
  6105 ;;		wreg, status,2
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6111 ;;      Params:         0       0       0       0       0       0       0
  6112 ;;      Locals:         0       0       0       0       0       0       0
  6113 ;;      Temps:          0       0       0       0       0       0       0
  6114 ;;      Totals:         0       0       0       0       0       0       0
  6115 ;;Total ram usage:        0 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    4
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		_SYSTEM_Initialize
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text41
  6126  001510                     __ptext41:
  6127                           	opt stack 0
  6128  001510                     _ADC_Initialize:
  6129                           	opt stack 25
  6130                           
  6131                           ;adc.c: 65: ADCON0 = 0x01;
  6132                           
  6133                           ;incstack = 0
  6134  001510  0E01               	movlw	1
  6135  001512  6EC2               	movwf	4034,c	;volatile
  6136                           
  6137                           ;adc.c: 68: ADCON1 = 0x00;
  6138  001514  0E00               	movlw	0
  6139  001516  6EC1               	movwf	4033,c	;volatile
  6140                           
  6141                           ;adc.c: 71: ADCON2 = 0x86;
  6142  001518  0E86               	movlw	134
  6143  00151A  6EC0               	movwf	4032,c	;volatile
  6144                           
  6145                           ;adc.c: 74: ADRESL = 0x00;
  6146  00151C  0E00               	movlw	0
  6147  00151E  6EC3               	movwf	4035,c	;volatile
  6148                           
  6149                           ;adc.c: 77: ADRESH = 0x00;
  6150  001520  0E00               	movlw	0
  6151  001522  6EC4               	movwf	4036,c	;volatile
  6152  001524  0012               	return		;funcret
  6153  001526                     __end_of_ADC_Initialize:
  6154                           	opt stack 0
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           intcon	equ	0xFF2
  6162                           intcon2	equ	0xFF1
  6163                           intcon3	equ	0xFF0
  6164                           postinc0	equ	0xFEE
  6165                           wreg	equ	0xFE8
  6166                           postinc1	equ	0xFE6
  6167                           postdec1	equ	0xFE5
  6168                           fsr1h	equ	0xFE2
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           fsr2h	equ	0xFDA
  6174                           fsr2l	equ	0xFD9
  6175                           status	equ	0xFD8
  6176                           
  6177 ;; *************** function _INTERRUPT_InterruptManager *****************
  6178 ;; Defined at:
  6179 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6193 ;;      Params:         0       0       0       0       0       0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0
  6195 ;;      Temps:         18       0       0       0       0       0       0
  6196 ;;      Totals:        18       0       0       0       0       0       0
  6197 ;;Total ram usage:       18 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    3
  6200 ;; This function calls:
  6201 ;;		Absolute function
  6202 ;;		_EUSART1_Receive_ISR
  6203 ;;		_EUSART1_Transmit_ISR
  6204 ;;		_INT0_ISR
  6205 ;;		_INT1_ISR
  6206 ;;		_INT2_ISR
  6207 ;;		_PIN_MANAGER_IOC
  6208 ;; This function is called by:
  6209 ;;		Interrupt level 2
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	intcode
  6214  000008                     __pintcode:
  6215                           	opt stack 0
  6216  000008                     _INTERRUPT_InterruptManager:
  6217                           	opt stack 24
  6218                           
  6219                           ;incstack = 0
  6220  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6221  00000A  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManager
  6222  00000E  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6223  000012  CFE9 F003          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6224  000016  CFEA F004          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6225  00001A  CFE1 F005          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6226  00001E  CFE2 F006          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6227  000022  CFD9 F007          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6228  000026  CFDA F008          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6229  00002A  CFF3 F009          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6230  00002E  CFF4 F00A          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6231  000032  CFF6 F00B          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6232  000036  CFF7 F00C          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6233  00003A  CFF8 F00D          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6234  00003E  CFF5 F00E          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6235  000042  C04D  F00F         	movff	btemp,??_INTERRUPT_InterruptManager+14
  6236  000046  C04E  F010         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  6237  00004A  C04F  F011         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  6238  00004E  C050  F012         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  6239                           
  6240                           ;interrupt_manager.c: 61: if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  6241  000052  B8F2               	btfsc	intcon,4,c	;volatile
  6242  000054  A2F2               	btfss	intcon,1,c	;volatile
  6243  000056  D003               	goto	i2l175
  6244                           
  6245                           ;interrupt_manager.c: 62: {
  6246                           ;interrupt_manager.c: 63: INT0_ISR();
  6247  000058  ECFD  F00A         	call	_INT0_ISR	;wreg free
  6248                           
  6249                           ;interrupt_manager.c: 64: }
  6250  00005C  D02E               	goto	i2u262_49
  6251  00005E                     i2l175:
  6252                           
  6253                           ;interrupt_manager.c: 65: else if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
  6254  00005E  B6F0               	btfsc	intcon3,3,c	;volatile
  6255  000060  A0F0               	btfss	intcon3,0,c	;volatile
  6256  000062  D003               	goto	i2l177
  6257                           
  6258                           ;interrupt_manager.c: 66: {
  6259                           ;interrupt_manager.c: 67: INT1_ISR();
  6260  000064  ECC1  F00A         	call	_INT1_ISR	;wreg free
  6261                           
  6262                           ;interrupt_manager.c: 68: }
  6263  000068  D028               	goto	i2u262_49
  6264  00006A                     i2l177:
  6265                           
  6266                           ;interrupt_manager.c: 69: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
  6267  00006A  B8F0               	btfsc	intcon3,4,c	;volatile
  6268  00006C  A2F0               	btfss	intcon3,1,c	;volatile
  6269  00006E  D003               	goto	i2l179
  6270                           
  6271                           ;interrupt_manager.c: 70: {
  6272                           ;interrupt_manager.c: 71: INT2_ISR();
  6273  000070  ECF9  F00A         	call	_INT2_ISR	;wreg free
  6274                           
  6275                           ;interrupt_manager.c: 72: }
  6276  000074  D022               	goto	i2u262_49
  6277  000076                     i2l179:
  6278                           
  6279                           ;interrupt_manager.c: 73: else if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
  6280  000076  B6F2               	btfsc	intcon,3,c	;volatile
  6281  000078  A0F2               	btfss	intcon,0,c	;volatile
  6282  00007A  D003               	goto	i2l181
  6283                           
  6284                           ;interrupt_manager.c: 74: {
  6285                           ;interrupt_manager.c: 75: PIN_MANAGER_IOC();
  6286  00007C  EC0E  F00B         	call	_PIN_MANAGER_IOC	;wreg free
  6287                           
  6288                           ;interrupt_manager.c: 76: }
  6289  000080  D01C               	goto	i2u262_49
  6290  000082                     i2l181:
  6291                           
  6292                           ;interrupt_manager.c: 77: else if(INTCONbits.PEIE == 1)
  6293  000082  ACF2               	btfss	intcon,6,c	;volatile
  6294  000084  D01A               	goto	i2u262_49
  6295                           
  6296                           ;interrupt_manager.c: 78: {
  6297                           ;interrupt_manager.c: 79: if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6298  000086  B89D               	btfsc	3997,4,c	;volatile
  6299  000088  A89E               	btfss	3998,4,c	;volatile
  6300  00008A  D008               	goto	i2l184
  6301                           
  6302                           ;interrupt_manager.c: 80: {
  6303                           ;interrupt_manager.c: 81: EUSART1_TxDefaultInterruptHandler();
  6304  00008C  D801               	call	i2u259_48
  6305  00008E  D015               	goto	i2u262_49
  6306  000090                     i2u259_48:
  6307  000090  0005               	push	
  6308  000092  6EFA               	movwf	pclath,c
  6309  000094  5043               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  6310  000096  6EFD               	movwf	tosl,c
  6311  000098  5044               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  6312  00009A  D00A               	goto	L9
  6313  00009C                     i2l184:
  6314                           
  6315                           ;interrupt_manager.c: 83: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6316  00009C  BA9D               	btfsc	3997,5,c	;volatile
  6317  00009E  AA9E               	btfss	3998,5,c	;volatile
  6318  0000A0  D00C               	goto	i2u262_49
  6319                           
  6320                           ;interrupt_manager.c: 84: {
  6321                           ;interrupt_manager.c: 85: EUSART1_RxDefaultInterruptHandler();
  6322  0000A2  D801               	call	i2u262_48
  6323  0000A4  D00A               	goto	i2u262_49
  6324  0000A6                     i2u262_48:
  6325  0000A6  0005               	push	
  6326  0000A8  6EFA               	movwf	pclath,c
  6327  0000AA  5041               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  6328  0000AC  6EFD               	movwf	tosl,c
  6329  0000AE  5042               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  6330  0000B0                     L9:
  6331  0000B0  6EFE               	movwf	tosh,c
  6332  0000B2  50F8               	movf	tblptru,w,c
  6333  0000B4  6EFF               	movwf	tosu,c
  6334  0000B6  50FA               	movf	pclath,w,c
  6335  0000B8  0012               	return		;indir
  6336  0000BA                     i2u262_49:
  6337                           
  6338                           ;interrupt_manager.c: 92: else
  6339                           ;interrupt_manager.c: 93: {
  6340                           
  6341                           ;interrupt_manager.c: 90: }
  6342                           ;interrupt_manager.c: 91: }
  6343                           
  6344                           ;interrupt_manager.c: 87: else
  6345                           ;interrupt_manager.c: 88: {
  6346                           
  6347                           ;interrupt_manager.c: 86: }
  6348  0000BA  C012  F050         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  6349  0000BE  C011  F04F         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  6350  0000C2  C010  F04E         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  6351  0000C6  C00F  F04D         	movff	??_INTERRUPT_InterruptManager+14,btemp
  6352  0000CA  C00E  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6353  0000CE  C00D  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6354  0000D2  C00C  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6355  0000D6  C00B  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6356  0000DA  C00A  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6357  0000DE  C009  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6358  0000E2  C008  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6359  0000E6  C007  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6360  0000EA  C006  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6361  0000EE  C005  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6362  0000F2  C004  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6363  0000F6  C003  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6364  0000FA  C002  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6365  0000FE  C001  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6366  000102  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6367  000104  0011               	retfie		f
  6368  000106                     __end_of_INTERRUPT_InterruptManager:
  6369                           	opt stack 0
  6370                           tosu	equ	0xFFF
  6371                           tosh	equ	0xFFE
  6372                           tosl	equ	0xFFD
  6373                           pclatu	equ	0xFFB
  6374                           pclath	equ	0xFFA
  6375                           tblptru	equ	0xFF8
  6376                           tblptrh	equ	0xFF7
  6377                           tblptrl	equ	0xFF6
  6378                           tablat	equ	0xFF5
  6379                           prodh	equ	0xFF4
  6380                           prodl	equ	0xFF3
  6381                           intcon	equ	0xFF2
  6382                           intcon2	equ	0xFF1
  6383                           intcon3	equ	0xFF0
  6384                           postinc0	equ	0xFEE
  6385                           fsr0h	equ	0xFEA
  6386                           fsr0l	equ	0xFE9
  6387                           wreg	equ	0xFE8
  6388                           postinc1	equ	0xFE6
  6389                           postdec1	equ	0xFE5
  6390                           fsr1h	equ	0xFE2
  6391                           fsr1l	equ	0xFE1
  6392                           indf2	equ	0xFDF
  6393                           postinc2	equ	0xFDE
  6394                           postdec2	equ	0xFDD
  6395                           fsr2h	equ	0xFDA
  6396                           fsr2l	equ	0xFD9
  6397                           status	equ	0xFD8
  6398                           
  6399 ;; *************** function _PIN_MANAGER_IOC *****************
  6400 ;; Defined at:
  6401 ;;		line 101 in file "mcc_generated_files/pin_manager.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;		None
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;		None
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  1    wreg      void 
  6408 ;; Registers used:
  6409 ;;		None
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6415 ;;      Params:         0       0       0       0       0       0       0
  6416 ;;      Locals:         0       0       0       0       0       0       0
  6417 ;;      Temps:          0       0       0       0       0       0       0
  6418 ;;      Totals:         0       0       0       0       0       0       0
  6419 ;;Total ram usage:        0 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; This function calls:
  6422 ;;		Nothing
  6423 ;; This function is called by:
  6424 ;;		_INTERRUPT_InterruptManager
  6425 ;; This function uses a non-reentrant model
  6426 ;;
  6427                           
  6428                           	psect	text43
  6429  00161C                     __ptext43:
  6430                           	opt stack 0
  6431  00161C                     _PIN_MANAGER_IOC:
  6432                           	opt stack 26
  6433                           
  6434                           ;pin_manager.c: 104: INTCONbits.RBIF = 0;
  6435                           
  6436                           ;incstack = 0
  6437  00161C  90F2               	bcf	intcon,0,c	;volatile
  6438  00161E  0012               	return		;funcret
  6439  001620                     __end_of_PIN_MANAGER_IOC:
  6440                           	opt stack 0
  6441                           tosu	equ	0xFFF
  6442                           tosh	equ	0xFFE
  6443                           tosl	equ	0xFFD
  6444                           pclatu	equ	0xFFB
  6445                           pclath	equ	0xFFA
  6446                           tblptru	equ	0xFF8
  6447                           tblptrh	equ	0xFF7
  6448                           tblptrl	equ	0xFF6
  6449                           tablat	equ	0xFF5
  6450                           prodh	equ	0xFF4
  6451                           prodl	equ	0xFF3
  6452                           intcon	equ	0xFF2
  6453                           intcon2	equ	0xFF1
  6454                           intcon3	equ	0xFF0
  6455                           postinc0	equ	0xFEE
  6456                           fsr0h	equ	0xFEA
  6457                           fsr0l	equ	0xFE9
  6458                           wreg	equ	0xFE8
  6459                           postinc1	equ	0xFE6
  6460                           postdec1	equ	0xFE5
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           postinc2	equ	0xFDE
  6465                           postdec2	equ	0xFDD
  6466                           fsr2h	equ	0xFDA
  6467                           fsr2l	equ	0xFD9
  6468                           status	equ	0xFD8
  6469                           
  6470 ;; *************** function _INT2_ISR *****************
  6471 ;; Defined at:
  6472 ;;		line 86 in file "mcc_generated_files/ext_int.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;		None
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;		None
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  1    wreg      void 
  6479 ;; Registers used:
  6480 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6486 ;;      Params:         0       0       0       0       0       0       0
  6487 ;;      Locals:         0       0       0       0       0       0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0
  6489 ;;      Totals:         0       0       0       0       0       0       0
  6490 ;;Total ram usage:        0 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    2
  6493 ;; This function calls:
  6494 ;;		_INT2_CallBack
  6495 ;; This function is called by:
  6496 ;;		_INTERRUPT_InterruptManager
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text44
  6501  0015F2                     __ptext44:
  6502                           	opt stack 0
  6503  0015F2                     _INT2_ISR:
  6504                           	opt stack 24
  6505                           
  6506                           ;ext_int.c: 88: (INTCON3bits.INT2IF = 0);
  6507                           
  6508                           ;incstack = 0
  6509  0015F2  92F0               	bcf	intcon3,1,c	;volatile
  6510                           
  6511                           ;ext_int.c: 91: INT2_CallBack();
  6512  0015F4  EC4B  F00A         	call	_INT2_CallBack	;wreg free
  6513  0015F8  0012               	return		;funcret
  6514  0015FA                     __end_of_INT2_ISR:
  6515                           	opt stack 0
  6516                           tosu	equ	0xFFF
  6517                           tosh	equ	0xFFE
  6518                           tosl	equ	0xFFD
  6519                           pclatu	equ	0xFFB
  6520                           pclath	equ	0xFFA
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           intcon	equ	0xFF2
  6528                           intcon2	equ	0xFF1
  6529                           intcon3	equ	0xFF0
  6530                           postinc0	equ	0xFEE
  6531                           fsr0h	equ	0xFEA
  6532                           fsr0l	equ	0xFE9
  6533                           wreg	equ	0xFE8
  6534                           postinc1	equ	0xFE6
  6535                           postdec1	equ	0xFE5
  6536                           fsr1h	equ	0xFE2
  6537                           fsr1l	equ	0xFE1
  6538                           indf2	equ	0xFDF
  6539                           postinc2	equ	0xFDE
  6540                           postdec2	equ	0xFDD
  6541                           fsr2h	equ	0xFDA
  6542                           fsr2l	equ	0xFD9
  6543                           status	equ	0xFD8
  6544                           
  6545 ;; *************** function _INT2_CallBack *****************
  6546 ;; Defined at:
  6547 ;;		line 95 in file "mcc_generated_files/ext_int.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;		None
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;		None
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6561 ;;      Params:         0       0       0       0       0       0       0
  6562 ;;      Locals:         0       0       0       0       0       0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0
  6564 ;;      Totals:         0       0       0       0       0       0       0
  6565 ;;Total ram usage:        0 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    1
  6568 ;; This function calls:
  6569 ;;		Absolute function
  6570 ;;		_INT2_DefaultInterruptHandler
  6571 ;; This function is called by:
  6572 ;;		_INT2_ISR
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           	psect	text45
  6577  001496                     __ptext45:
  6578                           	opt stack 0
  6579  001496                     _INT2_CallBack:
  6580                           	opt stack 24
  6581                           
  6582                           ;ext_int.c: 98: if(INT2_InterruptHandler)
  6583                           
  6584                           ;incstack = 0
  6585  001496  503B               	movf	_INT2_InterruptHandler,w,c
  6586  001498  103C               	iorwf	_INT2_InterruptHandler+1,w,c
  6587  00149A  B4D8               	btfsc	status,2,c
  6588  00149C  0012               	return	
  6589                           
  6590                           ;ext_int.c: 99: {
  6591                           ;ext_int.c: 100: INT2_InterruptHandler();
  6592  00149E  D801               	call	i2u23_48
  6593  0014A0  0012               	return	
  6594  0014A2                     i2u23_48:
  6595  0014A2  0005               	push	
  6596  0014A4  6EFA               	movwf	pclath,c
  6597  0014A6  503B               	movf	_INT2_InterruptHandler,w,c
  6598  0014A8  6EFD               	movwf	tosl,c
  6599  0014AA  503C               	movf	_INT2_InterruptHandler+1,w,c
  6600  0014AC  6EFE               	movwf	tosh,c
  6601  0014AE  50F8               	movf	tblptru,w,c
  6602  0014B0  6EFF               	movwf	tosu,c
  6603  0014B2  50FA               	movf	pclath,w,c
  6604  0014B4  0012               	return		;indir
  6605  0014B6                     __end_of_INT2_CallBack:
  6606                           	opt stack 0
  6607                           tosu	equ	0xFFF
  6608                           tosh	equ	0xFFE
  6609                           tosl	equ	0xFFD
  6610                           pclatu	equ	0xFFB
  6611                           pclath	equ	0xFFA
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           intcon	equ	0xFF2
  6619                           intcon2	equ	0xFF1
  6620                           intcon3	equ	0xFF0
  6621                           postinc0	equ	0xFEE
  6622                           fsr0h	equ	0xFEA
  6623                           fsr0l	equ	0xFE9
  6624                           wreg	equ	0xFE8
  6625                           postinc1	equ	0xFE6
  6626                           postdec1	equ	0xFE5
  6627                           fsr1h	equ	0xFE2
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _INT2_DefaultInterruptHandler *****************
  6637 ;; Defined at:
  6638 ;;		line 108 in file "mcc_generated_files/ext_int.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;		None
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		None
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6652 ;;      Params:         0       0       0       0       0       0       0
  6653 ;;      Locals:         0       0       0       0       0       0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0
  6655 ;;      Totals:         0       0       0       0       0       0       0
  6656 ;;Total ram usage:        0 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; This function calls:
  6659 ;;		Nothing
  6660 ;; This function is called by:
  6661 ;;		_EXT_INT_Initialize
  6662 ;;		_INT2_CallBack
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text46
  6667  001620                     __ptext46:
  6668                           	opt stack 0
  6669  001620                     _INT2_DefaultInterruptHandler:
  6670                           	opt stack 24
  6671                           
  6672                           ;incstack = 0
  6673  001620  0012               	return		;funcret
  6674  001622                     __end_of_INT2_DefaultInterruptHandler:
  6675                           	opt stack 0
  6676                           tosu	equ	0xFFF
  6677                           tosh	equ	0xFFE
  6678                           tosl	equ	0xFFD
  6679                           pclatu	equ	0xFFB
  6680                           pclath	equ	0xFFA
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           intcon	equ	0xFF2
  6688                           intcon2	equ	0xFF1
  6689                           intcon3	equ	0xFF0
  6690                           postinc0	equ	0xFEE
  6691                           fsr0h	equ	0xFEA
  6692                           fsr0l	equ	0xFE9
  6693                           wreg	equ	0xFE8
  6694                           postinc1	equ	0xFE6
  6695                           postdec1	equ	0xFE5
  6696                           fsr1h	equ	0xFE2
  6697                           fsr1l	equ	0xFE1
  6698                           indf2	equ	0xFDF
  6699                           postinc2	equ	0xFDE
  6700                           postdec2	equ	0xFDD
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _INT1_ISR *****************
  6706 ;; Defined at:
  6707 ;;		line 60 in file "mcc_generated_files/ext_int.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;		None
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  1    wreg      void 
  6714 ;; Registers used:
  6715 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6721 ;;      Params:         0       0       0       0       0       0       0
  6722 ;;      Locals:         0       0       0       0       0       0       0
  6723 ;;      Temps:          0       0       0       0       0       0       0
  6724 ;;      Totals:         0       0       0       0       0       0       0
  6725 ;;Total ram usage:        0 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; Hardware stack levels required when called:    2
  6728 ;; This function calls:
  6729 ;;		_INT1_CallBack
  6730 ;; This function is called by:
  6731 ;;		_INTERRUPT_InterruptManager
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text47
  6736  001582                     __ptext47:
  6737                           	opt stack 0
  6738  001582                     _INT1_ISR:
  6739                           	opt stack 24
  6740                           
  6741                           ;ext_int.c: 62: (INTCON3bits.INT1IF = 0);
  6742                           
  6743                           ;incstack = 0
  6744  001582  90F0               	bcf	intcon3,0,c	;volatile
  6745                           
  6746                           ;ext_int.c: 63: LATC7 =~ LATC7;
  6747  001584  BE8B               	btfsc	3979,7,c	;volatile
  6748  001586  D002               	goto	i2u71_40
  6749  001588  8E8B               	bsf	3979,7,c	;volatile
  6750  00158A  D001               	goto	i2u72_45
  6751  00158C                     i2u71_40:
  6752  00158C  9E8B               	bcf	3979,7,c	;volatile
  6753  00158E                     i2u72_45:
  6754                           
  6755                           ;ext_int.c: 65: INT1_CallBack();
  6756  00158E  EC5B  F00A         	call	_INT1_CallBack	;wreg free
  6757  001592  0012               	return		;funcret
  6758  001594                     __end_of_INT1_ISR:
  6759                           	opt stack 0
  6760                           tosu	equ	0xFFF
  6761                           tosh	equ	0xFFE
  6762                           tosl	equ	0xFFD
  6763                           pclatu	equ	0xFFB
  6764                           pclath	equ	0xFFA
  6765                           tblptru	equ	0xFF8
  6766                           tblptrh	equ	0xFF7
  6767                           tblptrl	equ	0xFF6
  6768                           tablat	equ	0xFF5
  6769                           prodh	equ	0xFF4
  6770                           prodl	equ	0xFF3
  6771                           intcon	equ	0xFF2
  6772                           intcon2	equ	0xFF1
  6773                           intcon3	equ	0xFF0
  6774                           postinc0	equ	0xFEE
  6775                           fsr0h	equ	0xFEA
  6776                           fsr0l	equ	0xFE9
  6777                           wreg	equ	0xFE8
  6778                           postinc1	equ	0xFE6
  6779                           postdec1	equ	0xFE5
  6780                           fsr1h	equ	0xFE2
  6781                           fsr1l	equ	0xFE1
  6782                           indf2	equ	0xFDF
  6783                           postinc2	equ	0xFDE
  6784                           postdec2	equ	0xFDD
  6785                           fsr2h	equ	0xFDA
  6786                           fsr2l	equ	0xFD9
  6787                           status	equ	0xFD8
  6788                           
  6789 ;; *************** function _INT1_CallBack *****************
  6790 ;; Defined at:
  6791 ;;		line 69 in file "mcc_generated_files/ext_int.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;		None
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;		None
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      void 
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6805 ;;      Params:         0       0       0       0       0       0       0
  6806 ;;      Locals:         0       0       0       0       0       0       0
  6807 ;;      Temps:          0       0       0       0       0       0       0
  6808 ;;      Totals:         0       0       0       0       0       0       0
  6809 ;;Total ram usage:        0 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    1
  6812 ;; This function calls:
  6813 ;;		Absolute function
  6814 ;;		_INT1_DefaultInterruptHandler
  6815 ;; This function is called by:
  6816 ;;		_INT1_ISR
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           	psect	text48
  6821  0014B6                     __ptext48:
  6822                           	opt stack 0
  6823  0014B6                     _INT1_CallBack:
  6824                           	opt stack 24
  6825                           
  6826                           ;ext_int.c: 72: if(INT1_InterruptHandler)
  6827                           
  6828                           ;incstack = 0
  6829  0014B6  503D               	movf	_INT1_InterruptHandler,w,c
  6830  0014B8  103E               	iorwf	_INT1_InterruptHandler+1,w,c
  6831  0014BA  B4D8               	btfsc	status,2,c
  6832  0014BC  0012               	return	
  6833                           
  6834                           ;ext_int.c: 73: {
  6835                           ;ext_int.c: 74: INT1_InterruptHandler();
  6836  0014BE  D801               	call	i2u21_48
  6837  0014C0  0012               	return	
  6838  0014C2                     i2u21_48:
  6839  0014C2  0005               	push	
  6840  0014C4  6EFA               	movwf	pclath,c
  6841  0014C6  503D               	movf	_INT1_InterruptHandler,w,c
  6842  0014C8  6EFD               	movwf	tosl,c
  6843  0014CA  503E               	movf	_INT1_InterruptHandler+1,w,c
  6844  0014CC  6EFE               	movwf	tosh,c
  6845  0014CE  50F8               	movf	tblptru,w,c
  6846  0014D0  6EFF               	movwf	tosu,c
  6847  0014D2  50FA               	movf	pclath,w,c
  6848  0014D4  0012               	return		;indir
  6849  0014D6                     __end_of_INT1_CallBack:
  6850                           	opt stack 0
  6851                           tosu	equ	0xFFF
  6852                           tosh	equ	0xFFE
  6853                           tosl	equ	0xFFD
  6854                           pclatu	equ	0xFFB
  6855                           pclath	equ	0xFFA
  6856                           tblptru	equ	0xFF8
  6857                           tblptrh	equ	0xFF7
  6858                           tblptrl	equ	0xFF6
  6859                           tablat	equ	0xFF5
  6860                           prodh	equ	0xFF4
  6861                           prodl	equ	0xFF3
  6862                           intcon	equ	0xFF2
  6863                           intcon2	equ	0xFF1
  6864                           intcon3	equ	0xFF0
  6865                           postinc0	equ	0xFEE
  6866                           fsr0h	equ	0xFEA
  6867                           fsr0l	equ	0xFE9
  6868                           wreg	equ	0xFE8
  6869                           postinc1	equ	0xFE6
  6870                           postdec1	equ	0xFE5
  6871                           fsr1h	equ	0xFE2
  6872                           fsr1l	equ	0xFE1
  6873                           indf2	equ	0xFDF
  6874                           postinc2	equ	0xFDE
  6875                           postdec2	equ	0xFDD
  6876                           fsr2h	equ	0xFDA
  6877                           fsr2l	equ	0xFD9
  6878                           status	equ	0xFD8
  6879                           
  6880 ;; *************** function _INT1_DefaultInterruptHandler *****************
  6881 ;; Defined at:
  6882 ;;		line 82 in file "mcc_generated_files/ext_int.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;		None
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;		None
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  1    wreg      void 
  6889 ;; Registers used:
  6890 ;;		None
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6896 ;;      Params:         0       0       0       0       0       0       0
  6897 ;;      Locals:         0       0       0       0       0       0       0
  6898 ;;      Temps:          0       0       0       0       0       0       0
  6899 ;;      Totals:         0       0       0       0       0       0       0
  6900 ;;Total ram usage:        0 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		_EXT_INT_Initialize
  6906 ;;		_INT1_CallBack
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text49
  6911  001622                     __ptext49:
  6912                           	opt stack 0
  6913  001622                     _INT1_DefaultInterruptHandler:
  6914                           	opt stack 24
  6915                           
  6916                           ;incstack = 0
  6917  001622  0012               	return		;funcret
  6918  001624                     __end_of_INT1_DefaultInterruptHandler:
  6919                           	opt stack 0
  6920                           tosu	equ	0xFFF
  6921                           tosh	equ	0xFFE
  6922                           tosl	equ	0xFFD
  6923                           pclatu	equ	0xFFB
  6924                           pclath	equ	0xFFA
  6925                           tblptru	equ	0xFF8
  6926                           tblptrh	equ	0xFF7
  6927                           tblptrl	equ	0xFF6
  6928                           tablat	equ	0xFF5
  6929                           prodh	equ	0xFF4
  6930                           prodl	equ	0xFF3
  6931                           intcon	equ	0xFF2
  6932                           intcon2	equ	0xFF1
  6933                           intcon3	equ	0xFF0
  6934                           postinc0	equ	0xFEE
  6935                           fsr0h	equ	0xFEA
  6936                           fsr0l	equ	0xFE9
  6937                           wreg	equ	0xFE8
  6938                           postinc1	equ	0xFE6
  6939                           postdec1	equ	0xFE5
  6940                           fsr1h	equ	0xFE2
  6941                           fsr1l	equ	0xFE1
  6942                           indf2	equ	0xFDF
  6943                           postinc2	equ	0xFDE
  6944                           postdec2	equ	0xFDD
  6945                           fsr2h	equ	0xFDA
  6946                           fsr2l	equ	0xFD9
  6947                           status	equ	0xFD8
  6948                           
  6949 ;; *************** function _INT0_ISR *****************
  6950 ;; Defined at:
  6951 ;;		line 34 in file "mcc_generated_files/ext_int.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      void 
  6958 ;; Registers used:
  6959 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6965 ;;      Params:         0       0       0       0       0       0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0
  6968 ;;      Totals:         0       0       0       0       0       0       0
  6969 ;;Total ram usage:        0 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    2
  6972 ;; This function calls:
  6973 ;;		_INT0_CallBack
  6974 ;; This function is called by:
  6975 ;;		_INTERRUPT_InterruptManager
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           	psect	text50
  6980  0015FA                     __ptext50:
  6981                           	opt stack 0
  6982  0015FA                     _INT0_ISR:
  6983                           	opt stack 24
  6984                           
  6985                           ;ext_int.c: 36: (INTCONbits.INT0IF = 0);
  6986                           
  6987                           ;incstack = 0
  6988  0015FA  92F2               	bcf	intcon,1,c	;volatile
  6989                           
  6990                           ;ext_int.c: 39: INT0_CallBack();
  6991  0015FC  EC6B  F00A         	call	_INT0_CallBack	;wreg free
  6992  001600  0012               	return		;funcret
  6993  001602                     __end_of_INT0_ISR:
  6994                           	opt stack 0
  6995                           tosu	equ	0xFFF
  6996                           tosh	equ	0xFFE
  6997                           tosl	equ	0xFFD
  6998                           pclatu	equ	0xFFB
  6999                           pclath	equ	0xFFA
  7000                           tblptru	equ	0xFF8
  7001                           tblptrh	equ	0xFF7
  7002                           tblptrl	equ	0xFF6
  7003                           tablat	equ	0xFF5
  7004                           prodh	equ	0xFF4
  7005                           prodl	equ	0xFF3
  7006                           intcon	equ	0xFF2
  7007                           intcon2	equ	0xFF1
  7008                           intcon3	equ	0xFF0
  7009                           postinc0	equ	0xFEE
  7010                           fsr0h	equ	0xFEA
  7011                           fsr0l	equ	0xFE9
  7012                           wreg	equ	0xFE8
  7013                           postinc1	equ	0xFE6
  7014                           postdec1	equ	0xFE5
  7015                           fsr1h	equ	0xFE2
  7016                           fsr1l	equ	0xFE1
  7017                           indf2	equ	0xFDF
  7018                           postinc2	equ	0xFDE
  7019                           postdec2	equ	0xFDD
  7020                           fsr2h	equ	0xFDA
  7021                           fsr2l	equ	0xFD9
  7022                           status	equ	0xFD8
  7023                           
  7024 ;; *************** function _INT0_CallBack *****************
  7025 ;; Defined at:
  7026 ;;		line 43 in file "mcc_generated_files/ext_int.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;		None
  7029 ;; Auto vars:     Size  Location     Type
  7030 ;;		None
  7031 ;; Return value:  Size  Location     Type
  7032 ;;                  1    wreg      void 
  7033 ;; Registers used:
  7034 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7035 ;; Tracked objects:
  7036 ;;		On entry : 0/0
  7037 ;;		On exit  : 0/0
  7038 ;;		Unchanged: 0/0
  7039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7040 ;;      Params:         0       0       0       0       0       0       0
  7041 ;;      Locals:         0       0       0       0       0       0       0
  7042 ;;      Temps:          0       0       0       0       0       0       0
  7043 ;;      Totals:         0       0       0       0       0       0       0
  7044 ;;Total ram usage:        0 bytes
  7045 ;; Hardware stack levels used:    1
  7046 ;; Hardware stack levels required when called:    1
  7047 ;; This function calls:
  7048 ;;		Absolute function
  7049 ;;		_INT0_DefaultInterruptHandler
  7050 ;; This function is called by:
  7051 ;;		_INT0_ISR
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text51
  7056  0014D6                     __ptext51:
  7057                           	opt stack 0
  7058  0014D6                     _INT0_CallBack:
  7059                           	opt stack 24
  7060                           
  7061                           ;ext_int.c: 46: if(INT0_InterruptHandler)
  7062                           
  7063                           ;incstack = 0
  7064  0014D6  503F               	movf	_INT0_InterruptHandler,w,c
  7065  0014D8  1040               	iorwf	_INT0_InterruptHandler+1,w,c
  7066  0014DA  B4D8               	btfsc	status,2,c
  7067  0014DC  0012               	return	
  7068                           
  7069                           ;ext_int.c: 47: {
  7070                           ;ext_int.c: 48: INT0_InterruptHandler();
  7071  0014DE  D801               	call	i2u19_48
  7072  0014E0  0012               	return	
  7073  0014E2                     i2u19_48:
  7074  0014E2  0005               	push	
  7075  0014E4  6EFA               	movwf	pclath,c
  7076  0014E6  503F               	movf	_INT0_InterruptHandler,w,c
  7077  0014E8  6EFD               	movwf	tosl,c
  7078  0014EA  5040               	movf	_INT0_InterruptHandler+1,w,c
  7079  0014EC  6EFE               	movwf	tosh,c
  7080  0014EE  50F8               	movf	tblptru,w,c
  7081  0014F0  6EFF               	movwf	tosu,c
  7082  0014F2  50FA               	movf	pclath,w,c
  7083  0014F4  0012               	return		;indir
  7084  0014F6                     __end_of_INT0_CallBack:
  7085                           	opt stack 0
  7086                           tosu	equ	0xFFF
  7087                           tosh	equ	0xFFE
  7088                           tosl	equ	0xFFD
  7089                           pclatu	equ	0xFFB
  7090                           pclath	equ	0xFFA
  7091                           tblptru	equ	0xFF8
  7092                           tblptrh	equ	0xFF7
  7093                           tblptrl	equ	0xFF6
  7094                           tablat	equ	0xFF5
  7095                           prodh	equ	0xFF4
  7096                           prodl	equ	0xFF3
  7097                           intcon	equ	0xFF2
  7098                           intcon2	equ	0xFF1
  7099                           intcon3	equ	0xFF0
  7100                           postinc0	equ	0xFEE
  7101                           fsr0h	equ	0xFEA
  7102                           fsr0l	equ	0xFE9
  7103                           wreg	equ	0xFE8
  7104                           postinc1	equ	0xFE6
  7105                           postdec1	equ	0xFE5
  7106                           fsr1h	equ	0xFE2
  7107                           fsr1l	equ	0xFE1
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function _INT0_DefaultInterruptHandler *****************
  7116 ;; Defined at:
  7117 ;;		line 56 in file "mcc_generated_files/ext_int.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;		None
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      void 
  7124 ;; Registers used:
  7125 ;;		None
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7131 ;;      Params:         0       0       0       0       0       0       0
  7132 ;;      Locals:         0       0       0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0
  7134 ;;      Totals:         0       0       0       0       0       0       0
  7135 ;;Total ram usage:        0 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; This function calls:
  7138 ;;		Nothing
  7139 ;; This function is called by:
  7140 ;;		_EXT_INT_Initialize
  7141 ;;		_INT0_CallBack
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text52
  7146  001624                     __ptext52:
  7147                           	opt stack 0
  7148  001624                     _INT0_DefaultInterruptHandler:
  7149                           	opt stack 24
  7150                           
  7151                           ;incstack = 0
  7152  001624  0012               	return		;funcret
  7153  001626                     __end_of_INT0_DefaultInterruptHandler:
  7154                           	opt stack 0
  7155                           tosu	equ	0xFFF
  7156                           tosh	equ	0xFFE
  7157                           tosl	equ	0xFFD
  7158                           pclatu	equ	0xFFB
  7159                           pclath	equ	0xFFA
  7160                           tblptru	equ	0xFF8
  7161                           tblptrh	equ	0xFF7
  7162                           tblptrl	equ	0xFF6
  7163                           tablat	equ	0xFF5
  7164                           prodh	equ	0xFF4
  7165                           prodl	equ	0xFF3
  7166                           intcon	equ	0xFF2
  7167                           intcon2	equ	0xFF1
  7168                           intcon3	equ	0xFF0
  7169                           postinc0	equ	0xFEE
  7170                           fsr0h	equ	0xFEA
  7171                           fsr0l	equ	0xFE9
  7172                           wreg	equ	0xFE8
  7173                           postinc1	equ	0xFE6
  7174                           postdec1	equ	0xFE5
  7175                           fsr1h	equ	0xFE2
  7176                           fsr1l	equ	0xFE1
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           fsr2h	equ	0xFDA
  7181                           fsr2l	equ	0xFD9
  7182                           status	equ	0xFD8
  7183                           
  7184 ;; *************** function _EUSART1_Transmit_ISR *****************
  7185 ;; Defined at:
  7186 ;;		line 203 in file "mcc_generated_files/eusart1.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;		None
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      void 
  7193 ;; Registers used:
  7194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7200 ;;      Params:         0       0       0       0       0       0       0
  7201 ;;      Locals:         0       0       0       0       0       0       0
  7202 ;;      Temps:          0       0       0       0       0       0       0
  7203 ;;      Totals:         0       0       0       0       0       0       0
  7204 ;;Total ram usage:        0 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_EUSART1_Initialize
  7210 ;;		_INTERRUPT_InterruptManager
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           	psect	text53
  7215  0013D0                     __ptext53:
  7216                           	opt stack 0
  7217  0013D0                     _EUSART1_Transmit_ISR:
  7218                           	opt stack 26
  7219                           
  7220                           ;eusart1.c: 207: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  7221                           
  7222                           ;incstack = 0
  7223  0013D0  0E08               	movlw	8
  7224  0013D2  6049               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  7225  0013D4  D012               	goto	i2l399
  7226                           
  7227                           ;eusart1.c: 208: {
  7228                           ;eusart1.c: 209: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  7229  0013D6  504A               	movf	_eusart1TxTail,w,c	;volatile
  7230  0013D8  0D01               	mullw	1
  7231  0013DA  0EA0               	movlw	low _eusart1TxBuffer
  7232  0013DC  24F3               	addwf	prodl,w,c
  7233  0013DE  6ED9               	movwf	fsr2l,c
  7234  0013E0  0E00               	movlw	high _eusart1TxBuffer
  7235  0013E2  20F4               	addwfc	prodh,w,c
  7236  0013E4  6EDA               	movwf	fsr2h,c
  7237  0013E6  50DF               	movf	indf2,w,c
  7238  0013E8  6EAD               	movwf	4013,c	;volatile
  7239  0013EA  2A4A               	incf	_eusart1TxTail,f,c	;volatile
  7240                           
  7241                           ;eusart1.c: 210: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  7242  0013EC  0E07               	movlw	7
  7243  0013EE  644A               	cpfsgt	_eusart1TxTail,c	;volatile
  7244  0013F0  D002               	goto	i2l400
  7245                           
  7246                           ;eusart1.c: 211: {
  7247                           ;eusart1.c: 212: eusart1TxTail = 0;
  7248  0013F2  0E00               	movlw	0
  7249  0013F4  6E4A               	movwf	_eusart1TxTail,c	;volatile
  7250  0013F6                     i2l400:
  7251                           
  7252                           ;eusart1.c: 213: }
  7253                           ;eusart1.c: 214: eusart1TxBufferRemaining++;
  7254  0013F6  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  7255                           
  7256                           ;eusart1.c: 215: }
  7257  0013F8  0012               	return	
  7258  0013FA                     i2l399:
  7259                           
  7260                           ;eusart1.c: 216: else
  7261                           ;eusart1.c: 217: {
  7262                           ;eusart1.c: 218: PIE1bits.TX1IE = 0;
  7263  0013FA  989D               	bcf	3997,4,c	;volatile
  7264  0013FC  0012               	return	
  7265  0013FE                     __end_of_EUSART1_Transmit_ISR:
  7266                           	opt stack 0
  7267                           tosu	equ	0xFFF
  7268                           tosh	equ	0xFFE
  7269                           tosl	equ	0xFFD
  7270                           pclatu	equ	0xFFB
  7271                           pclath	equ	0xFFA
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           intcon	equ	0xFF2
  7279                           intcon2	equ	0xFF1
  7280                           intcon3	equ	0xFF0
  7281                           postinc0	equ	0xFEE
  7282                           fsr0h	equ	0xFEA
  7283                           fsr0l	equ	0xFE9
  7284                           wreg	equ	0xFE8
  7285                           postinc1	equ	0xFE6
  7286                           postdec1	equ	0xFE5
  7287                           fsr1h	equ	0xFE2
  7288                           fsr1l	equ	0xFE1
  7289                           indf2	equ	0xFDF
  7290                           postinc2	equ	0xFDE
  7291                           postdec2	equ	0xFDD
  7292                           fsr2h	equ	0xFDA
  7293                           fsr2l	equ	0xFD9
  7294                           status	equ	0xFD8
  7295                           
  7296 ;; *************** function _EUSART1_Receive_ISR *****************
  7297 ;; Defined at:
  7298 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;		None
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;		None
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  1    wreg      void 
  7305 ;; Registers used:
  7306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7307 ;; Tracked objects:
  7308 ;;		On entry : 0/0
  7309 ;;		On exit  : 0/0
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7312 ;;      Params:         0       0       0       0       0       0       0
  7313 ;;      Locals:         0       0       0       0       0       0       0
  7314 ;;      Temps:          0       0       0       0       0       0       0
  7315 ;;      Totals:         0       0       0       0       0       0       0
  7316 ;;Total ram usage:        0 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; Hardware stack levels required when called:    2
  7319 ;; This function calls:
  7320 ;;		Absolute function
  7321 ;;		_EUSART1_DefaultErrorHandler
  7322 ;;		_EUSART1_DefaultFramingErrorHandler
  7323 ;;		_EUSART1_DefaultOverrunErrorHandler
  7324 ;;		_EUSART1_RxDataHandler
  7325 ;; This function is called by:
  7326 ;;		_EUSART1_Initialize
  7327 ;;		_INTERRUPT_InterruptManager
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text54
  7332  000EE6                     __ptext54:
  7333                           	opt stack 0
  7334  000EE6                     _EUSART1_Receive_ISR:
  7335                           	opt stack 24
  7336                           
  7337                           ;eusart1.c: 225: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
  7338                           
  7339                           ;incstack = 0
  7340  000EE6  5048               	movf	_eusart1RxHead,w,c	;volatile
  7341  000EE8  0D01               	mullw	1
  7342  000EEA  0E90               	movlw	low _eusart1RxStatusBuffer
  7343  000EEC  24F3               	addwf	prodl,w,c
  7344  000EEE  6ED9               	movwf	fsr2l,c
  7345  000EF0  0E00               	movlw	high _eusart1RxStatusBuffer
  7346  000EF2  20F4               	addwfc	prodh,w,c
  7347  000EF4  6EDA               	movwf	fsr2h,c
  7348  000EF6  0E00               	movlw	0
  7349  000EF8  6EDF               	movwf	indf2,c
  7350                           
  7351                           ;eusart1.c: 227: if(RCSTA1bits.FERR){
  7352  000EFA  A4AB               	btfss	4011,2,c	;volatile
  7353  000EFC  D016               	goto	i2u214_49
  7354                           
  7355                           ;eusart1.c: 228: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
  7356  000EFE  5048               	movf	_eusart1RxHead,w,c	;volatile
  7357  000F00  0D01               	mullw	1
  7358  000F02  0E90               	movlw	low _eusart1RxStatusBuffer
  7359  000F04  24F3               	addwf	prodl,w,c
  7360  000F06  6ED9               	movwf	fsr2l,c
  7361  000F08  0E00               	movlw	high _eusart1RxStatusBuffer
  7362  000F0A  20F4               	addwfc	prodh,w,c
  7363  000F0C  6EDA               	movwf	fsr2h,c
  7364  000F0E  0100               	movlb	0	; () banked
  7365  000F10  82DF               	bsf	indf2,1,c
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;eusart1.c: 229: EUSART1_FramingErrorHandler();
  7369  000F12  D801               	call	i2u214_48
  7370  000F14  D00A               	goto	i2u214_49
  7371  000F16                     i2u214_48:
  7372  000F16  0005               	push	
  7373  000F18  6EFA               	movwf	pclath,c
  7374  000F1A  51AC               	movf	_EUSART1_FramingErrorHandler& (0+255),w,b
  7375  000F1C  6EFD               	movwf	tosl,c
  7376  000F1E  51AD               	movf	(_EUSART1_FramingErrorHandler+1)& (0+255),w,b
  7377  000F20  6EFE               	movwf	tosh,c
  7378  000F22  50F8               	movf	tblptru,w,c
  7379  000F24  6EFF               	movwf	tosu,c
  7380  000F26  50FA               	movf	pclath,w,c
  7381  000F28  0012               	return		;indir
  7382  000F2A                     i2u214_49:
  7383                           
  7384                           ;eusart1.c: 230: }
  7385                           ;eusart1.c: 232: if(RCSTA1bits.OERR){
  7386  000F2A  A2AB               	btfss	4011,1,c	;volatile
  7387  000F2C  D016               	goto	i2u216_49
  7388                           
  7389                           ;eusart1.c: 233: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
  7390  000F2E  5048               	movf	_eusart1RxHead,w,c	;volatile
  7391  000F30  0D01               	mullw	1
  7392  000F32  0E90               	movlw	low _eusart1RxStatusBuffer
  7393  000F34  24F3               	addwf	prodl,w,c
  7394  000F36  6ED9               	movwf	fsr2l,c
  7395  000F38  0E00               	movlw	high _eusart1RxStatusBuffer
  7396  000F3A  20F4               	addwfc	prodh,w,c
  7397  000F3C  6EDA               	movwf	fsr2h,c
  7398  000F3E  0100               	movlb	0	; () banked
  7399  000F40  84DF               	bsf	indf2,2,c
  7400                           
  7401                           ; BSR set to: 0
  7402                           ;eusart1.c: 234: EUSART1_OverrunErrorHandler();
  7403  000F42  D801               	call	i2u216_48
  7404  000F44  D00A               	goto	i2u216_49
  7405  000F46                     i2u216_48:
  7406  000F46  0005               	push	
  7407  000F48  6EFA               	movwf	pclath,c
  7408  000F4A  51AA               	movf	_EUSART1_OverrunErrorHandler& (0+255),w,b
  7409  000F4C  6EFD               	movwf	tosl,c
  7410  000F4E  51AB               	movf	(_EUSART1_OverrunErrorHandler+1)& (0+255),w,b
  7411  000F50  6EFE               	movwf	tosh,c
  7412  000F52  50F8               	movf	tblptru,w,c
  7413  000F54  6EFF               	movwf	tosu,c
  7414  000F56  50FA               	movf	pclath,w,c
  7415  000F58  0012               	return		;indir
  7416  000F5A                     i2u216_49:
  7417                           
  7418                           ;eusart1.c: 235: }
  7419                           ;eusart1.c: 237: if(eusart1RxStatusBuffer[eusart1RxHead].status){
  7420  000F5A  5048               	movf	_eusart1RxHead,w,c	;volatile
  7421  000F5C  0D01               	mullw	1
  7422  000F5E  0E90               	movlw	low _eusart1RxStatusBuffer
  7423  000F60  24F3               	addwf	prodl,w,c
  7424  000F62  6ED9               	movwf	fsr2l,c
  7425  000F64  0E00               	movlw	high _eusart1RxStatusBuffer
  7426  000F66  20F4               	addwfc	prodh,w,c
  7427  000F68  6EDA               	movwf	fsr2h,c
  7428  000F6A  50DF               	movf	indf2,w,c
  7429  000F6C  B4D8               	btfsc	status,2,c
  7430  000F6E  D00D               	goto	i2l407
  7431                           
  7432                           ;eusart1.c: 238: EUSART1_ErrorHandler();
  7433  000F70  D801               	call	i2u218_48
  7434  000F72  0012               	return	
  7435  000F74                     i2u218_48:
  7436  000F74  0005               	push	
  7437  000F76  0100               	movlb	0	; () banked
  7438  000F78  6EFA               	movwf	pclath,c
  7439  000F7A  51A8               	movf	_EUSART1_ErrorHandler& (0+255),w,b
  7440  000F7C  6EFD               	movwf	tosl,c
  7441  000F7E  51A9               	movf	(_EUSART1_ErrorHandler+1)& (0+255),w,b
  7442  000F80  6EFE               	movwf	tosh,c
  7443  000F82  50F8               	movf	tblptru,w,c
  7444  000F84  6EFF               	movwf	tosu,c
  7445  000F86  50FA               	movf	pclath,w,c
  7446  000F88  0012               	return		;indir
  7447  000F8A                     i2l407:
  7448                           
  7449                           ;eusart1.c: 240: EUSART1_RxDataHandler();
  7450  000F8A  EC39  F00A         	call	_EUSART1_RxDataHandler	;wreg free
  7451  000F8E  0012               	return	
  7452  000F90                     __end_of_EUSART1_Receive_ISR:
  7453                           	opt stack 0
  7454                           tosu	equ	0xFFF
  7455                           tosh	equ	0xFFE
  7456                           tosl	equ	0xFFD
  7457                           pclatu	equ	0xFFB
  7458                           pclath	equ	0xFFA
  7459                           tblptru	equ	0xFF8
  7460                           tblptrh	equ	0xFF7
  7461                           tblptrl	equ	0xFF6
  7462                           tablat	equ	0xFF5
  7463                           prodh	equ	0xFF4
  7464                           prodl	equ	0xFF3
  7465                           intcon	equ	0xFF2
  7466                           intcon2	equ	0xFF1
  7467                           intcon3	equ	0xFF0
  7468                           postinc0	equ	0xFEE
  7469                           fsr0h	equ	0xFEA
  7470                           fsr0l	equ	0xFE9
  7471                           wreg	equ	0xFE8
  7472                           postinc1	equ	0xFE6
  7473                           postdec1	equ	0xFE5
  7474                           fsr1h	equ	0xFE2
  7475                           fsr1l	equ	0xFE1
  7476                           indf2	equ	0xFDF
  7477                           postinc2	equ	0xFDE
  7478                           postdec2	equ	0xFDD
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
  7484 ;; Defined at:
  7485 ;;		line 258 in file "mcc_generated_files/eusart1.c"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;		None
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;		None
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  1    wreg      void 
  7492 ;; Registers used:
  7493 ;;		None
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7499 ;;      Params:         0       0       0       0       0       0       0
  7500 ;;      Locals:         0       0       0       0       0       0       0
  7501 ;;      Temps:          0       0       0       0       0       0       0
  7502 ;;      Totals:         0       0       0       0       0       0       0
  7503 ;;Total ram usage:        0 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; This function calls:
  7506 ;;		Nothing
  7507 ;; This function is called by:
  7508 ;;		_EUSART1_Initialize
  7509 ;;		_EUSART1_Receive_ISR
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           	psect	text55
  7514  001608                     __ptext55:
  7515                           	opt stack 0
  7516  001608                     _EUSART1_DefaultOverrunErrorHandler:
  7517                           	opt stack 25
  7518                           
  7519                           ;eusart1.c: 261: RCSTA1bits.CREN = 0;
  7520                           
  7521                           ;incstack = 0
  7522  001608  98AB               	bcf	4011,4,c	;volatile
  7523                           
  7524                           ;eusart1.c: 262: RCSTA1bits.CREN = 1;
  7525  00160A  88AB               	bsf	4011,4,c	;volatile
  7526  00160C  0012               	return		;funcret
  7527  00160E                     __end_of_EUSART1_DefaultOverrunErrorHandler:
  7528                           	opt stack 0
  7529                           tosu	equ	0xFFF
  7530                           tosh	equ	0xFFE
  7531                           tosl	equ	0xFFD
  7532                           pclatu	equ	0xFFB
  7533                           pclath	equ	0xFFA
  7534                           tblptru	equ	0xFF8
  7535                           tblptrh	equ	0xFF7
  7536                           tblptrl	equ	0xFF6
  7537                           tablat	equ	0xFF5
  7538                           prodh	equ	0xFF4
  7539                           prodl	equ	0xFF3
  7540                           intcon	equ	0xFF2
  7541                           intcon2	equ	0xFF1
  7542                           intcon3	equ	0xFF0
  7543                           postinc0	equ	0xFEE
  7544                           fsr0h	equ	0xFEA
  7545                           fsr0l	equ	0xFE9
  7546                           wreg	equ	0xFE8
  7547                           postinc1	equ	0xFE6
  7548                           postdec1	equ	0xFE5
  7549                           fsr1h	equ	0xFE2
  7550                           fsr1l	equ	0xFE1
  7551                           indf2	equ	0xFDF
  7552                           postinc2	equ	0xFDE
  7553                           postdec2	equ	0xFDD
  7554                           fsr2h	equ	0xFDA
  7555                           fsr2l	equ	0xFD9
  7556                           status	equ	0xFD8
  7557                           
  7558 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
  7559 ;; Defined at:
  7560 ;;		line 256 in file "mcc_generated_files/eusart1.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;		None
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;		None
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  1    wreg      void 
  7567 ;; Registers used:
  7568 ;;		None
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7574 ;;      Params:         0       0       0       0       0       0       0
  7575 ;;      Locals:         0       0       0       0       0       0       0
  7576 ;;      Temps:          0       0       0       0       0       0       0
  7577 ;;      Totals:         0       0       0       0       0       0       0
  7578 ;;Total ram usage:        0 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; This function calls:
  7581 ;;		Nothing
  7582 ;; This function is called by:
  7583 ;;		_EUSART1_Initialize
  7584 ;;		_EUSART1_Receive_ISR
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           	psect	text56
  7589  001626                     __ptext56:
  7590                           	opt stack 0
  7591  001626                     _EUSART1_DefaultFramingErrorHandler:
  7592                           	opt stack 25
  7593                           
  7594                           ;incstack = 0
  7595  001626  0012               	return		;funcret
  7596  001628                     __end_of_EUSART1_DefaultFramingErrorHandler:
  7597                           	opt stack 0
  7598                           tosu	equ	0xFFF
  7599                           tosh	equ	0xFFE
  7600                           tosl	equ	0xFFD
  7601                           pclatu	equ	0xFFB
  7602                           pclath	equ	0xFFA
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           prodh	equ	0xFF4
  7608                           prodl	equ	0xFF3
  7609                           intcon	equ	0xFF2
  7610                           intcon2	equ	0xFF1
  7611                           intcon3	equ	0xFF0
  7612                           postinc0	equ	0xFEE
  7613                           fsr0h	equ	0xFEA
  7614                           fsr0l	equ	0xFE9
  7615                           wreg	equ	0xFE8
  7616                           postinc1	equ	0xFE6
  7617                           postdec1	equ	0xFE5
  7618                           fsr1h	equ	0xFE2
  7619                           fsr1l	equ	0xFE1
  7620                           indf2	equ	0xFDF
  7621                           postinc2	equ	0xFDE
  7622                           postdec2	equ	0xFDD
  7623                           fsr2h	equ	0xFDA
  7624                           fsr2l	equ	0xFD9
  7625                           status	equ	0xFD8
  7626                           
  7627 ;; *************** function _EUSART1_DefaultErrorHandler *****************
  7628 ;; Defined at:
  7629 ;;		line 266 in file "mcc_generated_files/eusart1.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;		None
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;		None
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  1    wreg      void 
  7636 ;; Registers used:
  7637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7643 ;;      Params:         0       0       0       0       0       0       0
  7644 ;;      Locals:         0       0       0       0       0       0       0
  7645 ;;      Temps:          0       0       0       0       0       0       0
  7646 ;;      Totals:         0       0       0       0       0       0       0
  7647 ;;Total ram usage:        0 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; Hardware stack levels required when called:    1
  7650 ;; This function calls:
  7651 ;;		_EUSART1_RxDataHandler
  7652 ;; This function is called by:
  7653 ;;		_EUSART1_Initialize
  7654 ;;		_EUSART1_Receive_ISR
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text57
  7659  00160E                     __ptext57:
  7660                           	opt stack 0
  7661  00160E                     _EUSART1_DefaultErrorHandler:
  7662                           	opt stack 24
  7663                           
  7664                           ;eusart1.c: 267: EUSART1_RxDataHandler();
  7665                           
  7666                           ;incstack = 0
  7667  00160E  EC39  F00A         	call	_EUSART1_RxDataHandler	;wreg free
  7668  001612  0012               	return		;funcret
  7669  001614                     __end_of_EUSART1_DefaultErrorHandler:
  7670                           	opt stack 0
  7671                           tosu	equ	0xFFF
  7672                           tosh	equ	0xFFE
  7673                           tosl	equ	0xFFD
  7674                           pclatu	equ	0xFFB
  7675                           pclath	equ	0xFFA
  7676                           tblptru	equ	0xFF8
  7677                           tblptrh	equ	0xFF7
  7678                           tblptrl	equ	0xFF6
  7679                           tablat	equ	0xFF5
  7680                           prodh	equ	0xFF4
  7681                           prodl	equ	0xFF3
  7682                           intcon	equ	0xFF2
  7683                           intcon2	equ	0xFF1
  7684                           intcon3	equ	0xFF0
  7685                           postinc0	equ	0xFEE
  7686                           fsr0h	equ	0xFEA
  7687                           fsr0l	equ	0xFE9
  7688                           wreg	equ	0xFE8
  7689                           postinc1	equ	0xFE6
  7690                           postdec1	equ	0xFE5
  7691                           fsr1h	equ	0xFE2
  7692                           fsr1l	equ	0xFE1
  7693                           indf2	equ	0xFDF
  7694                           postinc2	equ	0xFDE
  7695                           postdec2	equ	0xFDD
  7696                           fsr2h	equ	0xFDA
  7697                           fsr2l	equ	0xFD9
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function _EUSART1_RxDataHandler *****************
  7701 ;; Defined at:
  7702 ;;		line 246 in file "mcc_generated_files/eusart1.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;		None
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      void 
  7709 ;; Registers used:
  7710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7716 ;;      Params:         0       0       0       0       0       0       0
  7717 ;;      Locals:         0       0       0       0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0
  7719 ;;      Totals:         0       0       0       0       0       0       0
  7720 ;;Total ram usage:        0 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_EUSART1_Receive_ISR
  7726 ;;		_EUSART1_DefaultErrorHandler
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           	psect	text58
  7731  001472                     __ptext58:
  7732                           	opt stack 0
  7733  001472                     _EUSART1_RxDataHandler:
  7734                           	opt stack 25
  7735                           
  7736                           ;eusart1.c: 248: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  7737                           
  7738                           ;incstack = 0
  7739  001472  5048               	movf	_eusart1RxHead,w,c	;volatile
  7740  001474  0D01               	mullw	1
  7741  001476  0E98               	movlw	low _eusart1RxBuffer
  7742  001478  24F3               	addwf	prodl,w,c
  7743  00147A  6ED9               	movwf	fsr2l,c
  7744  00147C  0E00               	movlw	high _eusart1RxBuffer
  7745  00147E  20F4               	addwfc	prodh,w,c
  7746  001480  6EDA               	movwf	fsr2h,c
  7747  001482  CFAE FFDF          	movff	4014,indf2	;volatile
  7748  001486  2A48               	incf	_eusart1RxHead,f,c	;volatile
  7749                           
  7750                           ;eusart1.c: 249: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  7751  001488  0E07               	movlw	7
  7752  00148A  6448               	cpfsgt	_eusart1RxHead,c	;volatile
  7753  00148C  D002               	goto	i2l412
  7754                           
  7755                           ;eusart1.c: 250: {
  7756                           ;eusart1.c: 251: eusart1RxHead = 0;
  7757  00148E  0E00               	movlw	0
  7758  001490  6E48               	movwf	_eusart1RxHead,c	;volatile
  7759  001492                     i2l412:
  7760                           
  7761                           ;eusart1.c: 252: }
  7762                           ;eusart1.c: 253: eusart1RxCount++;
  7763  001492  2A46               	incf	_eusart1RxCount,f,c	;volatile
  7764  001494  0012               	return		;funcret
  7765  001496                     __end_of_EUSART1_RxDataHandler:
  7766                           	opt stack 0
  7767  0000                     tosu	equ	0xFFF
  7768                           tosh	equ	0xFFE
  7769                           tosl	equ	0xFFD
  7770                           pclatu	equ	0xFFB
  7771                           pclath	equ	0xFFA
  7772                           tblptru	equ	0xFF8
  7773                           tblptrh	equ	0xFF7
  7774                           tblptrl	equ	0xFF6
  7775                           tablat	equ	0xFF5
  7776                           prodh	equ	0xFF4
  7777                           prodl	equ	0xFF3
  7778                           intcon	equ	0xFF2
  7779                           intcon2	equ	0xFF1
  7780                           intcon3	equ	0xFF0
  7781                           postinc0	equ	0xFEE
  7782                           fsr0h	equ	0xFEA
  7783                           fsr0l	equ	0xFE9
  7784                           wreg	equ	0xFE8
  7785                           postinc1	equ	0xFE6
  7786                           postdec1	equ	0xFE5
  7787                           fsr1h	equ	0xFE2
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           postinc2	equ	0xFDE
  7791                           postdec2	equ	0xFDD
  7792                           fsr2h	equ	0xFDA
  7793                           fsr2l	equ	0xFD9
  7794                           status	equ	0xFD8
  7795                           tosu	equ	0xFFF
  7796                           tosh	equ	0xFFE
  7797                           tosl	equ	0xFFD
  7798                           pclatu	equ	0xFFB
  7799                           pclath	equ	0xFFA
  7800                           tblptru	equ	0xFF8
  7801                           tblptrh	equ	0xFF7
  7802                           tblptrl	equ	0xFF6
  7803                           tablat	equ	0xFF5
  7804                           prodh	equ	0xFF4
  7805                           prodl	equ	0xFF3
  7806                           intcon	equ	0xFF2
  7807                           intcon2	equ	0xFF1
  7808                           intcon3	equ	0xFF0
  7809                           postinc0	equ	0xFEE
  7810                           fsr0h	equ	0xFEA
  7811                           fsr0l	equ	0xFE9
  7812                           wreg	equ	0xFE8
  7813                           postinc1	equ	0xFE6
  7814                           postdec1	equ	0xFE5
  7815                           fsr1h	equ	0xFE2
  7816                           fsr1l	equ	0xFE1
  7817                           indf2	equ	0xFDF
  7818                           postinc2	equ	0xFDE
  7819                           postdec2	equ	0xFDD
  7820                           fsr2h	equ	0xFDA
  7821                           fsr2l	equ	0xFD9
  7822                           status	equ	0xFD8
  7823                           
  7824                           	psect	text59
  7825  000000                     __ptext59:
  7826                           	opt stack 0
  7827                           tosu	equ	0xFFF
  7828                           tosh	equ	0xFFE
  7829                           tosl	equ	0xFFD
  7830                           pclatu	equ	0xFFB
  7831                           pclath	equ	0xFFA
  7832                           tblptru	equ	0xFF8
  7833                           tblptrh	equ	0xFF7
  7834                           tblptrl	equ	0xFF6
  7835                           tablat	equ	0xFF5
  7836                           prodh	equ	0xFF4
  7837                           prodl	equ	0xFF3
  7838                           intcon	equ	0xFF2
  7839                           intcon2	equ	0xFF1
  7840                           intcon3	equ	0xFF0
  7841                           postinc0	equ	0xFEE
  7842                           fsr0h	equ	0xFEA
  7843                           fsr0l	equ	0xFE9
  7844                           wreg	equ	0xFE8
  7845                           postinc1	equ	0xFE6
  7846                           postdec1	equ	0xFE5
  7847                           fsr1h	equ	0xFE2
  7848                           fsr1l	equ	0xFE1
  7849                           indf2	equ	0xFDF
  7850                           postinc2	equ	0xFDE
  7851                           postdec2	equ	0xFDD
  7852                           fsr2h	equ	0xFDA
  7853                           fsr2l	equ	0xFD9
  7854                           status	equ	0xFD8
  7855                           
  7856                           	psect	rparam
  7857  0000                     tosu	equ	0xFFF
  7858                           tosh	equ	0xFFE
  7859                           tosl	equ	0xFFD
  7860                           pclatu	equ	0xFFB
  7861                           pclath	equ	0xFFA
  7862                           tblptru	equ	0xFF8
  7863                           tblptrh	equ	0xFF7
  7864                           tblptrl	equ	0xFF6
  7865                           tablat	equ	0xFF5
  7866                           prodh	equ	0xFF4
  7867                           prodl	equ	0xFF3
  7868                           intcon	equ	0xFF2
  7869                           intcon2	equ	0xFF1
  7870                           intcon3	equ	0xFF0
  7871                           postinc0	equ	0xFEE
  7872                           fsr0h	equ	0xFEA
  7873                           fsr0l	equ	0xFE9
  7874                           wreg	equ	0xFE8
  7875                           postinc1	equ	0xFE6
  7876                           postdec1	equ	0xFE5
  7877                           fsr1h	equ	0xFE2
  7878                           fsr1l	equ	0xFE1
  7879                           indf2	equ	0xFDF
  7880                           postinc2	equ	0xFDE
  7881                           postdec2	equ	0xFDD
  7882                           fsr2h	equ	0xFDA
  7883                           fsr2l	equ	0xFD9
  7884                           status	equ	0xFD8
  7885                           
  7886                           	psect	temp
  7887  00004D                     btemp:
  7888                           	opt stack 0
  7889  00004D                     	ds	1
  7890  0000                     int$flags	set	btemp
  7891  0000                     wtemp6	set	btemp+1
  7892                           tosu	equ	0xFFF
  7893                           tosh	equ	0xFFE
  7894                           tosl	equ	0xFFD
  7895                           pclatu	equ	0xFFB
  7896                           pclath	equ	0xFFA
  7897                           tblptru	equ	0xFF8
  7898                           tblptrh	equ	0xFF7
  7899                           tblptrl	equ	0xFF6
  7900                           tablat	equ	0xFF5
  7901                           prodh	equ	0xFF4
  7902                           prodl	equ	0xFF3
  7903                           intcon	equ	0xFF2
  7904                           intcon2	equ	0xFF1
  7905                           intcon3	equ	0xFF0
  7906                           postinc0	equ	0xFEE
  7907                           fsr0h	equ	0xFEA
  7908                           fsr0l	equ	0xFE9
  7909                           wreg	equ	0xFE8
  7910                           postinc1	equ	0xFE6
  7911                           postdec1	equ	0xFE5
  7912                           fsr1h	equ	0xFE2
  7913                           fsr1l	equ	0xFE1
  7914                           indf2	equ	0xFDF
  7915                           postinc2	equ	0xFDE
  7916                           postdec2	equ	0xFDD
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         114
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      76
    BANK0           160     53     153
    BANK1           256     21      21
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), Absolute function(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), Absolute function(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    _moverse->_mover_motor_A
    _moverse->_mover_motor_B
    _mover_motor_B->_PWM4_LoadDutyValue
    _mover_motor_A->_PWM5_LoadDutyValue
    _lectura_precalibracion->_ADC_GetConversion
    _calibracion->___awdiv
    _calculo_PID->___ftmul
    _leer_sensores->___wmul
    ___wmul->___awdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___wmul
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_calculo_PID
    _calculo_PID->_leer_sensores

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   25884
                                             53 COMRAM     2     2      0
                                              0 BANK1     21    21      0
                  _SYSTEM_Initialize
            _TMR4_HasOverflowOccured
                            ___fttol
                        _calculo_PID
                        _calibracion
                   _encender_motores
             _lectura_precalibracion
                            _moverse
 ---------------------------------------------------------------------------------
 (1) _moverse                                              4     0      4    1234
                                             24 COMRAM     4     0      4
                      _mover_motor_A
                      _mover_motor_B
 ---------------------------------------------------------------------------------
 (2) _mover_motor_B                                        2     0      2     496
                                             22 COMRAM     2     0      2
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (3) _PWM4_LoadDutyValue                                   4     2      2     242
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _mover_motor_A                                        2     0      2     496
                                             22 COMRAM     2     0      2
                 _PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (3) _PWM5_LoadDutyValue                                   4     2      2     242
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _lectura_precalibracion                               0     0      0      31
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _encender_motores                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibracion                                         26    26      0    1893
                                             26 COMRAM    26    26      0
                  _ADC_GetConversion
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _calculo_PID                                         36    33      3   20397
                                             17 BANK0     36    33      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___wmul
                      _leer_sensores
 ---------------------------------------------------------------------------------
 (2) _leer_sensores                                       25    25      0    2301
                                             32 COMRAM     8     8      0
                                              0 BANK0     17    17      0
                  _ADC_GetConversion
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     772
                                             26 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     805
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     155
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4061
                                             38 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     378
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3633
                                              0 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    5118
                                             26 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3116
                                             32 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2893
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     461
                                             18 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (1) _TMR4_HasOverflowOccured                              1     1      0      65
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     968
                     _ADC_Initialize
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     363
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     605
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0       0
                                              0 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT2_ISR                                             0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (6) _INT2_CallBack                                        0     0      0       0
                   Absolute function *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _INT2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (6) _INT1_CallBack                                        0     0      0       0
                   Absolute function *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _INT1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0       0
                      _INT0_CallBack
 ---------------------------------------------------------------------------------
 (6) _INT0_CallBack                                        0     0      0       0
                   Absolute function *
       _INT0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _INT0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Receive_ISR                                  0     0      0       0
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultErrorHandler                          0     0      0       0
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_RxDataHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   _TMR4_HasOverflowOccured
   ___fttol
   _calculo_PID
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg
     ___wmul
       ___awdiv (ARG)
     _leer_sensores
       _ADC_GetConversion
       ___awdiv
       ___wmul
         ___awdiv (ARG)
   _calibracion
     _ADC_GetConversion
     ___awdiv
   _encender_motores
   _lectura_precalibracion
     _ADC_GetConversion
   _moverse
     _mover_motor_A
       _PWM5_LoadDutyValue
     _mover_motor_B
       _PWM4_LoadDutyValue

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _EUSART1_Transmit_ISR *
   _INT0_ISR *
     _INT0_CallBack
       Absolute function(Fake) *
       _INT0_DefaultInterruptHandler *
   _INT1_ISR *
     _INT1_CallBack
       Absolute function(Fake) *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR *
     _INT2_CallBack
       Absolute function(Fake) *
       _INT2_DefaultInterruptHandler *
   _PIN_MANAGER_IOC *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     15      15       6        8.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     35      99       4       95.6%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     37      4C       1       80.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FA       9        0.0%
DATA                 0      0      FA      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Nov 03 15:42:50 2019

                      _eusart1TxBufferRemaining 0049                                              l39 157C  
                                            _KD 00F3                                              _KP 00F6  
                                  ___awdiv@sign 0018                             ___wmul@multiplicand 001D  
                                  __CFG_CP0$OFF 000000                                    __CFG_CP1$OFF 000000  
                                  __CFG_CP2$OFF 000000                                    __CFG_CP3$OFF 000000  
                                  ___ftadd@exp1 0026                                    ___ftadd@exp2 0025  
                                   __CFG_LVP$ON 000000                                    ___ftadd@sign 0024  
                                           l601 0690                                             l282 12E4  
                                           l603 078A                                             l611 04E0  
                                           l605 07E6                                             l613 0532  
                                           l541 089A                                             l533 0820  
                                           l615 058E                                             l543 0900  
                                           l535 0832                                             l800 1108  
                                           l616 05B2                                             l801 1112  
                                           l609 0480                                             l561 1200  
                                           l545 0934                                             l802 1120  
                                           l563 1216                                             l571 11C8  
                                           l547 096E                                             l564 1220  
                                           l572 11D2                                             l821 1310  
                                           l565 122C                                             l573 11DE  
                                           l549 09A6                                             l840 0E60  
                                           l904 0D7A                                             l912 0FC0  
                                           l841 0E56                                             l913 0FF0  
                                           l921 0BB8                                             l593 032C  
                                           l585 025C                                             l569 11B2  
                                           l906 0DA2                                             l922 0BEA  
                                           l930 1464                                             l843 0E94  
                                           l907 0DE0                                             l923 0BFA  
                                           l587 02A4                                             l940 0C88  
                                           l844 0E7E                                             l908 0E06  
                                           l596 0346                                             l925 0C12  
                                           l597 0348                                             l589 02F0  
                                           l942 0CFE                                             l846 0EBC  
                                           l926 0C22                                             l951 0D3E  
                                           l943 0CEE                                             l847 0EB2  
                                           l871 0A0E                                             l919 0B90  
                                           l880 0A9E                                             l793 10BA  
                                           l794 10CA                                             l875 0A38  
                                           l948 0D22                                             l796 10E8  
                                           l949 0D16                                             l885 0A94  
                                           l797 10E0                                             l894 0AD2  
                                           l886 0A8A                                             l895 0AC8  
                                           l897 0AF6                                             l898 0B12  
                                           l899 0B42                                    __CFG_CPB$OFF 000000  
                                           _PR2 000FBB                                             _PR4 000F52  
                                  __CFG_CPD$OFF 000000                      ??_INT0_SetInterruptHandler 0015  
                               _TMR2_Initialize 1594                                 _PWM4_Initialize 155E  
                                           prod 000FF3                                             tosl 000FFD  
                                           wreg 000FE8                                      _TXSTA1bits 000FAC  
                                 _INT0_CallBack 14D6                                   _INT1_CallBack 14B6  
                                  ___ftdiv@cntr 00C7                                    ___ftdiv@sign 00CC  
                                          l3225 0688                          __size_of_leer_sensores 01D4  
                                          l3505 05A6                                            l3507 05AA  
                                          l3529 0254                                            l3487 04D8  
                                          l3649 082A                                            l3685 096E  
                                          l2991 101C                                            l3689 09A6  
                                          u3001 09CC                                            u3011 09E0  
                                          u3100 0A68                                            _LATA 000F89  
                                          _LATB 000F8A                                            _LATC 000F8B  
                                          u3040 0A00                                            _LATD 000F8C  
                                          _LATE 000F8D                                            u3211 0D62  
                                          u3140 0AA6                                            u3070 0A2A  
                                          u3231 0D8A                                            u3170 0ADA  
                                          u3500 02E0                                            u3420 0592  
                                          u3261 0B78                                            u3430 05A6  
                                          u3600 0CA6                                            u2800 0EC6  
                                          u3281 0BA0                                            u3530 02FE  
                                          u3380 047E                                            u3700 085A  
                                          u3605 0C9E                                            u3640 0D28  
                                          u2760 0E48                                            u3480 02D2  
                                          u2860 10EC                                            u3581 0C6C  
                                          u3750 0944                                            u3760 097E  
                                          u3680 083A                                            u3695 083C  
                                          u3777 0846                                            u3787 12DA  
                                          _TMR2 000FBC                                            _TMR4 000F53  
                       _TMR4_HasOverflowOccured 153A                                            _WPUB 000F61  
                                 _INT2_CallBack 1496                                            _main 07EA  
                                  ___ftpack@arg 0013                                    ___ftpack@exp 0016  
                                          fsr0h 000FEA                                            fsr1h 000FE2  
                                          fsr2h 000FDA                                            fsr0l 000FE9  
                                          indf2 000FDF                                            fsr1l 000FE1  
                                          fsr2l 000FD9                                            btemp 004D  
                                 __CFG_BORV$190 000000               __size_of_INT2_SetInterruptHandler 000A  
             calibracion@repeticiones_calibrado 0020                       ?_INT2_SetInterruptHandler 0013  
                                          prodh 000FF4                                            prodl 000FF3  
                                          start 0106                                   __CFG_IESO$OFF 000000  
                               _PWM5_Initialize 1526                                    ___ftmul@cntr 0034  
                                  ___param_bank 000000                                    ___ftmul@sign 0035  
                    __end_of_PWM5_LoadDutyValue 13D0                                    ___fttol@exp1 0021  
                                  ___fttol@lval 001D                                __end_of_INT0_ISR 1602  
                              __end_of_INT1_ISR 1594                                __end_of_INT2_ISR 15FA  
                __size_of_OSCILLATOR_Initialize 0012                                    main@anterior 0100  
                 __end_of_OSCILLATOR_Initialize 1582                            __size_of_calibracion 0210  
                         _eusart1RxStatusBuffer 0090                                           ?_main 0001  
                               __end_of___awdiv 112A                                 __end_of___ftadd 0B68  
                               __end_of___ftdiv 0E38                                 __end_of___ftneg 1472  
                          __size_of_calculo_PID 02FC                                 __end_of___ftmul 0C5C  
                               ___awdiv@divisor 0015                                 __end_of___fttol 0D50  
                                         _T2CON 000FBA                                           _LATC1 007C59  
                                         _LATC2 007C5A                                           _LATD0 007C60  
                                         _LATC3 007C5B                                           _LATD2 007C62  
                                         _LATC7 007C5F                                           _T4CON 000F51  
                                __CFG_DEBUG$OFF 000000                                           i2l400 13F6  
                                         i2l412 1492                                           i2l181 0082  
                      __end_of_encender_motores 1618                                           i2l407 0F8A  
                                         i2l175 005E                                           i2l184 009C  
                                         i2l177 006A                                           i2l179 0076  
                                         i2l399 13FA                                 ___awdiv@counter 0017  
                            _PWM4_LoadDutyValue 136C                                           _TRISA 000F92  
                                         _TRISB 000F93                                  ?_INT0_CallBack 0001  
                                         _TRISC 000F94                                           _TRISD 000F95  
                                         _TRISE 000F96                                   __CFG_WRT0$OFF 000000  
                               _TMR4_Initialize 154C                                   __CFG_WRT1$OFF 000000  
                                 __CFG_WRT2$OFF 000000                                   __CFG_WRT3$OFF 000000  
                          _EUSART1_Transmit_ISR 13D0                                  __CFG_EBTR0$OFF 000000  
                                __CFG_FCMEN$OFF 000000                                  __CFG_EBTR1$OFF 000000  
                                __CFG_EBTR2$OFF 000000                                  __CFG_EBTR3$OFF 000000  
                                 __CFG_WRTB$OFF 000000                                   __CFG_WRTC$OFF 000000  
                                 __CFG_WRTD$OFF 000000                                  ?_INT1_CallBack 0001  
                                __CFG_EBTRB$OFF 000000                                   ___awtoft@sign 0024  
                       __end_of_PIN_MANAGER_IOC 1620                  ??_INT1_DefaultInterruptHandler 0001  
                           ?_PWM4_LoadDutyValue 0013                              __CFG_MCLRE$EXTMCLR 000000  
                                 ___ftpack@sign 0017                                  ?_INT2_CallBack 0001  
                      _INT1_SetInterruptHandler 15AC                                  __pbitbssCOMRAM 0260  
                                         pclath 000FFA                                           tablat 000FF5  
                               __end_of_moverse 1510                                           status 000FD8  
                                         wtemp6 004E                                  __CFG_HFOFST$ON 000000  
    __end_of_EUSART1_DefaultFramingErrorHandler 1628     __size_of_EUSART1_DefaultFramingErrorHandler 0002  
          ??_EUSART1_DefaultFramingErrorHandler 0001             ?_EUSART1_DefaultFramingErrorHandler 0001  
            _EUSART1_DefaultFramingErrorHandler 1626                                  __CFG_PBADEN$ON 000000  
                               __initialization 123A                      __end_of_EUSART1_Initialize 119E  
                                  __end_of_main 09BC                            ??_PWM4_LoadDutyValue 0015  
                                 _leer_sensores 0616                        ??_lectura_precalibracion 0018  
                       __end_of_PWM4_Initialize 1570                         __end_of_TMR2_Initialize 15A2  
                   ?_INTERRUPT_InterruptManager 0001                                          ??_main 0036  
                                 ___fttol@sign1 001C                                   __activetblptr 000002  
                                __CFG_PLLCFG$ON 000000                           ?_EUSART1_Transmit_ISR 0001  
                      calibracion@numero_sensor 0034                       ??_TMR4_HasOverflowOccured 0013  
                                        _ADCON0 000FC2                                          _ADCON1 000FC1  
                                        _ADCON2 000FC0                                          _ADRESH 000FC4  
                                        _ADRESL 000FC3                                          _CCPR4H 000F59  
                                        _CCPR5H 000F56                                          _CCPR4L 000F58  
                                        _CCPR5L 000F55                                ___awdiv@dividend 0013  
             leer_sensores@lectura_sin_calibrar 00BE                                __end_of___awtoft 1334  
                                        _ANSELA 000F38                                          _ANSELB 000F39  
                                        _ANSELC 000F3A                                          _ANSELD 000F3B  
                                        _ANSELE 000F3C                                __end_of___ftpack 0EE6  
                       __end_of_PWM5_Initialize 153A                 calibracion@lectura_sin_calibrar 0024  
                                __CFG_WDTEN$OFF 000000                                          _RCREG1 000FAE  
                                        _RCSTA1 000FAB                                          _OSCCON 000FD3  
                                        _PLLRDY 007E97                                          _SPBRG1 000FAF  
                                        _TXREG1 000FAD                                          _TXSTA1 000FAC  
                                __CFG_XINST$OFF 000000                    calculo_PID@valores_digitales 00DA  
                                  _CCPTMRS1bits 000F48                                          ___ftge 0F90  
                                ?_leer_sensores 0001                                          ___wmul 1428  
                                     ??___awdiv 0017                                       ??___ftadd 0021  
                                __CFG_STVREN$ON 000000                                       ??___ftdiv 00C4  
                                     ??___ftneg 0016                                       ??___ftmul 002D  
                                     ??___fttol 0017                        ?_EUSART1_SetErrorHandler 0013  
                       __end_of_TMR4_Initialize 155E                                          clear_0 1260  
                                        clear_1 126E                                ___awdiv@quotient 0019  
                                        _sensor 00AE                ??_EUSART1_SetOverrunErrorHandler 0015  
               ?_EUSART1_SetOverrunErrorHandler 0013                                 ??_INT0_CallBack 0001  
                         ___ftmul@f3_as_product 0031            __end_of_INT2_DefaultInterruptHandler 1622  
         __size_of_INT2_DefaultInterruptHandler 0002                    _INT2_DefaultInterruptHandler 1620  
                               ??_INT1_CallBack 0001                                          tblptrh 000FF7  
                                        tblptrl 000FF6                                          tblptru 000FF8  
                                     ??_moverse 001D                        ADC_GetConversion@channel 0017  
                               ??_INT2_CallBack 0001        INT2_SetInterruptHandler@InterruptHandler 0013  
      INT1_SetInterruptHandler@InterruptHandler 0013        INT0_SetInterruptHandler@InterruptHandler 0013  
                              ?_PIN_MANAGER_IOC 0001                                 _eusart1RxBuffer 0098  
                             main@extra_abajo_A 010A                               main@extra_abajo_B 0108  
                 __size_of_INTERRUPT_Initialize 0004                                 _eusart1TxBuffer 00A0  
                             _SYSTEM_Initialize 13FE                                      __accesstop 0060  
                       __end_of__initialization 1274                                       ?_INT0_ISR 0001  
                                     ?_INT1_ISR 0001                                       ?_INT2_ISR 0001  
                                    ___ftadd@f1 001B                                      ___ftadd@f2 001E  
                                    ___ftge@ff1 0013                                      ___ftge@ff2 0016  
                            ?_SYSTEM_Initialize 0001                                   ___rparam_used 000001  
                                    ___ftdiv@f1 00BE                                      ___ftdiv@f2 00C1  
                                    ___ftdiv@f3 00C8                                      ___ftneg@f1 0013  
                                    ___awtoft@c 0021                  __size_of_EUSART1_RxDataHandler 0024  
                 __end_of_EUSART1_RxDataHandler 1496                                      ___ftmul@f1 0027  
                                    ___ftmul@f2 002A                                      ___fttol@f1 0013  
                                __pcstackCOMRAM 0001                                    __pidataBANK0 1602  
                           ??_SYSTEM_Initialize 0015                 __size_of_lectura_precalibracion 0086  
                              ?_TMR2_Initialize 0001                                ?_PWM4_Initialize 0001  
                   PWM4_LoadDutyValue@dutyValue 0013                          ??_EUSART1_Transmit_ISR 0001  
                   __size_of_EXT_INT_Initialize 0038                __end_of_INT2_SetInterruptHandler 15AC  
                   __end_of_EUSART1_Receive_ISR 0F90                   ?_INT2_DefaultInterruptHandler 0001  
                         __end_of_mover_motor_A 123A                           __end_of_mover_motor_B 11EC  
                     __end_of_SYSTEM_Initialize 1428                                   _eusart1RxHead 0048  
                                 _eusart1TxHead 004B                                   _eusart1RxTail 0047  
                                    __pbssBANK0 0060                                   _eusart1TxTail 004A  
             _EUSART1_TxDefaultInterruptHandler 0043                 ??_EUSART1_SetRxInterruptHandler 0015  
                              ?_PWM5_Initialize 0001                           _INT0_InterruptHandler 003F  
                                    ??_INT0_ISR 0001                                      ??_INT1_ISR 0001  
                                    ??_INT2_ISR 0001                                 ??_leer_sensores 0021  
               __end_of_EUSART1_SetErrorHandler 15F2                              __CFG_CCP2MX$PORTC1 000000  
                                       ?___ftge 0013                                         ?___wmul 001B  
                            __CFG_CCP3MX$PORTB5 000000                                         _CCP4CON 000F57  
                                       _CCP5CON 000F54                                ?_TMR4_Initialize 0001  
                                     ?___awtoft 0021                                       ?___ftpack 0013  
                                    _flag_recta 0260                                  main@correccion 0101  
                       __size_of_ADC_Initialize 0016          __end_of_EUSART1_SetFramingErrorHandler 15E8  
       __size_of_EUSART1_SetFramingErrorHandler 000A                  _EUSART1_SetFramingErrorHandler 15DE  
                    ??_INT1_SetInterruptHandler 0015                        calculo_PID@valor_digital 00F1  
                             ?_encender_motores 0001                    ?_EUSART1_DefaultErrorHandler 0001  
                            _PWM5_LoadDutyValue 139E                                         _OSCCON2 000FD2  
                                       i2u21_48 14C2                                         i2u23_48 14A2  
                                       i2u19_48 14E2                                         _OSCTUNE 000F9B  
                                       i2u71_40 158C                              ??_encender_motores 0013  
                                       i2u72_45 158E                                         _SPBRGH1 000FB0  
                              calculo_PID@error 00EE                          _lectura_precalibracion 1020  
                           ?_PWM5_LoadDutyValue 0013               __size_of_INT0_SetInterruptHandler 000A  
                     ?_INT0_SetInterruptHandler 0013                                 __CFG_PWRTEN$OFF 000000  
                                       __Hparam 0000                                         __Lparam 0000  
                               __size_of___ftge 0090                                   ??_calibracion 001B  
                                       ___awdiv 10A6                                         ___ftadd 09BC  
                                       ___ftdiv 0D50                                         ___ftneg 144E  
                               __size_of___wmul 0026                                         ___ftmul 0B68  
                                       ___fttol 0C5C                                   ??_calculo_PID 00D2  
                          ??_PWM5_LoadDutyValue 0015                                         __pcinit 123A  
                                    ??___awtoft 0024                                      ??___ftpack 0018  
                                       __ramtop 0600                                         __ptext0 07EA  
                                       __ptext1 14F6                                         __ptext2 119E  
                                       __ptext3 136C                                         __ptext4 11EC  
                                       __ptext5 139E                                         __ptext6 1020  
                                       __ptext7 1614                                         __ptext8 0406  
                                       __ptext9 010A                           _OSCILLATOR_Initialize 1570  
                                     _T2CONbits 000FBA                                       _T4CONbits 000F51  
                            _EUSART1_Initialize 112A                        ??_PIN_MANAGER_Initialize 0013  
                                       _moverse 14F6                   ??_EUSART1_DefaultErrorHandler 0001  
                    __size_of_SYSTEM_Initialize 002A                            end_of_initialization 1274  
                      _INT2_SetInterruptHandler 15A2                             ?_EUSART1_Initialize 0001  
                ??_INT2_DefaultInterruptHandler 0001                          mover_motor_A@velocidad 0017  
                                 __Lmediumconst 0000                     _EUSART1_OverrunErrorHandler 00AA  
         __end_of_EUSART1_SetRxInterruptHandler 15D4          __size_of_EUSART1_SetRxInterruptHandler 000A  
                 _EUSART1_SetRxInterruptHandler 15CA                        calculo_PID@numero_sensor 00F2  
                        mover_motor_B@velocidad 0017                                         postdec1 000FE5  
                                       postdec2 000FDD                                         postinc0 000FEE  
                                       postinc1 000FE6                                         postinc2 000FDE  
                   __size_of_PWM4_LoadDutyValue 0032                            ??_EUSART1_Initialize 0015  
                                    _sensor_max 0080                                      _sensor_min 0070  
                         _INT1_InterruptHandler 003D                                       _PORTBbits 000F81  
                           __end_of_calibracion 0616                             __end_of_calculo_PID 0406  
              __size_of_EUSART1_SetErrorHandler 000A                              main@extra_arriba_A 0104  
                            main@extra_arriba_B 0106                                     ___ftdiv@exp 00CB  
                                    main@inicio 010E                               __size_of_INT0_ISR 0008  
                             __size_of_INT1_ISR 0012                               __size_of_INT2_ISR 0008  
          __size_of_EUSART1_DefaultErrorHandler 0006                                     ___ftmul@exp 0030  
                                  _media_blanco 0060                    __end_of_INTERRUPT_Initialize 161C  
          __end_of_INT0_DefaultInterruptHandler 1626           __size_of_INT0_DefaultInterruptHandler 0002  
                  _INT0_DefaultInterruptHandler 1624                                  __end_of___ftge 1020  
                                __end_of___wmul 144E                                  _ADC_Initialize 1510  
                        ?_OSCILLATOR_Initialize 0001                        ?_TMR4_HasOverflowOccured 0001  
                         __end_of_INT0_CallBack 14F6                             start_initialization 123A  
               __size_of_PIN_MANAGER_Initialize 0042                           __end_of_INT1_CallBack 14D6  
 EUSART1_SetRxInterruptHandler@interruptHandler 0013   EUSART1_SetTxInterruptHandler@interruptHandler 0013  
                         __end_of_INT2_CallBack 14B6                                _calculo_PID$2036 00EB  
                      __size_of_PIN_MANAGER_IOC 0004                                        ??___ftge 0019  
                                      ??___wmul 001F                           _EUSART1_RxDataHandler 1472  
                                   _calibracion 0406                  ?_EUSART1_SetRxInterruptHandler 0013  
                        __end_of_ADC_Initialize 1526                                     __pdataBANK0 00F3  
                            moverse@velocidad_A 0019                              moverse@velocidad_B 001B  
                                   _calculo_PID 010A                      __end_of_EXT_INT_Initialize 136C  
                 ?_INT0_DefaultInterruptHandler 0001                                  _eusart1RxCount 0046  
                             __size_of___awtoft 0038                               __size_of___ftpack 00AE  
                   PWM5_LoadDutyValue@dutyValue 0013                                     __pbssCOMRAM 0038  
             _EUSART1_RxDefaultInterruptHandler 0041                __end_of_INT0_SetInterruptHandler 15C0  
                       ?_lectura_precalibracion 0001                   __size_of_EUSART1_Transmit_ISR 002E  
                                 __pcstackBANK0 00BE                                   __pcstackBANK1 0100  
                      __size_of_PWM4_Initialize 0012                        __size_of_TMR2_Initialize 000E  
               ??_EUSART1_SetTxInterruptHandler 0015                ??_EUSART1_SetFramingErrorHandler 0015  
               ?_EUSART1_SetFramingErrorHandler 0013                    __size_of_EUSART1_Receive_ISR 00AA  
                         _INT2_InterruptHandler 003B                       __size_of_encender_motores 0004  
                        _PIN_MANAGER_Initialize 1282                        __size_of_PWM5_Initialize 0014  
                                     __pintcode 0008                           __end_of_leer_sensores 07EA  
                        __size_of_mover_motor_A 004E                          __size_of_mover_motor_B 004E  
                                      ?___awdiv 0013                                        ?___ftadd 001B  
                                      ?___ftdiv 00BE                                        ?___ftneg 0013  
                                      ?___ftmul 0027                                        ?___fttol 0013  
                               ?_ADC_Initialize 0001                 __end_of_TMR4_HasOverflowOccured 154C  
                  ??_INTERRUPT_InterruptManager 0001                                __CFG_PRICLKEN$ON 000000  
                __end_of_lectura_precalibracion 10A6                      ??_INT2_SetInterruptHandler 0015  
                                      _BAUDCON1 000FB8      __end_of_EUSART1_DefaultOverrunErrorHandler 160E  
   __size_of_EUSART1_DefaultOverrunErrorHandler 0006            ??_EUSART1_DefaultOverrunErrorHandler 0001  
           ?_EUSART1_DefaultOverrunErrorHandler 0001              _EUSART1_DefaultOverrunErrorHandler 1608  
                          _EUSART1_ErrorHandler 00A8                         _EUSART1_SetErrorHandler 15E8  
                                      ?_moverse 0019                        __size_of_TMR4_Initialize 0012  
                          _INTERRUPT_Initialize 1618                                        _INT0_ISR 15FA  
                                      _INT1_ISR 1582                                        _INT2_ISR 15F2  
                                ___wmul@product 001F         EUSART1_SetErrorHandler@interruptHandler 0013  
             __size_of_INT1_SetInterruptHandler 000A                       ?_INT1_SetInterruptHandler 0013  
                                      _PIE1bits 000F9D                                        i2u214_48 0F16  
                                      i2u214_49 0F2A             __size_of_INTERRUPT_InterruptManager 00FE  
                                      i2u216_48 0F46                                        i2u216_49 0F5A  
                                      i2u218_48 0F74                                        i2u262_48 00A6  
                                      i2u262_49 00BA                                        _PIR1bits 000F9E  
                                      i2u259_48 0090                                        _PIR5bits 000F7E  
                        ?_EUSART1_RxDataHandler 0001                                        _RCONbits 000FD0  
                              __CFG_WDTPS$32768 000000                               ??_PIN_MANAGER_IOC 0001  
                   __size_of_PWM5_LoadDutyValue 0032                                      _ADCON0bits 000FC2  
                             ___wmul@multiplier 001B                   TMR4_HasOverflowOccured@status 0013  
                ??_INT0_DefaultInterruptHandler 0001                                   _mover_motor_A 11EC  
                                 _mover_motor_B 119E                                     _INTCON2bits 000FF1  
                                   _INTCON3bits 000FF0                                       copy_data0 124E  
                         ?_INTERRUPT_Initialize 0001                        _INT0_SetInterruptHandler 15B6  
                             ??_TMR2_Initialize 0013                               ??_PWM4_Initialize 0013  
         __end_of_EUSART1_SetTxInterruptHandler 15CA          __size_of_EUSART1_SetTxInterruptHandler 000A  
                 _EUSART1_SetTxInterruptHandler 15C0                                        __Hrparam 0000  
                    __end_of_PWM4_LoadDutyValue 139E                                        __Lrparam 0000  
                             _ADC_GetConversion 12C4                              __CFG_BOREN$SBORDIS 000000  
                             __CFG_P2BMX$PORTD2 000000                         ??_OSCILLATOR_Initialize 0013  
                            ?_ADC_GetConversion 0013                                __size_of___awdiv 0084  
                              __size_of___ftadd 01AC                                __size_of___ftdiv 00E8  
                              __size_of___ftneg 0024                                __size_of___ftmul 00F4  
                              __size_of___fttol 00F4                     __size_of_EUSART1_Initialize 0074  
                                      ___awtoft 12FC                                        ___ftpack 0E38  
                             ??_PWM5_Initialize 0013                       ??_EUSART1_SetErrorHandler 0015  
           __end_of_EUSART1_DefaultErrorHandler 1614                     _EUSART1_DefaultErrorHandler 160E  
                           ??_ADC_GetConversion 0015                           calculo_PID@correccion 00E2  
                                ?_mover_motor_A 0017                                  ?_mover_motor_B 0017  
                  calculo_PID@valor_diferencial 00E8                                        __ptext10 0616  
                                      __ptext11 1428                                        __ptext20 0E38  
                                      __ptext12 10A6                                        __ptext21 0C5C  
                                      __ptext13 12C4                                        __ptext30 1618  
                                      __ptext22 153A                                        __ptext14 144E  
                                      __ptext31 1334                                        __ptext23 13FE  
                                      __ptext15 0B68                                        __ptext40 15E8  
                                      __ptext32 15A2                                        __ptext24 154C  
                                      __ptext16 0F90                                        __ptext41 1510  
                                      __ptext33 15AC                                        __ptext25 1594  
                                      __ptext17 0D50                                        __ptext50 15FA  
                                      __ptext34 15B6                                        __ptext26 1526  
                                      __ptext18 09BC                                        __ptext51 14D6  
                                      __ptext43 161C                                        __ptext35 112A  
                                      __ptext27 155E                                        __ptext19 12FC  
                                      __ptext52 1624                                        __ptext44 15F2  
                                      __ptext36 15C0                                        __ptext28 1282  
                                      __ptext53 13D0                                        __ptext45 1496  
                                      __ptext37 15CA                                        __ptext29 1570  
                                      __ptext54 0EE6                                        __ptext46 1620  
                                      __ptext38 15D4                                        __ptext55 1608  
                                      __ptext47 1582                                        __ptext39 15DE  
                                      __ptext56 1626                                        __ptext48 14B6  
                                      __ptext57 160E                                        __ptext49 1622  
                                      __ptext58 1472                                        __ptext59 0000  
                              __size_of_moverse 001A                      leer_sensores@numero_sensor 00CE  
                         calculo_PID@last_error 0038                __size_of_TMR4_HasOverflowOccured 0012  
                             ??_TMR4_Initialize 0013                                   __size_of_main 01D2  
                              _encender_motores 1614                       __end_of_ADC_GetConversion 12FC  
EUSART1_SetOverrunErrorHandler@interruptHandler 0013                                        int$flags 004D  
                                  ?_calibracion 0001              __end_of_INTERRUPT_InterruptManager 0106  
                    _INTERRUPT_InterruptManager 0008                                    ?_calculo_PID 00CF  
                   _EUSART1_FramingErrorHandler 00AC                             _EUSART1_Receive_ISR 0EE6  
          __end_of_INT1_DefaultInterruptHandler 1624           __size_of_INT1_DefaultInterruptHandler 0002  
                  _INT1_DefaultInterruptHandler 1622                                      _INTCONbits 000FF2  
                         main@correccion_entera 010C                          ??_INTERRUPT_Initialize 0013  
                            _EXT_INT_Initialize 1334                                        intlevel2 0000  
                          ?_EUSART1_Receive_ISR 0001                         ?_PIN_MANAGER_Initialize 0001  
                           ?_EXT_INT_Initialize 0001          __end_of_EUSART1_SetOverrunErrorHandler 15DE  
       __size_of_EUSART1_SetOverrunErrorHandler 000A                  _EUSART1_SetOverrunErrorHandler 15D4  
                                    _RCSTA1bits 000FAB                    __end_of_EUSART1_Transmit_ISR 13FE  
                              ??_ADC_Initialize 0013                          __size_of_INT0_CallBack 0020  
                        __size_of_INT1_CallBack 0020  EUSART1_SetFramingErrorHandler@interruptHandler 0013  
                ?_EUSART1_SetTxInterruptHandler 0013                   calculo_PID@valor_proporcional 00E5  
                        __size_of_INT2_CallBack 0020                              _eusart1RxLastError 0045  
                          ??_EXT_INT_Initialize 0015                   ?_INT1_DefaultInterruptHandler 0001  
                               ??_mover_motor_A 0019                                 ??_mover_motor_B 0019  
              __end_of_INT1_SetInterruptHandler 15B6                               __CFG_T3CMX$PORTC0 000000  
                         ??_EUSART1_Receive_ISR 0001                  __end_of_PIN_MANAGER_Initialize 12C4  
                             __CFG_FOSC$INTIO67 000000                                 _PIN_MANAGER_IOC 161C  
                          main@velocidad_avance 010F                         ??_EUSART1_RxDataHandler 0001  
                    __size_of_ADC_GetConversion 0038                           main@velocidad_motor_A 0111  
                         main@velocidad_motor_B 0113  
